<?xml version="1.0"?>
<doc>
<assembly>
<name>
Blackbaud.AppFx.Platform.Automation
</name>
</assembly>
<members>
<member name="T:Blackbaud.AppFx.Platform.Automation.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryAddingUserFailed">
<summary>
  Looks up a localized string similar to Adding user &apos;{0}&apos; failed with the following error when setting the password: &apos;{1}&apos;. To avoid a user record being added to the directory store without a valid password, an attempt was made to remove the user record. This attempt failed with error &apos;{2}&apos;. Contact your administrator to make ensure that user is removed or has a valid password..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryCannotDeleteUserWhichDoesNotExist">
<summary>
  Looks up a localized string similar to Cannot delete user &apos;{0}&apos; because user does not exist..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryEntryNotFound">
<summary>
  Looks up a localized string similar to DirectoryEntry does not exist or you do not have sufficient security rights to view it..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryEntryNotFoundWithPath">
<summary>
  Looks up a localized string similar to DirectoryEntry with path &apos;{0}&apos; does not exist or you do not have sufficient security rights to view it..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryGenericError">
<summary>
  Looks up a localized string similar to Error binding to object: &apos;{0}&apos; Double check the object path as well as the credentials used to access the object &apos;{1}&apos; to make sure they are correct. If they are and the error persists, the ActiveDirectory server or the Security Account Manager in case of WinNT may not be accessible..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryGroupWithNameExists">
<summary>
  Looks up a localized string similar to A group with name &apos;{0}&apos; already exists. Group and User names must be unique..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryLogOnFailure">
<summary>
  Looks up a localized string similar to Unable to access directory entry with path &apos;{0}&apos; as user &apos;{1}&apos;. Double check to make sure that the user name and password are correct..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryObjectFilterEmptyResults">
<summary>
  Looks up a localized string similar to Object filter &apos;{0}&apos; returned empty result.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryOrgUnitExists">
<summary>
  Looks up a localized string similar to Organizational Unit &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryServerNotAvailable">
<summary>
  Looks up a localized string similar to Server not available. Double check the path of your object &apos;{0}&apos; as well as the credentials used to access the object &apos;{1}&apos; to make sure they are correct. If they are and the error persists, the ActiveDirectory server may not be accessible..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryTargetOfInvocationError">
<summary>
  Looks up a localized string similar to The invocation of method &apos;{0}&apos; on object &apos;{1}&apos;  running under the credentials of &apos;{2}&apos; failed. {3}.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryUnableToRetrievePolicyAttributes">
<summary>
  Looks up a localized string similar to Unable to retrieve policy attributes from Domain root object. The search returned no results..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ActiveDirectoryUserOrGroupExists">
<summary>
  Looks up a localized string similar to A user or group with name &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.AppPoolsNotSupportedOnIIS5">
<summary>
  Looks up a localized string similar to Application Pools are not supported on IIS Version 5.0 and earlier..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.CannotPerformOperationOnNonExistingApplicationPool">
<summary>
  Looks up a localized string similar to You cannot perform operation &apos;{0}&apos; on application pool &apos;{1}&apos; because it does not exist yet. Call the create method first..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.CannotPerformOperationOnNonExistingVirtualDirectory">
<summary>
  Looks up a localized string similar to You cannot perform operation &apos;{0}&apos; on virtual directory &apos;{1}&apos; because it does not exist yet. Call the create method first..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.DeserializationFailure">
<summary>
  Looks up a localized string similar to Object of type &apos;{0}&apos; could not be deserialized..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.EmailAddress">
<summary>
  Looks up a localized string similar to Email address.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ErrorGettingVirtualDirectoryAccess">
<summary>
  Looks up a localized string similar to The following error occured when attempting to get the authentication type of object {0}{1} on host {2}: {3}.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ErrorSettingVirtualDirectoryAccess">
<summary>
  Looks up a localized string similar to The following error occured when attempting to set the authentication type of object {0}{1} on host {2}: {3} .
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.FailedToCreatePoolBecauseRecordExists">
<summary>
  Looks up a localized string similar to Application pool &apos;{0}&apos; already exists. The &apos;overwrite&apos; flag is set to &apos;false&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.FailedToCreatevDirBecauseRecordExists">
<summary>
  Looks up a localized string similar to Virtual directory &apos;{0}&apos; already exists. The &apos;overwrite&apos; flag is set to &apos;false&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.FailedToCreateWebsiteBecauseRecordExists">
<summary>
  Looks up a localized string similar to Website &apos;{0}&apos; already exists. The &apos;overwrite&apos; flag is set to &apos;false&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.FileDoesNotExist">
<summary>
  Looks up a localized string similar to File or Directory &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InsufficientRightsToPerformActiveDirectoryOperation">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; has insufficient privileges to perform operation &apos;{1}&apos; on object &apos;{2}&apos;. Contact your administrator to assign more rights to the current user or use alternate credentials to perform this operation..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidActiveDirectoryPath">
<summary>
  Looks up a localized string similar to Unable to evaluate DirectoryEntry using ADSI path &apos;{0}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidApplicationPoolPath">
<summary>
  Looks up a localized string similar to The application pool with the following ADSI path &apos;{0}&apos; cannot be found..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidApplicationPoolTemplate">
<summary>
  Looks up a localized string similar to The application pool to be used as a template &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidAppPoolName">
<summary>
  Looks up a localized string similar to Application pool &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidGuid">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; passed to parameter &apos;{1}&apos; is not a valid GUID..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidIndex">
<summary>
  Looks up a localized string similar to An Invalid index error indicates that a property was referenced that does not exist or that a value was specified for a property that is not allowed..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidObjectState">
<summary>
  Looks up a localized string similar to Object &apos;{0}&apos; is in an invalid state..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidParameterValue">
<summary>
  Looks up a localized string similar to Invalid value &apos;{0}&apos; for parameter &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidPropertyValue">
<summary>
  Looks up a localized string similar to A value of &apos;{0}&apos; is not allowed for parameter &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidUserOrGroupName">
<summary>
  Looks up a localized string similar to You must specify a valid name.  Make sure the name does not contain any invalid characters (&quot; / \ [ ] : ; | = , + * ? &lt; &gt;)..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidValueForIIS7">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; for property  &apos;{1}&apos; is not supported in IIS 7 or later..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidVariableValue">
<summary>
  Looks up a localized string similar to Variable &apos;{0}&apos; contains an invalid value of &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.InvalidVirtualDirectory">
<summary>
  Looks up a localized string similar to The virtual directory with the following ADSI path &apos;{0}&apos; cannot be found..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.MinMaxViolation">
<summary>
  Looks up a localized string similar to The value of variable &apos;{0}&apos; must be between &apos;{1}&apos; and &apos;{2}&apos;. The current value is &apos;{3}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.OperationDelete">
<summary>
  Looks up a localized string similar to Delete.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.OperationRecycle">
<summary>
  Looks up a localized string similar to Recycle.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.OperationSave">
<summary>
  Looks up a localized string similar to Save.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.OperationStart">
<summary>
  Looks up a localized string similar to Start.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.OperationStop">
<summary>
  Looks up a localized string similar to Stop.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ParamaterCannotBeNothing">
<summary>
  Looks up a localized string similar to Parameter &apos;{0}&apos; cannot be nothing..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.RegularExpressionFailedtoValidate">
<summary>
  Looks up a localized string similar to &apos;{0}&apos; is not a valid {1}..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.SchemaValidationFailure">
<summary>
  Looks up a localized string similar to The XML string does not correspond to schema &apos;{0}&apos;. The following validation error occured at line &apos;{1}&apos;, position &apos;{2}&apos;: &apos;{3}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.StringParameterCannotBeNullOrEmpty">
<summary>
  Looks up a localized string similar to String parameter &apos;{0}&apos; cannot be nothing or a zero length string..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.StringParameterIsInvalidURI">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; for parameter &apos;{1}&apos; is not a valid Uri..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.TwoVirtualDirectoryPathsWereTried">
<summary>
  Looks up a localized string similar to The following paths were tried: &apos;{0}&apos;, &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.UnableToDeleteAppPoolWithVirtualDirs">
<summary>
  Looks up a localized string similar to Unable delete application pool &apos;{0}&apos;. One or more virtual directories are associated with it..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.UnableToDeterminePhysicalPathFromVirtualDirectory">
<summary>
  Looks up a localized string similar to Unable to map virtual path &apos;{0}&apos; to a physical path. {1}Make sure the virtual path is valid and is associated with a physical path in IIS..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.UnableToExtractResource">
<summary>
  Looks up a localized string similar to Unable to extract resource &apos;{0}&apos; from assembly &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.UnableToRetrieveDotNetPathBecauseOfWMI">
<summary>
  Looks up a localized string similar to Unable to retrieve Framework path on host &apos;{0}&apos;. A connection to WMI is required to retrieve the information. The connection to WMI failed with the following error: &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.UnexpectedErrorDoingX">
<summary>
  Looks up a localized string similar to Unexpected error {0}.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.UserSetPasswordFailureReasons">
<summary>
  Looks up a localized string similar to This method may fail because the password does not satisfy minimum length or character pattern requirements established by the group policy. Try making the password longer or include a mix of  upper and lower case characters as well as special characters such as @ or !. If the password is correct and you continue to get this error, an unexpected error happened while communicating with the ActiveDirectory server..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ValidationMethodsStringTooLong">
<summary>
  Looks up a localized string similar to The maximum length for this parameter is &apos;{0}&apos; characters.  The specified value contains &apos;{1}&apos; characters..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.GeneralErrors.ValidationMethodsStringTooShort">
<summary>
  Looks up a localized string similar to The minimum length for this parameter is &apos;{0}&apos; character(s) . The specified value contains &apos;{1}&apos; characters..
</summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.DBNotFoundInSysDBs">
<summary>
  Looks up a localized string similar to Database &apos;{0}&apos; was not found in the sysdatabases table in &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.IndexPerfQuery">
<summary>
  Looks up a localized string similar to SELECT 
  mig.index_group_handle, mid.index_handle, 
  CONVERT (decimal (28,1), 
    migs.avg_total_user_cost * migs.avg_user_impact * (migs.user_seeks + migs.user_scans)
  ) AS improvement_measure, 
  &apos;CREATE INDEX missing_index_&apos; + CONVERT (varchar, mig.index_group_handle) + &apos;_&apos; + CONVERT (varchar, mid.index_handle) 
  + &apos; ON &apos; + mid.statement 
  + &apos; (&apos; + ISNULL (mid.equality_columns,&apos;&apos;) 
    + CASE WHEN mid.equality_columns IS NOT NULL AND mid.inequality_columns IS NOT NULL THEN &apos;,&apos; ELSE &apos;&apos; END 
 [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.InvalidCreateFolderPath">
<summary>
  Looks up a localized string similar to UNC paths are not supported. Pass in a local folder name using the standard &apos;Drive:\Folder&apos; format.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.PropertyAlreadySetToCorrectValue">
<summary>
  Looks up a localized string similar to The value of property &apos;{0}&apos; is already set to &apos;{1}&apos;. No further action is required..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.PropertyChanged">
<summary>
  Looks up a localized string similar to The value of property &apos;{0}&apos; has been changed from &apos;{1}&apos; to &apos;{2}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.PropertyChangeRequiresRestart">
<summary>
  Looks up a localized string similar to Property &apos;{0}&apos; is not dynamic. Changes to this property require a SQL Server restart to take effect..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.SQLServer.SQLServerNotInstalled">
<summary>
  Looks up a localized string similar to SQL Server does not appear to be installed on this system..
</summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.AccessDenied">
<summary>
  Looks up a localized string similar to Access Denied..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ActiveDirectorySearchFoundNoResults">
<summary>
  Looks up a localized string similar to The ActiveDirectory search &apos;{0}&apos; did not find any results in the following search path: &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.CheckTroubleShootWebSite1">
<summary>
  Looks up a localized string similar to http://www.microsoft.com/technet/scriptcenter/topics/help/wmi.mspx.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.CheckTroubleShootWebSite2">
<summary>
  Looks up a localized string similar to http://www.microsoft.com/technet/scriptcenter/topics/help/wmidiag.mspx.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.CheckWebSiteForMoreInfo">
<summary>
  Looks up a localized string similar to The following links provide additional information on troubleshooting WMI: {0}, {1}..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.CheckWMISecuritySettings">
<summary>
  Looks up a localized string similar to Check WMI security settings at the Security tab WMI Control console..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.EarlyProcessTermination">
<summary>
  Looks up a localized string similar to Process {0} was no longer running when trying to hook up the Win32_ProcessStopTrace. This indicates that the process was started successfully but terminated before the trace waiting for the ProcessExit event could be hooked up. If the process runs remotely and is expected to terminate almost immediately after it has started, this exception can be ignored. WMI traces can take some time to hook up and it is possible for a process to terminate before the trace is in place under certain circumstances..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ErrorAssigningRightsToFile">
<summary>
  Looks up a localized string similar to Error assigning rights to file &apos;{0}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ErrorAssigningRightsToFolder">
<summary>
  Looks up a localized string similar to Error assigning rights to folder &apos;{0}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ErrorConnectingToWMI">
<summary>
  Looks up a localized string similar to Error connecting to WMI on machine &apos;{0}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ErrorExpandingEnvironmentVariable">
<summary>
  Looks up a localized string similar to Error expanding environment variable &apos;{0}&apos;. The call failed with error code &apos;{1}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ErrorRetrievingRegistryValue">
<summary>
  Looks up a localized string similar to Error retrieving value from registry.  {0}.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ErrorSettingRegistryValue">
<summary>
  Looks up a localized string similar to Error setting value from registry.  {0}.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.InsufficientPrivileges">
<summary>
  Looks up a localized string similar to Insufficient Privileges..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.InvalidParameter">
<summary>
  Looks up a localized string similar to An invalid parameter was passed to a WMI method..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.InvalidRunProcessInput">
<summary>
  Looks up a localized string similar to Invalid input parameter. Command line: &apos;{0}&apos;;  Current Directory: &apos;{1}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.InvalidTerminateProcessInput">
<summary>
  Looks up a localized string similar to Invalid input parameter. WMI Query: &apos;{0}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.MultipleExpansionNotSupported">
<summary>
  Looks up a localized string similar to The value to be expanded &apos;{0}&apos; contains both %UserProfile% and another string to be expanded. This is not supported on remote machines..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.PageFileSize_ValueOutOfRange">
<summary>
  Looks up a localized string similar to Unable to modify page file setting as either the value is out of range or the virtual memory is set to system managed as opposed to custom..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.PathNotFound">
<summary>
  Looks up a localized string similar to Path not found: &apos;{0}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.PrivilegeMissing">
<summary>
  Looks up a localized string similar to Privilege Missing..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.ProcessTargetNotSupported">
<summary>
  Looks up a localized string similar to Environment variable target &apos;Process&apos; is not supported for remote machines or for users other than the current user..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.RegistryKeyNotFound">
<summary>
  Looks up a localized string similar to Registry value &apos;{0}&apos; cannont be set beacuse it does not exist or because the wrong method is being used..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.TurnOnDiagnosticLogging">
<summary>
  Looks up a localized string similar to Turn on diagnostic logging from the WMI Control console (wmimgmt.msc) and verify that you can connect to WMI on the target machine..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.UnableToMapOSTypeToSystemPlatformID">
<summary>
  Looks up a localized string similar to Unable to map OSType value &apos;{0}&apos; returned by WMI Class Win32_OperatingSystem to System.PlatformID value..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.UnableToSetSecurityRights">
<summary>
  Looks up a localized string similar to Unable to retrieve file security settings for folder &apos;{0}&apos; on &apos;{1}&apos;. Make sure the folder exists..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.UnexpectedReturnValue">
<summary>
  Looks up a localized string similar to WMI call returned unexpected return value: &apos;{0}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.UnKnownFailure">
<summary>
  Looks up a localized string similar to Unknown Failure..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Win32ScheduledJob_CantFindService">
<summary>
  Looks up a localized string similar to Unable to find a scheduled job with the Id &apos;{0}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Win32ScheduledJob_DeleteFail">
<summary>
  Looks up a localized string similar to Unable to delete a scheduled job with the Id &apos;{0}&apos;. Exception: {1}.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Win32ScheduledJob_InvalidCommand">
<summary>
  Looks up a localized string similar to You must specify a command to run.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Win32ScheduledJob_InvalidDayOfMonth">
<summary>
  Looks up a localized string similar to You must specify a valid day of the month.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Win32Service_CantFindService">
<summary>
  Looks up a localized string similar to Unable to find a windows service with the name &apos;{0}&apos;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.Win32Service_DeleteFail">
<summary>
  Looks up a localized string similar to &quot;Unable to delete a windows service with the name &apos;{0}&apos;. Exception: {1}&quot;.
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.WMIClassDoesNotSupportProperty">
<summary>
  Looks up a localized string similar to WMI class &apos;{0}&apos; does not support property &apos;{1}&apos;..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.WMINotFound">
<summary>
  Looks up a localized string similar to WMI was not found. This indicates a critial error in the WMI configuration. Original exception: {0}
This error indicates that WMI may be corrupt on &apos;{1}&apos;. Open the WMI Control console (wmimgmt.msc) and click on Properties to see if WMI is accessible on that server. If it is not, you may have to rebuild the WMI repository..
</summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.My.Resources.WMIErrorStrings.WrongRegistryKeyType">
<summary>
  Looks up a localized string similar to Registry value &apos;{0}&apos; cannot be retrieved because it does not exist or because the wrong method is being used. Check whether the value exists and whether the value is of a type that can be retrieved using &apos;{1}&apos;..
</summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ComErrorCode">
 <summary>
 This type reflects the most common error codes returned when a COM exception is thrown when accessing the ADSI providers underlying COM objects
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ComErrorCode.PasswordRestrictionStatus">
 <summary>
New error thrown part of a Windows security hotfix - password does not meet the security requirements
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ComErrorCode.WinNTAccountAlreadyExists">
 <summary>
 Error thrown by the WinNT provider if a user account already exists
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ComErrorCode.InvalidPassword">
 <summary>
 Thrown is user attempts to change password and the original password that is supplied is incorrect
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ComErrorCode.InvalidIndex">
 <summary>
 Thrown when properties are accessed that do not exist or when property values are specified with invalid values
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LdapPathDomainType">
 <summary>
 This type is used as an argument for the <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.LdapPathDomain"> functions</see>
 </summary>
 <remarks></remarks>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LdapPathDomainType.UserPreWindows2000Style">
 <summary>
 Obtains the domain name for the current user from Environment.UserDomainName which is typically PDNT, BBNT or something along thos lines
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LdapPathDomainType.UserActiveDirectoryStyle">
 <summary>
 Obtains the current domain by calling ActiveDirectoryServices.Domain.GetCurrentDomain. This will typically be a path such as Blackbaud.com
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LdapPathDomainType.Computer">
 <summary>
 Obtains the domain of the current work station and returns its path. This will typically result in a path such as pdnt.blackbaud.com or something along those lines
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo">
 <summary>
 This class is used as a return value by <see cref="M:Blackbaud.AppFx.Platform.Automation.Security.User.ObtainLastLogonInfo"/>. It provides information when a user has last logged on to a domain controller, as well as some statistics how expensive it was to calculate this infromation. If domain controllers are spread over a WAN, it can take some time to determine the last time a user logged on, as all domain controllers need to be checked.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.LastLogonDate">
 <summary>
 Returns the date/time of the last logon of a user on a domain. If the user has never logged in, <see cref="F:System.DateTime.MinValue"/> will be returned.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.DomainController">
 <summary>
 Returns the name of the domain controller on which the most recent logon took place. Returns nothing if the user has never logged in.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.NeverLoggedOn">
 <summary>
 Returns true if the user has logged in to the domain at least once, false otherwise.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.CostInMilliseconds">
 <summary>
 Returns the number of milliseconds it took to loop over all domain controllers. If, for some reason, there was an error calculating the time, it returns -1
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.DomainControllersQueried">
 <summary>
 Returns the total number of domain controllers that were queried for the LastLogon property of a user
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.DomainContollersQueriedSuccessfully">
 <summary>
 Returns the number of domain controllers that were successfully queried for the LastLogon property of a user
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.Errors">
 <summary>
 Returns any errors that were encountered while obtaining the last logon time for all domain controllers
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.QuerySuccessful">
 <summary>
 Returns true if all domain controllers were queried without errors. If no domain controller was queried or if there was an error in any of the queries, it returns false. It may still return a valid value for <see cref="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.LastLogonDate"/>. However, it is not guaranteed to be the most accurate unless a query can be performed across all domain controllers. If this value is false, the date will only reflect the most recent logon date for those domain controllers that could be queried successfully.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LastLogonInfo.NumberOfDaysSinceLastLogon">
 <summary>
 Returns the number of days since the last login. If the user has never logged in, it returns nothing
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper">
 <summary>
 This class exposes common ActiveDirectory functionality. You should call the wrapper classes such as User or OrganizationalUnit instead of these methods if a wrapper class is available for the object required by your code.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.BuildFilterOctetString(System.Byte[])">
 <summary>
 Use this function to convert binary data to search filter format
 </summary>
 <param name="bytes"></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.MembersOfImplementation(System.Collections.Generic.List{Blackbaud.AppFx.Platform.Automation.Security.User}@,System.Collections.Hashtable@,System.DirectoryServices.DirectoryEntry,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 use a tail-recursive function with two byRef parameters to search through sub-groups and reduce stack pressure with multiple calls
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ValidateActiveDirectoryEntryByClass(System.DirectoryServices.DirectoryEntry,System.Type,System.String)">
 <summary>
 This is used to make sure objects such as User or OrganizationlUnit cannot only be opened if they are supplied with a path that actually points to an object of such a type
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.FindLastLogonDate(Blackbaud.AppFx.Platform.Automation.Security.User,System.Predicate{System.DirectoryServices.ActiveDirectory.DomainController})">
 <summary>
 Call this function to loop over all domain controllers and return the last logon date
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.GetSafeUserNameAndPathFromObject(System.DirectoryServices.DirectoryEntry,System.String@,System.String@)">
 <summary>
 Call this to obtain the user name and path for an object. If no user name can be extracted, then the name of the current user will be part of the excetpion
 </summary>
 <param name="entry">DirectoryEntry object to query</param>
 <param name="userName">reference to string variable to hold user name</param>
 <param name="path">reference to path variable to hold object path</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.RaiseFailedLogonException(System.DirectoryServices.DirectoryEntry,System.Exception)">
 <summary>
 Use to raise a more descriptive exception when we cannot connect to an ActiveDirectory store because of invalid credentials
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.RaiseInsufficientPriviledgeException(System.String,System.DirectoryServices.DirectoryEntry,System.Exception)">
 <summary>
 Use to raise a more descriptive exception when we cannot connect perform an operation on an ActiveDirectory entry. The innerException will most likely be of the same exception type. It just does not contain the context information that we need to make it easier to track down.
 </summary>
 <param name="nameOfOperation">Specify the operation that was performed, such as "Add" or "Delete". The error message will say 'User 'X' has insufficient privileges to perform operation <paramref name="nameOfOperation"/> on object Y</param>
 <param name="entry"></param>
 <param name="innerException">This will most likely be an exception of type <see cref="T:System.UnauthorizedAccessException"/>. We will rethrow an exception of the same time, but with a more descriptive message.</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.RaiseTargetOfInvocationError(System.String,System.String,System.DirectoryServices.DirectoryEntry,System.Exception)">
 <summary>
 Use to raise a more descriptive exception the invocation of a method fails, indicating the method name and a possible reason. The text of the error message will be
 </summary>
 <param name="methodName">Specify the name of the method that was about to be invoked.</param>
 <param name="possibleReason">Pass in a possible reason why a method can fail. This may vary from method to method. For 'SetPassword', for example, can fail if the password does not meet the minimum length requirements defined in the group policy.</param>
 <param name="entry"></param>
 <param name="innerException">This will most likely be an exception of type <see cref="T:System.UnauthorizedAccessException"/>. We will rethrow an exception of the same time, but with a more descriptive message.</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ValidDirectoryEntry(System.DirectoryServices.DirectoryEntry)">
 <summary>
 Call this function to validate whether an object of type <see cref="T:System.DirectoryServices.DirectoryEntry"/> is valid. The function does this by checking the guid of the object. If doing so results in an error, the object does not point to a valid underlying ActiveDirectory object or the server cannot be contacted at this point.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ValidateActiveDirectoryEntry(System.String,System.DirectoryServices.DirectoryEntry)">
 <summary>
 Use this method to validate whether an object of type <see cref="T:System.DirectoryServices.DirectoryEntry"/> can access the underlying object in the ActiveDirectory store. 
 </summary>
 <param name="entry">DirectoryEntry object to validate.</param>
 <exception cref="T:System.ArgumentNullException">Thrown if the entry is nothing or cannot access the underlying ActiveDirectory object </exception>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">If the underlying GUID of the ActiveDirectory object cannot be accessed, indicating the object is invalid or does not exist.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Thrown if Access to directory entry is denied because the security settings.</exception>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Thrown if ActiveDirectory server is not availabe, incorrect user name of password are specified, or any other unexpected COM error is raised by the underlying ADSI COM layer.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.LdapPathDomain">
 <summary>
 Returns the short form of an LdapPath for the domain that the current user is connected to. This function does not validate whether the current user is a domain user. If you are connected as a local user or your machine is part of a work group, the LDAP path returned will not be valid. It uses the 
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.LdapPathDomain(Blackbaud.AppFx.Platform.Automation.ActiveDirectory.LdapPathDomainType)">
 <summary>
 Returns the requested LdapPath for current user or current computer
 </summary>
 <param name="pathType">Specify which LdapPath is required.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.LdapPathDomain(System.String)">
 <summary>
 This function returns an LDAP path for the supplied domain.
 </summary>
 <param name="domainName">Simple strings like pdnt will be returned as LDAP://pdnt. Strings with periods, such as x.y.z will be parsed out and returned as LDAP://DC=X,DC=Y,DC=Z</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.LdapPathDomainUsers(System.String)">
 <summary>
 This function returns an LDAP path for the global users for a supplied domain.
 </summary>
 <param name="domainName">Simple strings like pdnt will be returned as LDAP://pdnt. Strings with periods, such as x.y.z will be parsed out and returned as LDAP://CN=Users,DC=X,DC=Y,DC=Z</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WinNTObject">
 <summary>
 returns the WinNT root object for localhost
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WinNTObject(Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 returns the WinNT root object for the computer specified in context. Will throw exception if the entry is not found or not valid
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenUser(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Uses the LDAP provider to locate an object of type user that is contained in <paramref name="parentObject"/>. Raises an ActiveDirectoryObjectNotFound exception if the object is not found.
 </summary>
 <param name="userName">If will check whether the value passed in here matches the SAMAccountName attribute or the CN attribute.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenUser(System.DirectoryServices.DirectoryEntry,System.String,System.Boolean)">
 <summary>
 Uses the LDAP provider to locate an object of type user that is contained in <paramref name="parentObject"/>. Raises an ActiveDirectoryObjectNotFound exception if the object is not found.
 </summary>
 <param name="userName">It will check whether the value passed in here matches the SAMAccountName attribute or the CN attribute unless <paramref name="useAmbiguousNameResolution"/> is set to true.</param>
 <param name="useAmbiguousNameResolution">If true, it will use the Ambigouse Name Resolution filter. This will produce a match if the user name string is found in any of the various name attributes, such as CN, SamAccountName, UserPrincipalName, Name, etc. Beware that this will also search for substrings. Thus, it will return 'MyUser777' if the search string is 'MyUser7.'. Be sure to check the return value to make sure it is returning the user you want.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenGroup(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Uses the LDAP provider to locate an object of type group that is contained in <paramref name="parentObject"/>. Raises an ActiveDirectoryObjectNotFound exception if the object is not found.
 </summary>
 <param name="groupName">It will check whether the value passed in here matches the SAMAccountName attribute or the CN attribute.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenGroup(System.DirectoryServices.DirectoryEntry,System.String,System.Boolean)">
 <summary>
 Uses the LDAP provider to locate an object of type group that is contained in <paramref name="parentObject"/>. Raises an ActiveDirectoryObjectNotFound exception if the object is not found.
 </summary>
 <param name="groupName">It will check whether the value passed in here matches the SAMAccountName attribute or the CN attribute unless <paramref name="useAmbiguousNameResolution"/> is set to true.</param>
 <param name="useAmbiguousNameResolution">If true, it will use the Ambigouse Name Resolution filter. This will produce a match if the user name string is found in any of the various name attributes, such as CN, SamAccountName, LogonName, etc. Beware that this will also search for substrings. Thus, it will return 'MyGroup777' if the search string is 'MyGroup7.'. Be sure to check the return value to make sure it is returning the group you want.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenOrganizationalUnit(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Use this function to locate a child of type organizational unit contained in <paramref name="parentObject"/>. Raises an ActiveDirectoryObjectNotFound exception if the object is not found.
 </summary>
 <param name="organizationalUnit">Name of the organizational unit your are looking for</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenSingleObject(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Use this function to open a child object of the parent object using the value passed in by <paramref name="filter"/>  Raises an ActiveDirectoryObjectNotFound exception if the object is not found. Use this method if you want to open an activeDirectory entry for editing.
 </summary>
 <param name="parentObject">Valid ActiveDirectory entry that contains the object you are looking.</param>
 <param name="filter">Use the ActiveDirectory filter specification guidelines</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>    
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenSingleObject(System.DirectoryServices.DirectoryEntry,System.String,System.DirectoryServices.SearchScope)">
 <summary>
 Use this function to open a child object of the parent object using the value passed in by <paramref name="filter"/>  Raises an ActiveDirectoryObjectNotFound exception if the object is not found. Use this method if you want to open an activeDirectory entry for editing.
 </summary>
 <param name="parentObject">Valid ActiveDirectory entry that contains the object you are looking.</param>
 <param name="filter">Use the ActiveDirectory filter specification guidelines</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>    
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.OpenDirectoryEntry(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function as a wrapper to instantiate a DirectoryEntry using a code execution context. If the ActiveDirectory entry is invalid, this call wil
 </summary>
 <param name="objectPath">LDAP path to object</param>
 <param name="context">User credentials required to access ActiveDirectory store. Pass in nothing if custom credentials are not required.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.TryOpen(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.DirectoryServices.DirectoryEntry@)">
 <summary>
 Use this code in order to try to open an ActiveDirectory entry. It only traps errors that are expected if the object is not found. Any other errors will bubble up.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsWinNT(System.DirectoryServices.DirectoryEntry)">
 <summary>
 Call to determine if the directory provider of a directory entry is WinNT as opposed to LDAP
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsWinNT(System.String)">
 <summary>
 Call to determine if the directory provider of a directory entry is WinNT as opposed to LDAP <seealso cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsLDAP(System.DirectoryServices.DirectoryEntry)"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsLDAP(System.DirectoryServices.DirectoryEntry)">
 <summary>
 Call to determine if the directory provider of a directory entry is LDAP as opposed to WinNT <seealso cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsWinNT(System.DirectoryServices.DirectoryEntry)"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsLDAP(System.String)">
 <summary>
 Call to determine if the directory provider of a directory entry is LDAP as opposed to WinNT <seealso cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PathIsWinNT(System.DirectoryServices.DirectoryEntry)"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.StringIsActiveDirectoryPath(System.String)">
 <summary>
 Returns true if the string starts with WinNT:// or LDAP:// or string is IIS://. This function is not intended to validate the complete path. It is only used by some wrappers to determine if the object path that is passed in is supposed to be treated as an ActiveDirectory path or the name of the object.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.CommitChanges(System.DirectoryServices.DirectoryEntry)">
 <summary>
 Use this method to save changes to the underlying directory store. This method traps certain unauthorizedAccess expections and will ensure that a more descriptive error message is raised.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.Delete(System.DirectoryServices.DirectoryEntry)">
 <summary>
 Use this method to save changes to the underlying directory store. This method traps certain unauthorizedAccess expections and will ensure that a more descriptive error message is raised.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.DeleteUser(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Use this method to delete a directory entry of type user. An exception of type <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException"/> will be thrown if the user does not exist.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.Delete(System.DirectoryServices.DirectoryEntry,System.Boolean)">
 <summary>
 Use this method to remove and entry from the directory store. This method traps certain unauthorizedAccess expections and will ensure that a more descriptive error message is raised.
 </summary>
 <param name="deleteTree">If true, all children of <paramref name="entry"/> will be deleted as well.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.Invoke(System.DirectoryServices.DirectoryEntry,System.String,System.String,System.Object[])">
 <summary>
 Use this method to invoke a method on a DirectoryEntry. It traps certain errors and insures that a more descriptive error message is raised than may be the case if you invoke the method without going through this wrapper.
 </summary>
 <param name="entry">DirectoryEntry on which the method should be invoked.</param>
 <param name="methodName">name of the method to be invoked, such as 'SetPassword'</param>
 <param name="possibleReasonForFailure">Provide additional context information that may help track down why a method failed. 'SetPassword' for example may fail because the password does not meet minimum length requirements. The text you provide here will be incorporated in the error message.</param>
 <param name="Args">arguments to the method</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.FindUser(System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Same as OpenUser but does not throw error if the object is not found. It simply returns nothing. It will search the base objects and all children.
 </summary>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Thrown if object is not found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.FindUser(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Same as OpenUser but does not throw an error if the object is not found. It simply returns nothing. It will search the base object and all children
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.FindUser(System.DirectoryServices.DirectoryEntry,System.String,System.DirectoryServices.SearchScope)">
 <summary>
 Same as OpenUser but does not throw an error if the object is not found. It simply returns nothing.
 </summary>
 <param name="userName">Will check the SAMAccountName and CN properties to see if they match</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.FindUser(System.DirectoryServices.DirectoryEntry,System.String,System.DirectoryServices.SearchScope,System.Boolean)">
 <summary>
 Same as OpenUser but does not throw an error if the object is not found. It simply returns nothing.
 </summary>
 <param name="userName">It will check whether the value passed in here matches the SAMAccountName attribute or the CN attribute unless <paramref name="useAmbiguousNameResolution"/> is set to true.</param>
 <param name="useAmbiguousNameResolution">If true, it will use the Ambigouse Name Resolution filter. This will produce a match if the user name string is found in any of the various name attributes, such as CN, SamAccountName, UserPrincipalName, Name, etc. Beware that this will also search for substrings. Thus, it will return 'MyUser777' if the search string is 'MyUser7.'. Be sure to check the return value to make sure it is returning the user you want.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.UserCollection(System.DirectoryServices.DirectoryEntry,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function to obtain a collection of users that are children of the specified parentObject, such as an organizational unit
 </summary>
 <param name="parentObject">object that contains the users</param>
 <param name="context">Security context required to access individual user record. Pass <code>new codeExecutionContext</code> as an argument if the credentials inherited from the process are sufficient.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.GroupCollection(System.DirectoryServices.DirectoryEntry,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function to obtain a collection of groups that are children of the specified parentObject, such as an organizational unit
 </summary>
 <param name="parentObject">object that contains the users</param>
 <param name="context">Security context required to access individual user record. Pass <code>new codeExecutionContext</code> as an argument if the credentials inherited from the process are sufficient.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.MembersOf(System.DirectoryServices.DirectoryEntry,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Use this function to obtain a collection of users that are children of the specified parentObject, such as an organizational unit
 </summary>
 <param name="parentObject">object that contains the users</param>
 <param name="context">Security context required to access individual user record. Pass <code>new codeExecutionContext</code> as an argument if the credentials inherited from the process are sufficient.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.FindGroup(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Same as OpenGroup but does not throw an error if the object is not found. It simply returns nothing.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WebServiceObject">
 <summary>
 Returns the WebService Object of localhost which maps to IIS://localhost/W3SVC
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WebServiceObject(System.String)">
 <summary>
 Returns the WebService Object of hostname IIS://HostName/W3SVC
 </summary>
 <param name="hostName">Name of host computer</param>
 <exception cref="T:System.ArgumentException">Thrown if hostName is nothing or empty string</exception>
 <remarks>This function will attempt to bind to the object and fail if it cannot do so. The error that will be reported back depends on why the binding fails. Most likely, it will be a wrapped up AutomationException error.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WebServiceObject(System.String,System.String)">
 <summary>
 Returns the WebService Object of hostname IIS://HostName/W3SVC/webSiteID. The object will be validated before it is returned and an exception will be thrown it is not possible to bind to the object.
 </summary>
 <param name="hostName">Name of host computer</param>
 <param name="webSiteID">If this value is null or empty, it will be ignored</param>
 <exception cref="T:System.ArgumentException">Thrown if hostName is nothing or empty string</exception>
 <remarks>This function will attempt to bind to the object and fail if it cannot do so. The error that will be reported back depends on why the binding fails. Most likely, it will be a wrapped up AutomationException error.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WebServicePath(System.String,System.String)">
 <summary>
 Returns the path to the WebService object, such as "IIS://MyServer/W3SVC/1" To obtain the object itself, call <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.WebServiceObject"/> 
 </summary>
 <param name="hostName">Name of host computer</param>
 <param name="webSiteID">If this value is null or empty, it will be ignored</param>
 <exception cref="T:System.ArgumentException">Thrown if hostName is nothing or empty string</exception>
 <remarks>This function will attempt to bind to the object and fail if it cannot do so. The error that will be reported back depends on why the binding fails. Most likely, it will be a wrapped up AutomationException error.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ObjectsUseSameProvider(System.DirectoryServices.DirectoryEntry,System.DirectoryServices.DirectoryEntry)">
 <summary>
 Call this method to determine if both objects use the same provider (WinNT or LDAP)
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ObjectsUseSameProvider(System.String,System.String)">
 <summary>
 Call this method to determine if both objects use the same provider (WinNT or LDAP)
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.TranslateLdapToWinNTPath(System.String,System.String)">
 <summary>
 Use this function to obtain the WinNT path of an object. If the object is a WinNT object, its path property will be returned. If the object is an LDAP object, a translation will be attempted. For objects on the same domain or a domain with a trust relationship, call <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.GetWinNTPathFromSID(System.Security.Principal.SecurityIdentifier)"/>
 </summary>
<param name="objectType">Some objects need an object type in their path. Specify the object type, such as 'user' in this parameter.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.TranslateLdapToWinNTPath(System.String)">
 <summary>
 Use this function to obtain the WinNT path of an object. If the object is a WinNT object, its path property will be returned. If the object is an LDAP object, a translation will be attempted. For objects on the same domain or a domain with a trust relationship, call <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.GetWinNTPathFromSID(System.Security.Principal.SecurityIdentifier)"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.GetWinNTPathFromSID(System.Security.Principal.SecurityIdentifier)">
 <summary>
 Use this function to obtain the WinNT path of a user represented by the <paramref name="secID"/>
 </summary>
 <param name="secID">This is assumed to be a SecurityIdentifier for a user account. No checks are performed internally to validate it. If you pass in a SecurityIdentifier to anything but a user account, the path that is returned will be incorrect.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.TranslateSchemaGuid(System.Guid)">
 <summary>
 Call this function to obtain the friendly name for ObjectType Guids that are used to idendify to which objects security access rules apply. Some guids to not have LDapDisplayNames. In order to facilitate debugging access control issues, several guids without displaynames have been hard coded in this function to return a user friendly name.
 </summary>
 <param name="schemaGuid">The GUID used to identify ActiveDirectory schema objects.</param>
 <remarks>See http://www.microsoft.com/technet/scriptcenter/topics/security/allrights.mspx for partial list of guids that have no translation in the schema. These have been hard coded in this function so a friendly name can be provided.
 See http://www.microsoft.com/technet/scriptcenter/topics/security/propset.mspx for a list of property sets
 </remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.TranslateSchemaObjectNameToGuid(System.String)">
 <summary>
 Use this function to obtain the schema guid for active directory objects such as user, or group. 
 </summary>
 <param name="schemaObject">Name of the schema object, such as user, group, member.</param>
 <remarks>See http://www.microsoft.com/technet/scriptcenter/topics/security/allrights.mspx for partial list of guids that have no translation in the schema. These have been hard coded in this function so a friendly name can be provided.
 See http://www.microsoft.com/technet/scriptcenter/topics/security/propset.mspx for a list of property sets
 </remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectPropertiesToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)">
 <summary>
 Call this method if you would like to append additional information to this object. You will have to close the writer with one WriteEndElement and one WriteEndDocument above and beyond any items that you may add. These items will be added as a child of the ObjectInfo node
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectSecurityToXML(System.DirectoryServices.DirectoryEntry,System.String,System.Security.Principal.IdentityReference)">
 <summary>
 Use this method to persist access rights that for a given object and identifyReference combination to a file.
 </summary>
 <param name="activeDirectoryObject">Activedirectory object whose AccessRules will be persisted</param>
 <param name="fileName">Filename to which those rules should be written.</param>
 <param name="identityRef">If you pass in nothing, no filter will be applied. If zou pass in a valid <see cref="T:System.Security.Principal.IdentityReference"/>, only access rules that apply to said IdentifyReference will be logged.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectSecurityToXML(System.DirectoryServices.DirectoryEntry,System.Security.Principal.IdentityReference)">
 <summary>
 Use this method to write access rights that for a given object and identifyReference combination to a string variable in XML format.
 </summary>
 <param name="activeDirectoryObject">Activedirectory object whose AccessRules will be persisted</param>
 <param name="identityRef">If you pass in nothing, no filter will be applied. If zou pass in a valid <see cref="T:System.Security.Principal.IdentityReference"/>, only access rules that apply to said IdentifyReference will be logged.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectSecurityToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry,System.Security.Principal.IdentityReference)">
 <summary>
 Use this method to log access rights that for a given object and identifyReference combination to a <see cref="T:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter"/>. Use this overload if the access rules should be added to an existing log that is being built using the custom XML writer.
 </summary>
 <param name="myWriter">CustomXMLWriter that contains will hold the entries written out by this method.</param>
 <param name="activeDirectoryObject">Activedirectory object whose AccessRules will be persisted</param>
 <param name="identityRef">If you pass in nothing, no filter will be applied. If you pass in a valid <see cref="T:System.Security.Principal.IdentityReference"/>, only access rules that apply to said IdentifyReference will be logged.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectSecurityToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)">
 <summary>
 Use this method to log access rights that for a given object and identifyReference combination to a <see cref="T:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter"/>. Use this overload if the access rules should be added to an existing log that is being built using the custom XML writer.
 </summary>
 <param name="myWriter">CustomXMLWriter that contains will hold the entries written out by this method.</param>
 <param name="activeDirectoryObject">Activedirectory object whose AccessRules will be persisted</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.SchemaRoot">
 <summary>
 Returns the SchemaRoot DirectoryEntry which is used as a SearchRoot for directory searches for schema objects.
 </summary>
 <value></value>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.SchemaDNPath">
 <summary>
 Returns the LDAP path for the Schema Naming Context for an ActiveDirectory store.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.MaxPasswordAge">
 <summary>
 Returns the maximum password age as defined by the domain policy. If no value is found for the 'maxPwdAge' property, 0 is returned.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ParseInt64IntoHighLowWords(System.Int64)">
 <summary>
 Will split up the value the same way that it would come back  if we checked the get("maxPwdAge").Lowpart and .HighPart
 </summary>
 <param name="marshalledIadsLargeInteger">Value returned from DirectorySearch which has already been converted to an Int64 from the IAdsLargeInteger.LowPart and .HighPart</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ConvertLargeIADSIntegerToLong(System.Int64,System.Int64)">
 <summary>
 Call to convert the high and low part of an IADSLargeInteger to a long. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ParseInt64IntoHighLowWords(System.Int64)"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.ActiveDirectoryVersionIs2003OrHigher">
 <summary>
 Returns true if the domain is operating in a <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode"/> that is 2003 or higher
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.OrganizationalUnits">
 <summary>
 Use this to return the organizational units of the current domain
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.OrganizationalUnits(System.DirectoryServices.SearchScope)">
 <summary>
 Use this to return the organizational units of the current domain
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.OrganizationalUnits(System.DirectoryServices.SearchScope,System.Int32)">
 <summary>
 Use this to return the organizational units of the current domain
 </summary>
 <param name="scope">Indicates the search scope</param>
 <param name="pageLimit">Indicates how many records should be returned per page. Specify a value here if the total number of records you expect to find exceeds the SizeLimit set on the server.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Open(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this path if you have the complete LDAP path to the organizational unit
 </summary>
 <param name="exactPath">Correct LDAP path to required organizational unit</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Open(System.String,System.String)">
 <summary>
 Use this function if you have the root object and want to open an organizational unit somewhere within its child objects.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Open(System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function if you have the root object and want to open an organizational unit somewhere within its child objects.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.OrganizationalUnits(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this method to obtain a collection of organizational units. Domain Controllers will be filtered out automatically.
 </summary>
 <param name="rootPath">Specify the root path under which to search. If this parameter is an empty string, an argument exception will be raised.</param>
 <param name="context">Specify any custom credentials required to access the ActiveDirectory store. Pass in nothing if none are required.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.OrganizationalUnits(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.DirectoryServices.SearchScope,System.Int32)">
 <summary>
 Use this method to obtain a collection of organizational units. Domain Controllers will be filtered out automatically.
 </summary>
 <param name="rootPath">Specify the root path under which to search. If this parameter is an empty string, an argument exception will be raised.</param>
 <param name="context">Specify any custom credentials required to access the ActiveDirectory store. Pass in nothing if none are required.</param>
 <param name="pageSize">Indicates the number of records to return in a search. Pass in a value between 0 and 1000. Use 0 to use the default search behavior. Pass in the number of records per page if the search result is expected to be higher than what is allowed in the SizeLimit on the server.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Create(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this method to create a new organizational unit.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.ToStringBehavior">
 <summary>
 Use this property to indicate what the instances of the OrganizationalUnit class show return as their ToString behavior.
 When instances are created, they will cache the value of this property of the time of their creation. The behavior cannot be changed on an instance
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Street">
 <summary>
 Returns the Street attribute of the Organizational Unit
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.AddUser(System.String,System.String,System.String)">
 <summary>
 Use this function to add a user to the organizational unit. A <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException"/> will be thrown if the user already exists.
 </summary>
 <param name="userName">Name of user to be added</param>
 <param name="passWord">Password for user</param>
 <param name="userDescription">Description for user</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Users">
 <summary>
 This collection remains cached. It will be updated if you add a user through <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.AddUser(System.String,System.String,System.String)"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Groups">
 <summary>
 This collection remains cached. It will be updated if you add a user through <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.AddUser(System.String,System.String,System.String)"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.DeleteUser(System.String)">
 <summary>
 Call this function to delete a user contained within this organizational unit. If the user is not found, a <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException"> is raised.</see>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Delete">
 <summary>
 Call this method to delete an organizational unit
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Delete(System.Boolean)">
 <summary>
 Call this method to delete the organization unit and all its children
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.AddGroup(System.String,System.String)">
 <summary>
 Creates a group with specified name within this organizational unit
 </summary>
 <param name="groupName">Name of the group to generate within this organizational unit</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.FindUser(System.String)">
 <summary>
 Use this function to locate a user within an organizational unit. It will search within the OU and all its child objects
 </summary>
 <param name="userName"></param>
 <returns>valid user object. Nothing if the user is not found</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.FindUser(System.String,System.DirectoryServices.SearchScope)">
 <summary>
 Use this function to locate a user within an organizational unit. It will search within the OU and all its child objects
 </summary>
 <param name="userName">Name of the user to look for. Pass in the SamAccountName.</param>
 <returns>valid user object. Nothing if the user is not found</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.FindUser(System.String,System.DirectoryServices.SearchScope,System.Boolean)">
 <summary>
 Use this function to locate a user within an organizational unit. It will search within the OU and all its child objects
 </summary>
 <param name="userName">Name of the user to look for. Pass in the SamAccountName. If <paramref name="useAmbiguousNameResolution"/> is true, then all name related properties will be searched.</param>
 <param name="useAmbiguousNameResolution">If true, it will use the Ambigouse Name Resolution filter. This will produce a match if the user name string is found in any of the various name attributes, such as CN, SamAccountName, UserPrincipalName, Name, etc. Beware that this will also search for substrings. Thus, it will return 'MyUser777' if the search string is 'MyUser7.'. Be sure to check the return value to make sure it is returning the user you want.</param>
 <returns>valid user object. Nothing if the user is not found</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.Rename(System.String)">
 <summary>
 Call this method to rename an organizational unit.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.MoveTo(Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit)">
 <summary>
 Call this method to move an organization unit
 </summary>
 <param name="newParentOrgUnit"></param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.ProtectAgainstAccidentalDeletion">
 <summary>
 Use this property to enable 'Protect Against Accidental Deletion'. This translates to two ACL entries for Everyone being added or removed. The <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.CommitChanges"/> method needs to be called for the change to per persisted to ActiveDirectory.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.PathTree">
 <summary>
 Returns the complete path of an OU and all its parent OUs in an easy-to-read format.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.ValidateClassName(System.DirectoryServices.DirectoryEntry)">
 <summary>
 used by contructor to validate that the correct object was passed in
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.AppDomainContext`1">
 <summary>
 Use this class to create an instance of an object for execution in a separate App Domain.
 </summary>
 <typeparam name="T">The object in which you want to load in the new App Domain. This must inherit from MarshalByRefObject.</typeparam>
 <remarks>Ensure that you dispose of this class after you are done with the object loaded.  Any objects or parameters passed to and from
 the instantiated class must either inherit MarshalByRefObject or be Serializable.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.AppDomainContext`1.Value">
 <summary>
 The object instance in the isolated app domain.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.AppDomainContext`1.#ctor">
 <summary>
 Create a new App Domain using the current App Domain setup information.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.AppDomainContext`1.#ctor(System.AppDomainSetup)">
 <summary>
 Create a new App Domain using custom App Domain setup information.
 </summary>
 <param name="domainSettings">The <seealso cref="T:System.AppDomainSetup">application domain</seealso> setup information.</param>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ProcessStatus.Beginning">
 <summary>
 Use this value to flag the beginning of an automated process
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ProcessStatus.InProgress">
 <summary>
 Use this value to raise events that occur while an automated process is executing
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ProcessStatus.Completed">
 <summary>
 Use this value to flag the successful completion of an automated process.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ProcessStatus.Warning">
 <summary>
 Use this value to indicate that a condition occured that was unexpected during an automated process but that this condition was not serious enough to throw an exception
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.ProcessStatus.Failed">
 <summary>
 Use this value to indicate that an automated process has failed.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.AutomationProgressEventArgs">
 <summary>
 Use this class to raise event reporting the progress of automation events. The following sequence should be used when raising automation events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.AutomationProgressEventArgs.#ctor(System.String)">
 <summary>
 Use this constructor if you want to log out a simple progress message, such as 'Copying files...' or something to that extent.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.AutomationProgressEventArgs.#ctor(System.String,Blackbaud.AppFx.Platform.Automation.ProcessStatus)">
 <summary>
 Use this constructor to flag the beginning, successful completion, or failure of a process
 </summary>
 <param name="process">Name of the process, such as 'Creating Virtual Directory' or 'Restoring Database'</param>
 <param name="processStatus">Indicate whether the process is beginning, completed successfully, or failed.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.AutomationProgressEventArgs.Process">
 <summary>
 Names the process that is currently executing. Example are <c>Copying</c> or <c>Creating Virtual Directory</c>.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.AutomationProgressEventArgs.Message">
 <summary>
 Provides additinal context information about the process. For example, it may provide the file names during a copy process.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.AutomationProgressEventArgs.MessageImportance">
 <summary>
 Indicates whether the message if for informational purposes only and can be ignored or whether some action should be taken based on it
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.CloudLogging.CloudLogConfigSettings">
 <summary>
 Xml Serializable class for defining the web.config web health monitoring cloug logging provider settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CloudLogging.CloudLogDeployer.SendDeploymentNotification">
 <summary>
 Controls whether or not the cloud server is notified of the deployment
 </summary>
 <value></value>
 <returns></returns>
 <remarks>If true then the cloud logging server will be sent a message with information about the deployment.  Defaults to True.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CloudLogging.CloudLogDeployer.ValidateWebConfigPathIsInfinityApp">
 <summary>
 Controls whether or not the path to the web.config is checked to see if expected .dll files are in the \bin folder
 </summary>
 <value></value>
 <returns></returns>
 <remarks>If true then the the \bin folder beneath the web.config path will be checked for Blackbaud.AppFx.Server.dll and other expected assemblies.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CloudLogging.CloudLogDeployer.DeployToTarget(System.Boolean,System.Boolean)">
 <param name="validateLoggingServer">Set to true to make a web service call to validate accessibility to the cloud logging server before writing any entries to the web.config file or copying any DLLs</param>
 <param name="checkFileVersionBeforeCopying">Set to true to make sure a copy into the target bin folder is only made if the file does not exist, its version is lower than the current version, or, if the version is the same, the LastModified data is older than that of the source file</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CloudLogging.CloudLogDeployer.FileShouldBeCopied(System.String,System.String,System.Boolean)">
<summary>This code will determine whether a file should be copied. A file will be copied if either the file version of the source is greater or the modified date of the source is greater than the target.</summary>
<param name="checkFileVersion">If false, only the date will be compared. If true, the file version will be compared and the date will be compared</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.CloudLogging.CloudLogSqlSnapSettings">
 <summary>
 Xml Serializable class for defining the cloug logging provider settings.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext">
 <summary>
 Use this type to specify where code should be executed. Methods and classes take a this type as input can be executed both locally and remotely.
 </summary>
 <remarks>This class does not implement the ICredentials interface, as WMI does not support NetCredentials objects.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext.#ctor(System.String,System.String)">
 <summary>
 Use this contructor to supply credential for code that needs to connect to ActiveDirectory and requires a different user name and password
 </summary>
 <param name="userName"></param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext.ComputerName">
 <summary>
 Returns the name of the computer on which a method should be executed. The name will always be returned without the domain, even if the domain name is passed in as part of the computer name in one of the constructurs. If <c>localhost</c> or <c>.</c> or an IP address mapping to local host is passed in to the constructor, it will not be reflected here. This property will always return the name of the computer. Some security functions will not work properly on localhost, the IP address or .
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext.ResolvedComputerName">
 <summary>
 If a domain is specified, returns the computer name preceeded by the domain: myComain\myComputer
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext.IsLocal">
 <summary>
 Indicates whether the code execution context is localhost
 </summary>
 <returns>Returns <c>true</c> if the code is executed on localhost, <c>false</c> otherwise.</returns>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle">
 <summary>
 This class can be used with the <see cref="T:System.Threading.ThreadPool"/> to queue up more than 64 wait handles which is a limitation imposed by the standard call to <see cref="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.ProcessQueue(System.Int32)">
 <summary>
 Call this method to process <paramref name="maxNumberOfItemsToProcess"/> concurrently from all the items that have been added to the Queue. This call will block execution of the calling code until all items have finished processing. <see cref="P:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.MaxNumberOfConcurrentInstances"/> items will process concurrently on separate threads.
 </summary>
 <param name="maxNumberOfItemsToProcess">The maximum value for this property is 1000. By default, the number of available threads in the pool is around 1000. Depending on the processing required by the thread, anything over 50 is probably questionable.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.CreateInstance">
 <summary>
 Call this method to create an instance of the object and add it to the processing queue. Processing will start when <see cref="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.ProcessQueue(System.Int32)"/> is called.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.WaitAll">
 <summary>
 This method overcomes to 64 waithandle limit imposed by the framework. It keeps track of how many wait handles were created through <see cref="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.CreateInstance"/> and will not set the last waithandle that was created until all other waitHandles have finished processing, thus simulating a WaitAll for cases where more than 64 wait handles are required.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.InstanceID">
 <summary>
 <see cref="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.CreateInstance"/> assigns a unique ID to each wait handle
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.SupportObject">
 <summary>
 Set this to any object you want to pass around with the WaitHandle to you can reference it when the thread picks it off the queue and starts processing it.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.setLockObject">
 <summary>
 This method keeps track of the last WaitHandle added via <see cref="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.CreateInstance"/> and does not set it to signaled until all other waitHandles have been signaled.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.Process">
 <summary>
 This method needs to be overwritten in derived classes for any processing to occur. The derived class must call MyBase.Process before its own process implementation.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.ClearQueue">
 <summary>
 Call this method if order to remove items that were queued up by calling <see cref="M:Blackbaud.AppFx.Platform.Automation.CustomWaitHandle.CreateInstance"/>
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.FileComparison">
 <summary>
 This class exposes some file comparison functions
 </summary>
 <remarks></remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.FileComparison.FileComparisonResult">
 <summary>
 This structure is returned by the file comparison routines
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.FileComparison.FileComparisonResult.Succeeded">
 <summary>
 Returns true if the file comparison succeeded
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.FileComparison.FileComparisonResult.FilesAreOfDifferentLength">
 <summary>
 Returns true if the two files to be compared are of different length
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.FileComparison.FileComparisonResult.LocationOfFirstDifference">
 <summary>
 If the file comparison failed and the files are of equal length, use this property to determine at which location in an input stream the first difference occured.
 </summary>
 <returns>Location of first byte in input stream that is different between the two files</returns>
 <remarks>In order to locate the first byte you can use the following code <para><code><c>     </c>Using fsInput As New System.IO.FileStream(IO.FileMode.Open, IO.FileAccess.Read)<para>     fsInput.Seek(LocationOfFirstDifference,IO.SeekOrigin.Begin)</para>end using</code></para></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.FileComparison.CompareBinaryFiles(System.String,System.String)">
 <summary>
 Reads through both files one byte at a time and returns false if the bytes do not match.
 </summary>
 <param name="file1">Valid path to a file</param>
 <param name="file2">Valid path to a file</param>
 <exception cref="T:System.ArgumentException">Thrown if either of the input file parameters is empty or if the file does not exist.</exception>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.FolderCompare">
 <summary>
 This class will compare two folders and provide a list of files that is in the source folder but not in the target folder
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.FolderCompare.#ctor(System.String,System.String,System.IO.SearchOption,System.String)">
 <param name="sourceFolder">Source folder to check</param>
 <param name="targetFolder">Target folder to check</param>
 <param name="searchOption">Indicate whether to search sub folders or only top level folder</param>
 <param name="wildCardFilter">Specify a valid wild card filter. The default filter is *.*. </param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.FolderCompare.FilesInSourceButNotInTarget">
 <summary>
 Returns a list of files that is contained in the Source folder specified in the constructor, but not in the target folder
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.FolderCompare.FilesInTargetButNotInSource">
 <summary>
 Returns a list of files that is contained in the target folder specified in the constructor, but not in the source folder folder
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.FolderCompare.AddFileToExclusionList(System.String)">
 <summary>
 If files containing a certain string should be excluded from the list and cannot easily be filtered out with a wildcard filter, add them here.
 </summary>
 <param name="filterNameFilter">Value to be exluded. The code will perform an Instr to see if the source file name contains this string. The comparison will only be performed on the file name, not the file name and the path. Thus, if you specify 'Robocopy', any file name containing the string robocopy would be excluded.</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.HostFile">
 <summary>
 Use this class to open up a Hosts file on local host or a remote server. It provides a collection to iterate over entries or add/remove entries
 As the class writes out the changed entries, it will attempt to line up IPAddress HostName columns and the original spaces between the two entries 
 are not guaranteed to be preserved. The only requirement for a valid host file is at least 1 space. Trailing comments are always separated by 10 characters
 from the last letter of the Hostname, regardless of their original position
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.Save">
 <summary>
 Save any changes to the host file entries back to the original file.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.Save(System.String)">
 <summary>
 Save any changes to the host file entries to the file name specified in <paramref name="fileNameAndPath"/>. If you save a copy, the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.HostFileInfo"/> will not be updated to point to the new location.
 </summary>
 <param name="fileNameAndPath">The file name will be interpreted literally. If you opened the host file on a remote machine, it will not not translate the path to a remote location automatically. You have to pass in the exact file name and path.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.Save(System.String,System.Boolean,System.Boolean)">
 <summary>
 Save any changes to the host file entries to the file name specified in <paramref name="fileNameAndPath"/>.  If you save a copy, the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.HostFileInfo"/> will not be updated to point to the new location.
 </summary>
 <param name="fileNameAndPath">The file name will be interpreted literally. If you opened the host file on a remote machine, it will not not translate the path to a remote location automatically. You have to pass in the exact file name and path. If you pass in blank, it will save the changes back to the original file name.</param>
 <param name="ignoreBlanks">If true, blank lines will not be persisted</param>
 <param name="ignoreComments">If true, lines with comments will not be persisted.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.HostFileInfo">
 <summary>
 You can set this property to a custom location if the host file is not located in standard directory. No validation will be performed on the file that you pass in.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.FlushDNS">
 <summary>
 Call this method to flush the DNS on the computer where the host file was opened. This will invoke ipconfig /flushdns
 </summary>
 <returns>true if the exit code returned by Ipconfig is 0, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.Ping(Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry)">
 <summary>
 Call this function to see if pinging the host entry returns the IP specified in the host file on the server on which the host file was opened. This will invoke ping under the hood (instead of an API call), so it can be run on a remote machine more easily. This call requires access to the root share on a remote server.
 </summary>
 <returns>False if the exit code of the ping command is non-zero or if the address could not be reached.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFile.PingResult">
 <summary>
 Returns the captured output of the ping command
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection">
 <summary>
 This class adds one to its internal collection of <see cref="T:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry"/> value for each line found in a host file. Note that the equivalance of <see cref="T:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry"/> is based on content and not reference. Thus <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection.Contains(System.String)"/> will return true for an item of type <see cref="T:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry"/> if an item with the same IP/Host Name combination exists in the collection.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection.ToString">
 <summary>
 This function returns the complete text of the host file with all the entries.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection.IndexOf(System.String)">
 <summary>
 You can find an item based on its IP address or its host name
 </summary>
 <param name="key">You may pass in the IP address or the host name. </param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection.Item(System.String)">
 <summary>
 Specify the IP Address or the Host name of the object to locate in this collection
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection.Contains(System.String)">
 <summary>
 Specify the IP Address or the Host name of the object to locate in this collection
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntryCollection.Remove(System.String)">
 <summary>
 Specify the IP Address or the Host name of the object to locate in this collection
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry">
 <summary>
 Use this class to parse an entry from a hosts file.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.#ctor(System.String)">
 <summary>
 Use this constructor when supplying a line that has the following format IPAddress HostName. It should be formatted the same way that a line in a hosts file is formatted.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.#ctor(System.String,System.String)">
 <summary>
 Use this constructor to add a new entry to a hosts file
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.#ctor(System.String,System.String,System.String)">
 <summary>
 Use this constructor to add a new entry to a hosts file
 </summary>
<param name="trailingComment">A trailing comment will be appended to the line after the host entry column with # Comment. If the value of this parameter does not start with #, the comment character will be added automatically.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.IsComment">
 <summary>
 Returns true if the entire line is a comment and starts with a #
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.Comment">
 <summary>
 Returns the entire line if the line starts with #. If the line contains a trailing comment but is a valid entry otherwise, it contains the trailing comment
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.ToString">
 <summary>
 Returns the representation expected by the Hosts file
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.SpacesBetweenValues">
 <summary>
 Use to indicate how many spaces to put between the IP address and the host name. This will be set for each entry as the collection is saved out. This is only an approximation. Depending on the number of changes to the collection, the columns may not be perfectly aligned.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.Equals(System.Object)">
 <summary>
 This object is evaluated for content equivalence, not reference equivalance. Use <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> to check for reference equivalence. An object is considered equal, if the IP / Host name pair evaluate to the same value.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.Equals(Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry)">
 <summary>
 This object is evaluated for content equivalence, not reference equivalance. Use <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> to check for reference equivalence. An object is considered equal, if the IP / Host name pair evaluate to the same value.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry.Equals(Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry,Blackbaud.AppFx.Platform.Automation.IIS.HostFileEntry)">
 <summary>
 This object is evaluated for content equivalence, not reference equivalance. Use <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> to check for reference equivalence. An object is considered equal, if the IP / Host name pair evaluate to the same value.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser">
 <summary>
 This class wraps up the HttpRedirect property which can be set on IIsWebFile, IIsWebDirectory, and IIsWebVirtualDirectory
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser.#ctor(System.String)">
 <summary>
 Use this constructor if you want to parse out an existing httpRedirect request
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser.Destination">
 <summary>
 Use this property to obtain the URL portion of a redirect string. This may be an absolute URL, or use a format that includes variables and wildcards. Check http://msdn.microsoft.com/en-us/library/ms525695.aspx for details. Do not include any of the flags here.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser.ExactDestination">
 <summary>
 Indicates that the value provided for Destination should be considered an absolute target location
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser.ChildOnly">
 <summary>
Alerts IIS that redirection should occur only once because the destination is in a subdirectory of the original URL. This flag avoids loops. Also, this flag instructs IIS only to redirect requests if they are to subfolders or files of the original URL
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser.Permanent">
 <summary>
 Indicates whether this is a permenent or a temporary redirection for a resource. 
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.HttpRedirectParser.ToString">
 <summary>
 Returns the HttpRedirect string as it is expected by the ActiveDirectory object when setting its HttpRedirect property
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.CPUActionType">
 <summary>
 Use this enumerated type in <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.CPUAction"></see>
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.CPUActionType.No_Action">
 <summary>
 No action is taken except that a warning is written to the event log when the CPU limit is exceeded.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.CPUActionType.Shutdown">
 <summary>
 Application pool worker processes that exceed their CPU limit will be forced to shut down.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.CPUActionType.Trace">
 <summary>
 Enables capacity tracing for the application pool when 80%of the CPU limit is reached.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.AppPoolCommands">
 <summary>
 return value used in <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolCommand"></see>
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.AppPoolStates">
 <summary>
 return value used in <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolState"></see>
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.LogEventOnRecyleFlags.DefaultValue">
 <summary>
 AppPoolRecycleTime | AppPoolRecycleMemory | AppPoolRecyclePrivateMemory
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.LogEventOnRecyleFlags.AppPoolRecycleMemory">
 <summary>
 Setting this flag to true causes IIS to log the event (the worker processis recycled once a specified amount of used or virtual memory memory, expressed in megabytes, is in use).
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.LogEventOnRecyleFlags.AppPoolRecyclePrivateMemory">
 <summary>
 Setting this flag to true causes IIS to log the event (the worker process is recycled when private memory reaches a specified amount).
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.LogEventOnRecyleFlags.AppPoolRecycleRequests">
 <summary>
Setting this flag to true causes IIS to log the event (the worker process is recycled after a specified number of requests). 
</summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.LogEventOnRecyleFlags.AppPoolRecycleSchedule">
 <summary>
 Setting this flag to true causes IIS to log the event ( the worker process is recycled at specified times).
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.LogEventOnRecyleFlags.AppPoolRecycleTime">
 <summary>
 Setting this flag to true causes IIS to log the event (the worker process is recycled after a specified elapsed time).
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool">
 <summary>
 Use this class to create Application Pools in IIS. It is possible to create pools with default values or to create pools based on the values specified in other application pools which already exist on the server. The class is a thin wrapper on top of the <see cref="T:System.DirectoryServices.DirectoryEntry"></see> object. All property default values and descriptions are taken from the MSDN documentation.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.#ctor">
 <summary>
 Use this constructor only to create template objects. You will not be able to save the object to the ActiveDirectory store
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.#ctor(System.String)">
 <summary>
 Use this constructor to access or create an application pool on localhost
 </summary>
<param name="appPoolname">Name of application pool</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.#ctor(System.String,System.String)">
<summary>
 Use this constructor to create or access an application pool on localhost or a remote machine
</summary>
<param name="appPoolname">Name of application pool</param>
<param name="computerName">Computer on which the application pool should be created or accessed. If you pass in an empty string, localhost is assumed.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.#ctor(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
<summary>
Use this constructor to create or access an application pool on localhost or a remote machine. It allows you to pass in username and password information to access a remote machine.
</summary>
<param name="appPoolname">Name of application pool</param>
<param name="executionContext"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"></see> Specify the host and optionally a user name and password in order to access the remote host.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Create">
 <summary>
 Call this method to create a new application pool
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Create(System.String,System.Boolean)">
 <summary>
 Call this method to create a new application pool based on the settings of an existing application pool. If you pass in a template, any property that has not been set explicitly in this class will inherits its value from the template. Save is implied here. It does not need to be called explicitly. Only properties that were explicitly set before this call will be applied to this object. Default values returned by properties before an object is loaded are for informational purposes only and will not be explicitly set. We always accept the defaults used by IIS unless we explicitly override them.
 </summary>
 <param name="appPoolTemplate">Specify the name of the template. Pass in <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.DefaultApplicationPoolName"></see> to use the DefaultApplication pool as a template. Pass in string.empty if you do not want to use a template.</param>
 <param name="applyTemplateToExistingDirectoryentry">This property is ignored if <paramref name="appPoolTemplate"></paramref> in an empty string. If it is not, then a value of true indicates that the property values retrieved from the template will be applied to both new and existing virtual directories. If false, they will only be applied to new virtual directories.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Create(Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool,System.Boolean,System.Boolean)">
 <summary>
 Call this method to create a new application pool based on the settings of an existing application pool. Use <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Deserialize(System.String)"></see> to create a template object from a stored XML file."
 </summary>
 <param name="appPoolTemplateObject">Pass in <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Deserialize(System.String)"></see> to create a new object based on a template stored offline as XML. If you pass in nothing, this parameter will be ignored.</param>
 <param name="applyTemplateToExistingDirectoryentry">This property is ignored if <paramref name="appPoolTemplate"></paramref> in an empty string. If it is not, then a value of true indicates that the property values retrieved from the template will be applied to both new and existing virtual directories. If false, they will only be applied to new virtual directories.</param>
 <param name="overWrite">If true, the existing application pool will be re-used and any changes in property values will be applied to it. The pool will not be deleted, as this may cause problems if it is associated with virtual directories.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.NativeObject">
 <summary>
 Returns the underlying ActiveDirectory object that this class wraps up.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Recycle">
 <summary>
 Call this method to recycle an application pool.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Save">
 <summary>
 Call to commit changes to ActiveDirectory store. You do not need to call this method after you call <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Create"></see> unless you changed any property values after calling Create.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Start">
 <summary>
 Call this method in order to start an application pool. An exception will be thrown if the object does not exist.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Start(System.Boolean)">
 <summary>
 Call this method in order to start an application pool. An exception will be thrown if the object does not exist.
 </summary>
 <param name="force">Set to true if the value of the application pool state should be refreshed from the object</param>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Stop">
 <summary>
 Call this method to stop an application pool.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Stop(System.Boolean)">
 <summary>
 Call this method to stop an application pool.
 </summary>
 <param name="force">Set to true if the value of the application pool state should be refreshed from the object</param>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Exists">
 <summary>
 Call to check whether an application pool exists on the web server
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Delete">
 <summary>
 Call to remove an application pool. Be sure to do this only if web applications do not depend on it. If you have any applications in the pool or if the object does not exist yet, this method wil fail. 
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you call this method on an object that does not exist yet.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Serialize(System.String)">
 <summary>
 Call this method to serialize the values of the properties of this object to a file. The object does not have to exist in the ActiveDirectory store for this method to succeed.
 </summary>
 <param name="fileName">File name to sae properties to</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Serialize">
 <summary>
 Call this method to serialize the values of the properties of this object to XML. The object does not have to exist in the ActiveDirectory store for this method to succeed.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Serialize(System.String,System.Boolean)">
 <summary>
 Call this method to serialize the Native ActiveDirectory object underlying this class to the file format produced by <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectPropertiesToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)"/> This will also serialize the applications that are part of this pool
 </summary>
 <param name="fileName">File name to sae properties to</param>
 <param name="serializeNativeObject">Will call <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectPropertiesToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)"/> instead of using XML Serialization. This method will also include all the Applications in a pool</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Serialize(System.Boolean)">
 <summary>
 Call this method to serialize the Native ActiveDirectory object underlying this class to the file format produced by <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectPropertiesToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)"/> This will also serialize the applications that are part of this pool
 </summary>
 <param name="serializeNativeObject">Will call <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectPropertiesToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)"/> instead of using XML Serialization. This method will also include all the Applications in a pool</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppsInPool">
 <summary>
 Returns a readonly collection of strings pointing to the applications in the pool in the form of a partial LDAP path that points to the application root
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.ADSIPath">
 <summary>
 returns the ADSI Path of the application pool object.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Name">
 <summary>
 Returns the name of the application pool
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PeriodicRestartTime">
 <summary>
 The PeriodicRestartTime property specifies the period of time, in minutes, after which IIS rotates an isolated OOP application. Setting the value of this property to 0 disables the property. The maximum supported value for this property is 71,582. This property is listed on the Recycling tab of the IIS manager under 'Recycle worker processes (in minutes)'.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PeriodicRestartRequests">
 <summary>
The PeriodicRestartRequests property indicates the number of requests the OOP application should process, after which it is recycled. This property is listed on the Recycling tab of the IIS manager under 'Recycle worker process (number of requests)'
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.MaxProcesses">
 <summary>
 The MaxProcesses property determines the maximum number of worker processes an application pool allows to service requests for an application pool.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PingingEnabled">
 <summary>
 The PingingEnabled property specifies whether the World Wide Web Publishing Service (WWW Service) should periodically monitor the health of a worker process. Setting the value of this property to true indicates to the WWW service to monitor the worker processes to ensure that they are running and healthy.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.IdleTimeout">
 <summary>
 The IdleTimeout property specifies how long (in minutes) a worker process should run idle if no new requests are received and the worker process is not processing requests. After the allotted time passes, the worker process should request to be shut down by the World Wide Web Publishing Service (WWW Service). This property is listed on the Performance tab of IIS Manager as 'Idle Timeout'
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.RapidFailProtection">
 <summary>
 Setting the RapidFailProtection property to true instructs the World Wide Web Publishing Service (WWW service) to put all applications in an application pool out of service if the number of worker process crashes has reached the maximum specified by the RapidFailProtectionMaxCrashes Metabase Property, within the number of minutes specified by the RapidFailProtectionInterval Metabase Property.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.SmpAffinitized">
 <summary>
 Setting the SMPAffinitized property to true indicates that a particular worker process assigned to an application pool should be assigned to a given CPU. This property is used in conjunction with the SMPProcessorAffinityMask Metabase Property to configure a particular processor a worker process will be assigned to.
 </summary>
 <value></value>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.SmpProcessorAffinityMask">
 <summary>
 The SMPProcessorAffinityMask property configures the hexadecimal processor mask. The hexadecimal processor mask indicates to which CPU the worker processes in an application pool should be bound. Before this property takes affect, the SMPAffinitized Metabase Property must be set to true for the application pool. Do not set this property to zero. Doing so causes no SMP affinity to be configured, creating an error condition
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.StartupTimeLimit">
 <summary>
 The value of the StartupTimeLimit property specifies the amount of time (in seconds) that the World Wide Web Publishing Service (WWW Service) should wait for a worker process to finish starting up and reporting to the WWW Service.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.ShutdownTimeLimit">
 <summary>
 The ShutdownTimeLimit property specifies the amount of time (in seconds) after a recycle threshold has been reached that IIS waits for all old requests to finish running in a worker process before terminating the worker process.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PingInterval">
 <summary>
 The PingInterval property specifies the period of time (in seconds) between health-monitoring pings that the World Wide Web Publishing Service (WWW Service) sends to a worker process.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PingResponseTime">
 <summary>
 The PingResponseTime property specifies the amount of time (in seconds) that a worker process is given to respond to a health monitoring ping. After the time limit is exceeded, the World Wide Web Publishing Service (WWW Service) terminates the worker process.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.DisallowOverlappingRotation">
 <summary>
 The DisallowOverlappingRotation property specifies whether or not the World Wide Web Publishing Service (WWW Service) should start up another worker process to replace the existing worker process while it is shutting down. The value of this property should be set to true if the worker process loads any application code that does not support multi-instance.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.DisallowRotationOnConfigChange">
 <summary>
 The DisallowRotationOnConfigChange property specifies whether or not the World Wide Web Publishing Service (WWW Service) should rotate worker processes in an application pool when the configuration has changed. This means that the worker processes will not pick up application pool changes to values passed to the worker process, such as IdleTimeout Metabase Property and PeriodicRestartRequests Metabase Property. The value of DisallowRotationOnConfigChange should be set to true if the worker process loads any application code that does not support multi-instance.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.OrphanWorkerProcess">
 <summary>
 The OrphanWorkerProcess property, when set to true, notifies the World Wide Web Publishing Service (WWW Service) not to terminate a worker process that fails to respond to pings, but to instead orphan the worker process in the application pool if the worker process suffers fatal errors.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolQueueLength">
 <summary>
 The AppPoolQueueLength property indicates to the Universal Listener how many requests to queue up for an application pool before rejecting future requests. When the limit for this property is exceeded, IIS rejects the additional requests with a 503 error. For Windows Server 2003 with Service Pack 1 (SP1), the default value of this property has changed from 4000 to 1000. If you had IIS 6.0 installed before applying SP1 to your server, the value will not be changed; however, you should consider lowering the value for performance reasons. This property is listed in IIS Manager on the Performance Tab under 'Request Queue Limit'.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.CPUAction">
 <summary>
 The CPUAction property configures the action(s) that IIS takes when Microsoft Windows NT job objects run. Only one Windows NT job object exists per application pool, therefore the CPUAction property is configured on a per application pool basis.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.CPULimit">
 <summary>
 The CPULimit property configures the maximum percentage of CPU time (in 1/1000ths of a percent) that the worker processes in an application pool are allowed to consume over a period of time as indicated by the CPUResetInterval Metabase Property property. If the limit set by the CPULimit property is exceeded, an event is written to the event log and an optional set of events can be triggered as determined by the CPUAction Metabase Property property. Setting the value of this property to 0 disables limiting the worker processes to a percentage of CPU time.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.CPUResetInterval">
 <summary>
 The CPUResetInterval property specifies the reset period (in minutes) for CPU monitoring and throttling limits on the application pool. When the number of minutes elapsed since the last process accounting reset equals the number specified by this property, IIS will reset the CPU timers for both the logging and limit intervals. Setting the value of this property to 0 disables CPU monitoring.
 The value in CpuResetInterval must be greater than the time between logging operations, otherwise IIS will reset counters before logging has occurred, and process accounting will not occur.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolIdentityType">
 <summary>
 The AppPoolIdentityType property allows application pools to run as LocalSystem, LocalService, NetworkService, or a specific user account.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.WamUserName">
 <summary>
 The WAMUserName property specifies the account user name that IIS uses by default as the COM+ application identity for newly created IIS out-of-process applications. The values of this property and its companion property, WAMUserPass, are set when IIS is installed, and match the user name and password values in the Microsoft Windows user account, which is established at the same time. Changing the value of this property is not recommended. If you do, change it to a valid Windows user account, and change WAMUserPass to the corresponding password for the new account.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.WamUserPass">
 <summary>
 The WAMUserPass property specifies the password for the account that IIS uses by default as the COM+ application identity for newly created IIS out-of-process applications. The values of this property and its companion property, WAMUserName, are set when IIS is installed, and match the password and user name values in the Microsoft Windows user account (IWAM_ MachineName, where MachineName is the name of the machine on which IIS is installed) established at the same time.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.LogonMethod">
 <summary>
 The LogonMethod property contains an integer that specifies the logon method for cleartext logons
 </summary>
 <value></value>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PeriodicRestartMemory">
 <summary>
The PeriodicRestartMemory property specifies the amount of virtual memory (in KB) that a worker process can use before the worker process recycles. The maximum value supported for this property is 4,294,967 KB. This property is listed on the Recycling tab of the IIS manager under 'Maximum virtual memory'.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PeriodicRestartPrivateMemory">
 <summary>
The PeriodicRestartPrivateMemory property specifies the amount of private memory (in KB) that a worker process can use before the worker process recycles. The maximum value supported for this property is 4,294,967 KB. This property is listed on the Recycling tab of the IIS manager under 'Maximum used memory'.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolCommand">
 <summary>
 The AppPoolCommand property allows an application to send commands to the application pool to start or stop the application pool. Applications can read the value of the AppPoolState Metabase Property to determine if the application pool has responded to the command issued by the use of this property.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolState">
 <summary>
 The AppPoolState property value is used by applications to determine the state of an application pool. Because this property is internally configured by IIS, it is read-only.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AppPoolAutoStart">
 <summary>
 The AppPoolAutoStart property indicates to the World Wide Web Publishing Service (WWW service) to automatically start an application pool when the application pool is created or when IIS is started, if the value of this property is set to true.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.PeriodicRestartSchedule">
 <summary>
 This property property specifies the time (in 24 hour format) that the application will be rotated. Each time is in local time and is specified in the following format: hh:mm. This property is listed on the Recycling tab of the IIS manager under 'Recycle worker process at the following times'
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.RapidFailProtectionInterval">
 <summary>
 The RapidFailProtectionInterval property specifies the number of minutes before the failure count for a process is reset.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.RapidFailProtectionMaxCrashes">
 <summary>
 The RapidFailProtectionMaxCrashes property specifies the maximum number of failures allowed within the number of minutes specified by the RapidFailProtectionInterval Metabase Property. See RapidFailProtection 
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Win32Error">
 <summary>
 The Win32Error property indicates the Microsoft Win32 error status code.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.OrphanActionExe">
 <summary>
 Specifies an exzecutable to run when the WWWW service orphans a worker process.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.OrphanActionParams">
 <summary>
 The OrphanActionParams property specifies command-line parameters for the executable specified by the OrphanActionExe Metabase Property. To specify the process ID of the orphaned process, use %1%.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.LoadBalancerCapabilities">
 <summary>
 The LoadBalancerCapabilities property specifies behavior when a service is unavailable. A setting of 1 terminates the connection. A setting of 2 sends error code 503.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AutoShutdownAppPoolExe">
 <summary>
 The AutoShutdownAppPoolExe property specifies an executable to run when the World Wide Web Publishing Service (WWW service) shuts down an application pool for rapid fail protection. You can use the AutoShutdownAppPoolParams property to send parameters to the executable.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.AutoShutdownAppPoolParams">
 <summary>
 The AutoShutdownAppPoolParams property specifies any command-line parameters for the executable that is specified in the AutoShutdownAppPoolExe Metabase Property. You can use these two properties in the following way to send e-mail, for example, when the World Wide Web Publishing Service (WWW service) shuts down an application pool for rapid fail protection:
 </summary>
 <example>AutoShutdownAppPoolExe = "C:\LogAndSendMail.bat" AutoShutdownAppPoolParams = "-AppPoolName %1%" where %1% represents the application pool name.</example>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.LogEventOnRecycle">
 <summary>
 The LogEventOnRecycle property specifies that IIS should log an event when an application pool is recycled. Application pools recycle for a variety of reasons. In order for IIS to log the event, the LogEventOnRecycle property must have a bit set corresponding to the reason for the recycle. For more information on how to set up events, see http://support.microsoft.com/kb/332088
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.ManagedRuntimeVersion">
 <summary>
 The ManagedRuntimeVersion property configures the application pool to load a specific version of the .NET Framework.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.ManagedPipelineMode">
 <summary>
 The ManagedPipelineMode property configures ASP.NET to run in Classic Mode as an ISAPI extension, or in Integrated Mode where managed code is integrated into the request processing pipeline.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Deserialize(System.String,System.String)">
 <summary>
 Call this function to deserialize an applicationpool object that has been persisted to a file or to XML.
 </summary>
 <param name="fileNameOrXML">Pass in a file name or an XML string</param>
 <param name="applicationPoolName">Specify name of application pool once it is deserialized. The name parameter has no significane until you call a method that will persist the object to IIS.</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPoolCollection">
 <summary>
 Use this read-only collection to loop through existing application pools
 </summary>
 <remarks></remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType">
 <summary>
 These values corresponds to the IIS Scheam objects. Only a subset of values is listed here. The ToString of the enum's value must correspond to the schema name.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType.IIsWebVirtualDir">
 <summary>
 Use this type of virtual directories (main entry points)
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType.IIsWebDirectory">
 <summary>
 Use this type to set properties on folders located within virtual directories
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType.IIsWebFile">
 <summary>
 Use this type to set properties on individual files located within virtual directories
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType.IIsWebServer">
 <summary>
 Use this type to set properties on Web Servers (IISWebServer object in metabase)
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.IISDirBrowseFlags">
 <summary>
 These flags apply to IISWebService, IISWebServer, IISWebVirtualDir, IISWebDirectory
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues">
 <summary>
 These values can either be set by using Properties(authflagValues.Value.ToString) or they can be set as a bit mask in the AuthFlags field
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues.AuthAnonymous">
 <summary>
 Specifies Anonymous authentication as one of the possible Windows authenticationschemes returned to clients as being available
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues.AuthBasic">
 <summary>
 Specifies Basic authentication as one of the possible Windows authenticationschemes returned to clients as being available.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues.AuthNTLM">
 <summary>
 Specifies Integrated Windows authentication (also known as Challenge/Response or NTLMauthentication) as one of the possible Windows authentication schemes returned to clients as being available.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues.AuthMD5">
 <summary>
 Specifies Digest authentication and Advanced Digest authentication as one of the possible Windows authentication schemes returned to clients as being available
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues.AuthPassport">
 <summary>
 Specifies Digest authentication and Advanced Digest authentication as one of the possible Windows authentication schemes returned to clients as being available
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.NoSSLPermissionsSet">
 <summary>
 Setting this flag is tantamount to unchecking 'Require Secure Channel (SSL) in InetMgr
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.AccessSSL">
 <summary>
 If set, this flag means that file access requires SSL file permission processing, with or without a client certificate. This is tantamount to checking the 'Require Secure Channel (SSL) checkbox but not the 'Require 128-bit encryption' checkbox in InetMgr.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.AccessSSL128">
 <summary>
If set, this flag means that file access requires SSL file permission processing with a minimum key size of 128 bits, with or without a client certificate.  When you set this flag, you must also set <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.AccessSSL"/>
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.AccessSSLMapCert">
 <summary>
 A value of true indicates that file access requires SSL file permission processing with a minimum key size of 128 bits, with or without a client certificate. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.AccessSSLNegotiateCert">
 <summary>
 A value of true indicates that SSL file access processing requests a certificate from the client. A value of false indicates that access continues if the client does not have a certificate. Some versions of Internet Explorer will close the connection if the server requests a certificate and a certificate is not available (even if AccessSSLRequireCert is also set to true). 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessSSLValues.AccessSSLRequireCert">
 <summary>
 A value of true indicates that SSL file access processing requests a certificate from the client. If the client provides no certificate, the connection is closed. AccessSSLNegotiateCert must also be set to true when using AccessSSLRequireCert
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AppIsolatedType.InProcess">
 <summary>
 Application runs in Process.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AppIsolatedType.OutOfProcess">
 <summary>
 Application runs out of Process.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AppIsolatedType.PooledProcess">
 <summary>
 Application runs in pooled Process
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspExecuteInMTAType.NotInMTA">
 <summary>
 Application does not execute in MTA
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspExecuteInMTAType.InMTA">
 <summary>
 Application executes in MTA
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspKeepSessionIDSecureType.Disabled">
 <summary>
 SessionID is not sent as a secure cookie if assigned over a secure channel
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspKeepSessionIDSecureType.Enabled">
 <summary>
 ensures that a SessionID is sent as a secure cookie if assigned over a secure channel
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.AccessFlagValues">
 <summary>
 The AccessFlags property contains flags for configuring file access permissions, which are defined in the Flags section. The last four flags augment the first four flags in that they relate to access granted to remote computers. You can enable local access without remote access, but you cannot enable remote access without local access. See http://msdn.microsoft.com/en-us/library/ms524578.aspx#configdefault for a complete description.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessFlagValues.AccessExecute">
 <summary>
 A value of true indicates that the file or the contents of the folder may be executed, regardless of file type. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessFlagValues.AccessNoPhysicalDir">
 <summary>
 A value of true indicates that access to the physical path is not allowed
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessFlagValues.DefaultValue">
 <summary>
 The internal Default is AccessRead and AccessScript
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspAppServiceFlagValues.AspEnableTracker">
 <summary>
 A value of true enables COM+ tracker, which allows administrators or developers to debug ASP applications. For more information, see the COM+ Software Developer Kit (SDK) and see Configuring Applications to Use COM+ Services in the Help that comes with IIS Manager. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspAppServiceFlagValues.AspEnableSxs">
 <summary>
 A value of true enables COM+ side-by-side assemblies, which allow ASP applications to specify which version of a system DLL or classic COM component to use, such as MDAC, MFS, MSVCRT, MSXML, and so on. For more information, see the COM+ Software Developer Kit (SDK) and see Configuring Applications to Use COM+ Services in the Help that comes with IIS Manager
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.AspAppServiceFlagValues.AspUsePartition">
 <summary>
 A value of true enables COM+ partitioning, which can be used to isolate Web applications into their own COM+ partitions. COM+ partitions can hold different versions of your own custom COM components. If you set this flag, also set the AspPartitionID metabase property. For more information, see Configuring Applications to Use COM+ Services in the Help that comes with IIS Manager
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.PasswordChangeFlagValues">
 <summary>
 The PasswordChangeFlags property contains flags, as seen in the Flags section, that control password expiration and password change processing between the server and client. A value of 0, which is the default, indicates that an SSL connection is required, 1 indicates that changing is allowed on nonsecure ports, 2 indicates that changing is disabled, and 4 indicates that password expiration notification is disabled
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.Common.AspUnlimitedValue">
 <summary>
 The metabase represents unlimited as the DWORD value of 4294967295.This is usually passed in for timeout values to indicate no timeout.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.GetAppPool(System.String,System.String,System.String)">
 <summary>
 Returns the application pool a virtual directory belongs to.
 </summary>
<param name="machineName">Host on which virtual directory is located.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.GetAppPool(System.String)">
 <summary>
 Returns the application pool a virtual directory belongs to.
 </summary>
 <param name="ADSIpath">Active Directory path to the virtual directory</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet(System.String,Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities)">
 <summary>
 Use this method to install scriptmaps recursively at the specified path (AspNet_RegIIS.exe -s Path). The most recent installed version of ASP.Net will be used. IMPORTANT: Registering scriptmaps will cause the W3SVC service on the web server to restart. Do not use this call on a web server that is in use and should not be retarted./>
 </summary>
 <param name="virtualDirPath">Pass in the path to the virtual directory, such as /W3SVC/1/ROOT/VirtualDirName</param>
 <param name="WmiInstance">Pass in a WmiInstance if you want to run this call on a remote machine.</param>
 <remarks>This call will issue <see cref="T:System.Diagnostics.Trace"/> trace statements. If you need to log these values, hook up a trace listener before issuing this call.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet(System.String,Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Use this method to install scriptmaps recursively at the specified path (AspNet_RegIIS.exe -s Path). IMPORTANT: Registering scriptmaps will cause the W3SVC service on the web server to restart. Do not use this call on a web server that is in use and should not be retarted./>
 </summary>
 <param name="virtualDirPath">Pass in the path to the virtual directory, such as /W3SVC/1/ROOT/VirtualDirName</param>
 <param name="WmiInstance">Pass in a WmiInstance if you want to run this call on a remote machine.</param>
 <param name="aspNetVersion">Pass in a version if you want to register a specific version of ASP.Net. <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper"/> which is called under the hood is smart enough to return the correct version of ASP.Net for a given version of .Net. Thus, if you register it for version 3.5 of .Net, the version of aspnet_regiis.exe will be 2.XX. as there is no version 3.5 of asp.net</param>
 <remarks>This call will issue <see cref="T:System.Diagnostics.Trace"/> trace statements. If you need to log these values, hook up a trace listener before issuing this call.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet(System.String)">
 <summary>
 Use this method to install scriptmaps recursively at the specified path (AspNet_RegIIS.exe -s Path) on localhost. IMPORTANT: Registering scriptmaps will cause the W3SVC service on the web server to restart. Do not use this call on a web server that is in use and should not be retarted./>
 </summary>
 <param name="virtualDirPath">Pass in the path to the virtual directory, such as /W3SVC/1/ROOT/VirtualDirName</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet">
 <summary>
 Use this method to install scriptmaps recursively on the entire web server (AspNet_RegIIS.exe -i) on localhost. IMPORTANT: Registering scriptmaps will cause the W3SVC service on the web server to restart. Do not use this call on a web server that is in use and should not be retarted./>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet(Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities)">
 <summary>
 Use this method to install scriptmaps recursively on the entire web server (AspNet_RegIIS.exe -i) on the server specified in the wmiInstance. IMPORTANT: Registering scriptmaps will cause the W3SVC service on the web server to restart. Do not use this call on a web server that is in use and should not be retarted./>
 </summary>
 <param name="WmiInstance">Pass in a WmiInstance if you want to run this call on a remote machine.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet(Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Use this method to install scriptmaps recursively on the entire web server (AspNet_RegIIS.exe -i) on the server specified in the wmiInstance. IMPORTANT: Registering scriptmaps will cause the W3SVC service on the web server to restart. Do not use this call on a web server that is in use and should not be retarted./>
 </summary>
 <param name="WmiInstance">Pass in a WmiInstance if you want to run this call on a remote machine.</param>
 <param name="aspNetVersion">Pass in a version if you want to register a specific version of ASP.Net. <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper"/> which is called under the hood is smart enough to return the correct version of ASP.Net for a given version of .Net. Thus, if you register it for version 3.5 of .Net, the version of aspnet_regiis.exe will be 2.XX. as there is no version 3.5 of asp.net</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.RegisterASPNet(Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions,System.String)">
 <summary>
 Use this method to shell out to aspnet_regiis.exe on localhost or a remote machine with custom command line arumgnets. Use the predefined calls to RegisterASP net in this class for the most common scenarios. Call this only if your scenario is not wrapped up with another RegisterASPNet overload. Calling this method will restart the W3SVC service.
 </summary>
 <param name="WmiInstance">Pass in a WmiInstance if you want to run this call on a remote machine.</param>
 <param name="aspNetVersion">Pass in a version if you want to register a specific version of ASP.Net. <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper"/> which is called under the hood is smart enough to return the correct version of ASP.Net for a given version of .Net. Thus, if you register it for version 3.5 of .Net, the version of aspnet_regiis.exe will be 2.XX. as there is no version 3.5 of asp.net</param>
 <param name="commandLineArguments">Specify the command line arguments. Check apsnet_regiis.exe for a list of supported argumets.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.GetADSIPathForVirtualDirectory(System.String)">
 <summary>
 Use this function to obtain an Active Directory Path for a virtual directory located in the default web site on localhost. You can then use this path to open the DirectoryEntry object for the virtual directory
 </summary>
 <param name="virtualDirectoryName">Name of virtual directory. \ will be replaced with / if you pass in a path involving several nodes</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.GetADSIPathForVirtualDirectory(System.String,System.String)">
 <summary>
 Use this function to obtain an Active Directory Path for a virtual directory located in the default web site on a computer. You can then use this path to open the DirectoryEntry object for the virtual directory
 </summary>
 <param name="computerName">Name of computer where virtual directory is located. Pass in nothing or empty string to use localhost</param>
 <param name="virtualDirectoryName">Name of virtual directory. \ will be replaced with / if you pass in a path involving several nodes</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.GetADSIPathForVirtualDirectory(System.String,System.Int32,System.String)">
 <summary>
 Use this function to obtain an Active Directory Path for a virtual directory. You can then use this path to open the DirectoryEntry object for the virtual directory
 </summary>
 <param name="computerName">Name of computer where virtual directory is located. Pass in nothing or empty string to use localhost</param>
 <param name="webSiteIndex">Use 1 for the default web site or a different index if more than one web site exists</param>
 <param name="virtualDirectoryName">Name of virtual directory. \ will be replaced with / if you pass in a path involving several nodes</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.ExtractComputerNameFromADSIPath(System.String)">
 <summary>
 Use to extract name of computer from ADSI path, such as IIS://computerName/XYX
 </summary>
 <param name="adsiPath"></param>
<exception cref="T:System.ArgumentException">Thrown if path does not correspond to expected format</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.ExtractWebsiteIDFromADSIPath(System.String)">
 <summary>
 Use to websiteID from ADSI path, such as IIS://computerName/XYX
 </summary>
 <param name="adsiPath"></param>
<exception cref="T:System.ArgumentException">Thrown if path does not correspond to expected format</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.FindIISChildEntry(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType)">
 <summary>
 This function will look for an entry in the IIS Metabase for the specified child object. The IIS Metabase will only contain an entry if non-inherited metadata have been specified for this entry. If the object does not exist, it will be added and the parent object will be saved.
 </summary>
 <param name="childObjectType">Pass in the type of object to be created if no child entry in the IIS metabase is found and one will have to be added.</param>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException"> Thrown if the <see cref="P:System.DirectoryServices.DirectoryEntry.Children"/>.Add method returns an nothing</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.FindIISChildEntry(System.DirectoryServices.DirectoryEntry,System.String,System.Nullable{Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType},System.Boolean)">
 <summary>
 This function will look for an entry in the IIS Metabase for the specified child object. The IIS Metabase will only contain an entry if non-inherited metadata have been specified for this entry.If the object does not exist, it will be added and the parent object will be saved.
 </summary>
 <param name="childObjectType">This is only required if there is a chance that no entry may exist and the <param name="addIfItDoesNotExist"/> is set to true. Pass in nothing otherwise.</param>
 <param name="addIfItDoesNotExist">An entry in the IIS metabase only exists if any inherited properties have been overwritten. If true, an entry will be created for the object if it does not exist already. </param>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException"> Thrown if the <see cref="P:System.DirectoryServices.DirectoryEntry.Children"/>.Add method returns an nothing</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.ClearClickOnceApplicationCache">
 <summary>
 Call this method to clear the ClickOnce application cache for the user on localhost under whose credentials this code is running
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.GetWebSites(System.String)">
 <summary>
 Returns a list of websites on a given server.
 </summary>
 <param name="host">Specify the name of the computer hosting IIS. Either \\Hostname or simply hostname are ok.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.Common.FindUniqueWebSiteId(System.String[],System.Int32)">
 <summary>
 Call this method to obtain a unique name for a web site that does not yet exist on any of the web servers passed in through <paramref name="serverlist"/>
 </summary>
 <param name="serverlist">Array of host machines without \\. If you pass in several servers in a cluster, it will ensure that you can use the same ID for the web site on each server.</param>
 <param name="startingNumber">Specify which value to use as a starting number.</param>
 <returns>Returns a unique ID for the server. In IIS 6, this ID has to be a number</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ScriptMapEntry.ToString">
 <summary>
 Returns the orignial script map entry as stored in the metabase which is simply a comma delimited string with fields 'Extension, Processor, Flags, Verbs'
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ScriptMapEntry.ProcessorIsAspNet">
 <summary>
 Returns true if the processor of the script map is ASP.Net (apsnet_isapi.dll)
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ScriptMapEntry.ProcessorIsLatestVersionOfAspNet">
 <summary>
 Returns true if the installed version of aspnet_isapi.dll contains to the most recent version of the asp.net framework that is on the current computer. If the current processor is not asp.net, nothing will be returned.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ScriptMapEntry.UpdateAspNetProcessorToDifferentVersion(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Use this method to update the asp.net script map entries to point to a different version of Asp.Net. The replacement will only be made if the versions differ. If the processor is not Asp.Net, this call will be ignored.
 </summary>
 <param name="newVersion">Version of .Net to point to</param>
 <returns>True if an update was performed, false otherwise. False does not mean failure. It simply means that the processor either was not asp.net or that it was already set to the version that was passed in through <paramref name="newVersion"/></returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ScriptMapEntry.UpdateAspNetProcessorToLatestVersion">
 <summary>
 Updates the Asp.Net script maps to the latest installed version of aps.net
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding">
 <summary>
 Use this class to wrap up the ServerBindings property in the IIS Metabase
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.AllIncludsiveWildCard">
 <summary>
 This value may be returned in the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.Hostname"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.IP"/> property values
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.#ctor(System.String)">
 <summary>
 Use this constructor when instantiating a class with the value from the IIS metabase Serverbindings property
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.Hostname">
 <summary>
 This is an optional parameter and may return * it the underlying setting on the web server is not set.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.IP">
 <summary>
 This is an optional setting and may return <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.AllIncludsiveWildCard"/> if the underlying setting on the web server is not set
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.Port">
 <summary>
 This is an optional setting and may return <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.AllIncludsiveWildCard"/> if the underlying setting on the web server is not set
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ServerBinding.ToString">
 <summary>
 Returns a binding value in the format expected the the IIS metabase: IP:Port:Hostname
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.ServerBindingCollection.FindByPort(System.String)">
 <summary>
 Use this method to find a server mapping based on the port number. If more than on entry exists per port (unusual), only the first entry will be returned.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.SetAnonymousAccessHelper.SetAnonymousAccess(System.String,System.String,System.String)">
 <summary>
 This function sets the subdirectory of for anonymous access. If the sub-directory has not been added to the IIS Metabase yet, it will be added as <see cref="T:Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType"/>.IIsWebDirectory
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.SetAnonymousAccessHelper.SetAccess(System.String,System.String,System.String,Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType,Blackbaud.AppFx.Platform.Automation.IIS.AuthFlagValues)">
 <summary>
 Call this function to set the desired authentication level on a virtual directory, a subdirectory of a virtual directory, or a file located within a virtual directory
 </summary>
 <param name="desiredAuthentication">BitFlag of which authentication methods should be used.</param>
 <param name="childObjectName">Specify the name of the sub-directory or file to which access should be set. Set to String.empty to set Access to the virtual Directory only</param>
 <param name="childObjectType">This parameter is only taken into consideration when <paramref name="childObjectName"/> is not an empty string. The IIS Metabase does not contain entries for objects unless individual properties were set on the object. If the child object does not exist yet in the Metabase, we need to know the object type that we should add it as.</param>
 <remarks>This function returns true if it succeeds, false otherwise. A log event is raised if an error is thrown. This is considered a non-critical operation in the setup and this method makes it possible for the caller to ignore an error without having to write custom error trapping code.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.SetAnonymousAccessHelper.GetAccess(System.String,System.String,System.String,Blackbaud.AppFx.Platform.Automation.IIS.IISObjectType)">
 <summary>
 Call this function to get the desired authentication level on a virtual directory, a subdirectory of a virtual directory, or a file located within a virtual directory
 </summary>
 <param name="childObjectName">Specify the name of the sub-directory or file to which access should be set. Set to String.empty to set Access to the virtual Directory only</param>
 <param name="childObjectType">This parameter is only taken into consideration when <paramref name="childObjectName"/> is not an empty string. The IIS Metabase does not contain entries for objects unless individual properties were set on the object. If the child object does not exist yet in the Metabase, we need to know the object type that we should add it as.</param>
 <remarks>This function returns a BitFlag of which authentication methods are being used.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.SetAnonymousAccessLogEventArgs.Exception">
 <summary>
 If the log event is raised in response to an exception, you can access the exception that was thrown through this property.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory._virtualDirPath">
 <summary>
 Do not use this variable directly. Use the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Path"/> instead or use <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.ObtainDirectoryEntry(System.Boolean)"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.#ctor">
 <summary>
 Use this constructor only to create template objects. You will not be able to save the object to the ActiveDirectory store
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.#ctor(System.String)">
 <summary>
 Use this constructor to access or create a virtual directory on localhost default website
 </summary>
<param name="vDirname">Name of virtual directory</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.#ctor(System.String,System.String)">
<summary>
 Use this constructor to create or access a virtual directory on localhost or a remote machine default website
</summary>
<param name="vDirname">Name of virtual directory</param>
<param name="computerName">Computer on which the virtual directory should be created or accessed. If you pass in an empty string, localhost is assumed.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.#ctor(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.String)">
<summary>
Use this constructor to create or access an application pool on localhost or a remote machine. It allows you to pass in username and password information to access a remote machine.
</summary>
<param name="vDirname">Name of virtual directory</param>
<param name="executionContext"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"></see> Specify the host and optionally a user name and password in order to access the remote host.</param>
<param name="webSiteID">ServerID of website. In the GUI, IIS typically assigns a number to this value. It can, however, be a string as well. An argument exception will be thrown if the numeric value of this parameter amounts to 0. If 0 is passed, it most likely a coding error where somebody defined the ID as integer, did not initialize it, and passed it to this constructor.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.#ctor(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.String,System.String)">
<summary>
Use this constructor to create or access an application pool on localhost or a remote machine. It allows you to pass in username and password information to access a remote machine.
</summary>
<param name="vDirname">Name of virtual directory</param>
<param name="executionContext"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"></see> Specify the host and optionally a user name and password in order to access the remote host.</param>
<param name="webSiteID">ServerID of website. In the GUI, IIS typically assigns a number to this value. It can, however, be a string as well. An argument exception will be thrown if the numeric value of this parameter amounts to 0. If 0 is passed, it most likely a coding error where somebody defined the ID as integer, did not initialize it, and passed it to this constructor.</param>
 <param name="parentFolderName">Specify the parent folder or folder path if the virtual directory is not to be created off of the root of the web site. Examples are 'mySubDir' or 'mySubDir/Subfolder'.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.HostName">
 <summary>
 Returns the name of the computer on which the virtual directory is hosted
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AccessFlags">
 <summary>
 The AccessFlags property contains flags for configuring file access permissions, which are defined in the Flags section. The last four flags augment the first four flags in that they relate to access granted to remote computers. You can enable local access without remote access, but you cannot enable remote access without local access.
 Default: <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.AccessFlagValues.DefaultValue"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AccessSSLFlags">
 <summary>
 The AccessSSLFlags property contains the Secure Sockets Layer (SSL) file permission flags as seen in the Flags section. The default value of 0 means that no SSL permissions are set. 
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppIsolated">
 <summary>
 The AppIsolated property indicates whether an application is to run in-process, out-of-process, or in a pooled-process
 Default:pooled (2)
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppRoot">
 <summary>
 The AppRoot property contains the metabase path to the application root. 
 Default:null
 Readonly
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspScriptTimeout">
 <summary>
 The AspScriptTimeout property specifies (in seconds) the default length of time that ASP pages allow a script to run before terminating the script and writing an event to the Windows Event Log.
 Default:90
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspSessionTimeout">
 <summary>
 The AspSessionTimeout property specifies (in minutes) the default amount of time that a Session object is maintained after the last request associated with the object is made. 
 Default:10
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AuthFlags">
 <summary>
 The AuthFlags property contains the settings for the Windows authentication schemes that are returned to clients as being available.
 Default:authanonymous (1)
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.ContentIndexed">
 <summary>
 The ContentIndexed property specifies whether the installed content indexer should index content under this directory tree.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.DirBrowseFlags">
 <summary>
 The DirBrowseFlags metabase property contains flags, as seen in the Flags section, that control whether directory browsing is enabled.
 Default:dirbrowseshowdate | dirbrowseshowtime |dirbrowseshowsize | dirbrowseshowextension | enabledefaultdoc (1073741854)
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.DontLog">
 <summary>
 The DontLog property specifies whether client requests are written to the IIS log files.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppFriendlyName">
 <summary>
 The AppFriendlyName property specifies the user-friendly name of the package or application.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppPoolId">
 <summary>
 The AppPoolId property specifies the application pool where the application is routed.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppPool">
 <summary>
 This property returns the application pool of an existing directory only. This property will return nothing when called on an object instance that does not map to an underlying ActiveDirectory object yet. To assign an existing application pool to a virtual directory, set the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppPoolId"/> property. To create a separate application pool as part of the <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Create"/> function, use the overload that contains the AppPoolName parameter.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.DefaultDoc">
 <summary>
 The DefaultDoc contains one or more file names of default documents that will be returned to the client if no file name is included in the client's request.
 Default:default.htm
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.PhysicalPath">
 <summary>
 The Path property specifies the physical path associated with a virtual directory.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Path">
 <summary>
 Returns the ActiveDirectory path, not the physical path of the virtual directory
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.ScriptMaps">
 <summary>
 This property returns nothing if a virtual directory does not exist yet. When creating a new virtual directory, save the directory first and then access the script maps through this property
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppAllowClientDebug">
 <summary>
 The AppAllowClientDebug property specifies whether ASP client-side debugging is enabled. 
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AppAllowDebugging">
 <summary>
 The AppAllowDebugging specifies whether ASP debugging is enabled on the server.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspAllowOutOfProcComponents">
 <summary>
 In IIS 4.0, the AspAllowOutOfProcComponents property specifies whether an ASP script is allowed to call out-of-process components. This property was made obsolete in IIS 5.0.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspAllowSessionState">
 <summary>
 The AspAllowSessionState property enables session state persistence for the ASP application.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspAppServiceFlags">
 <summary>
 The AspAppServiceFlagsproperty contains the flags that must be set to enable COM+ services on your IIS applications.
 Default:0
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspBufferingLimit">
 <summary>
 The AspBufferingLimit property sets the maximum size (Bytes) of the ASP buffer.
 Default:4194304
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspBufferingOn">
 <summary>
 The AspBufferingOn property specifies whether output from an ASP application will be buffered.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspCalcLineNumber">
 <summary>
 The AspCalcLineNumber property specifies whether ASP should calculate and store the line number of each executed line of code in order to provide the number in an error report.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspCodepage">
 <summary>
 The AspCodepage property specifies the default code page for an application.
 Default:0
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspEnableApplicationRestart">
 <summary>
 The AspEnableApplicationRestart determines whether an ASP application can be automatically restarted.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspEnableAspHtmlFallback">
 <summary>
 The AspEnableAspHtmlFallback property controls the behavior of ASP when a new request is to be rejected due to a full request queue. 
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspEnableChunkedEncoding">
 <summary>
 The AspEnableChunkedEncoding property specifies whether HTTP 1.1 chunked transfer encoding is enabled for the World Wide Web Publishing Service (WWW service).
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspEnableParentPaths">
 <summary>
 The AspEnableParentPaths property specifies whether an ASP page allows paths relative to the current directory (using the ..\ notation). 
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspEnableTypelibCache">
 <summary>
 The AspEnableTypelibCache property specifies whether type libraries are cached on the server.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspErrorsToNTLog">
 <summary>
 The AspErrorsToNTLog property specifies which ASP errors are written to the Windows event Log. See http://msdn.microsoft.com/en-us/library/ms525438.aspx on which errors are logged based on combination of this property and the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspLogErrorRequests"/> property.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspExceptionCatchEnable">
 <summary>
 The AspExceptionCatchEnable property specifies whether ASP pages trap exceptions thrown by components. 
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspExecuteInMTA">
 <summary>
 ASP is capable of running all of its threads in a multi-threaded apartment (MTA). 
 Default:NotInMTA (0)
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspKeepSessionIDSecure">
 <summary>
 The AspKeepSessionIDSecure property, when enabled, ensures that a SessionID is sent as a secure cookie if assigned over a secure channel.
 Default:Disabled (0)
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspLCID">
 <summary>
 The AspLCID property specifies the default locale identifier (LCID) for an application.
 Default:0
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspLogErrorRequests">
 <summary>
 The AspLogErrorRequests property controls whether the Web server writes ASP errors to the application section of the Windows event log.  
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspMaxDiskTemplateCacheFiles">
 <summary>
 The value of the AspMaxDiskTemplateCacheFiles property specifies the maximum number of compiled ASP templates that can be stored. 
 Default:2000. Pass in 4294967295 to specify 'Unlimited'
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspMaxRequestEntityAllowed">
 <summary>
 The AspMaxRequestEntityAllowed property specifies the maximum number of bytes allowed in the entity body of an ASP request. 
 Default:200000 
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspProcessorThreadMax">
 <summary>
 The AspProcessorThreadMax property specifies the maximum number of worker threads per processor that IIS may create.
 Default:10
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspQueueConnectionTestTime">
 <summary>
 IIS places all ASP requests into a queue. If the request is queued longer than the number of seconds specified by the AspQueueConnectionTestTime property, ASP checks to determine whether the client is still connected before executing the request. 
 Default:3
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspQueueTimeout">
 <summary>
 The AspQueueTimeout property specifies the amount of time (in seconds) that an ASP script request is allowed to wait in the queue.
 Default = <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.Common.AspUnlimitedValue"/> which is no timeout.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspRequestQueueMax">
 <summary>
 The AspRequestQueueMax property specifies the maximum number of concurrent ASP requests that are permitted into the queue.
 Default:500
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspRunOnEndAnonymously">
 <summary>
 The AspRunOnEndAnonymously property specifies whether the SessionOnEnd and ApplicationOnEnd global ASP functions should be run as the anonymous user.
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspScriptEngineCacheMax">
 <summary>
 The AspScriptEngineCacheMax Metabase Property specifies the maximum number of scripting engines that ASP pages will keep cached in memory.
 Default:250
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspScriptErrorSentToBrowser">
 <summary>
 The AspScriptErrorSentToBrowser property specifies whether the Web server writes debugging specifics (file name, error, line number, description) to the client browser, in addition to logging them to the Windows Event Log. 
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspScriptFileCacheSize">
 <summary>
 The AspScriptFileCacheSize property specifies the number of precompiled script files to cache. 
 Default:500
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspSessionMax">
 <summary>
 The AspSessionMax property specifies the maximum number of concurrent sessions that IIS will permit. 
 Default: <see cref="F:Blackbaud.AppFx.Platform.Automation.IIS.Common.AspUnlimitedValue"/> which is no max.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspTrackThreadingModel">
 <summary>
 The AspTrackThreadingModel property specifies whether IIS checks the threading model of any components that your application creates.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.CacheISAPI">
 <summary>
 The CacheISAPI property indicates whether ISAPI extensions are cached in memory after first use. 
 Default:true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.CGITimeout">
 <summary>
 The CGITimeout property specifies the timeout (in seconds) for CGI applications.
 Default:300
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.PasswordChangeFlags">
 <summary>
 The PasswordChangeFlags property contains flags, as seen in the Flags section, that control password expiration and password change processing between the server and client. 
 Default:0
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AnonymousUserName">
 <summary>
 The AnonymousUserName property specifies the name of the registered local user that is used to authenticate anonymous users.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AnonymousUserPass">
 <summary>
 The AnonymousUserPass property specifies the password of the registered local user that is used to authenticate anonymous users. 
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspScriptErrorMessage">
 <summary>
 The AspScriptErrorMessage property specifies the error message to send to the browser if specific debugging errors are not sent to the client.
 Default:"An error occurred on the server when processing the URL. Please contact the system administrator."
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspScriptLanguage">
 <summary>
 The AspScriptLanguage property specifies the default script language for all ASP applications running on the Web server.
 Default:VBScript
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AuthChangeURL">
 <summary>
 The AuthChangeURL property contains the URL to be invoked when a user enters a new password.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AuthExpiredUnsecureURL">
 <summary>
 The AuthExpiredUnsecureURL property contains a URL that will be invoked when a user's password has expired.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AuthExpiredURL">
 <summary>
 The AuthExpiredURL property contains a URL that will be invoked when a user's password has expired. It will be invoked in a secure (HTTPS) manner.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AuthNotifyPwdExpUnsecureURL">
 <summary>
 The AuthNotifyPwdExpUnsecureURL property contains a URL that will be invoked if the user's password expires sooner than the number of days specified in PasswordExpirePreNotifyDays.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AuthNotifyPwdExpURL">
 <summary>
 The AuthNotifyPwdExpURL property contains a URL that will be invoked if the user's password expires sooner than the number of days specified in PasswordExpirePreNotifyDays. It will be invoked in a secure (HTTPS) manner.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AspDiskTemplateCacheDirectory">
 <summary>
 AspDiskTemplateCacheDirectory contains the name of the directory that ASP uses to store compiled ASP templates to disk after overflow of the in-memory cache
 Default:%windir%\system32\inetsrv\asp compiledtemplates
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.HttpCustomHeaders">
 <summary>
 The HttpCustomHeaders property contains custom headers that are sent to the client, in addition to the default header of the HTML file. Each string in this property is formatted as a key name and value pair: Keyname: Value.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.HttpRedirect">
 <summary>
 The HttpRedirect property specifies the directory or URL to which a client is redirected when attempting to access a specific resource.
 Default:null
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.DoDynamicCompression">
 <summary>
 The DoDynamicCompression property performs the same function as the global HcDoDynamicCompression property, but it is used for enabling and disabling static content compression at the individual site or site element level.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.DoStaticCompression">
 <summary>
 The DoStaticCompression property performs the same function as the global HcDoStaticCompression Metabase Property property, but is used for enabling or disabling static content compression at the individual site or site element level.
 Default:false
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.CreateApplication">
 <summary>
 If true, the AppCreate method will be invoked on the ActiveDirectory object. If the <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Create"/> overload that takes an appPoolName parameter is called, this flag will always be set to true internally when the virtual directory is created.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Create(System.String,System.Boolean)">
 <param name="appPoolName">Specify the application pool name. If the application pool exists, the existing pool will be used. If it does not exist, a new pool will be created with the name specified here.</param>
 <param name="overWrite">Indicate whether you want to overwrite the virtual directory</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Create(Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory,System.Boolean,System.Boolean)">
 <summary>
 Call this method to create a new application pool based on the settings of an existing application pool. Use <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Deserialize(System.String)"></see> to create a template object from a stored XML file."
 </summary>
 <param name="vDirTemplateObject">Pass in <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.ApplicationPool.Deserialize(System.String)"></see> to create a new object based on a template stored offline as XML. If you pass in nothing, this parameter will be ignored.</param>
 <param name="applyTemplateToExistingDirectoryentry">This property is ignored if <paramref name="appPoolTemplate"></paramref> in an empty string. If it is not, then a value of true indicates that the property values retrieved from the template will be applied to both new and existing virtual directories. If false, they will only be applied to new virtual directories.</param>
 <param name="overWrite">If true, the existing application pool will be re-used and any changes in property values will be applied to it. The pool will not be deleted, as this may cause problems if it is associated with virtual directories.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.RegisterDotNet(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Call this method to register a certain version of ASP.NET on the virtual directory which in turn calls aspnet_regiis.exe -s [path]
 </summary>
 <param name="DotNetVersion">Specify which version of asp.net you want to register</param>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.NativeObject">
 <summary>
 Returns the underlying ActiveDirectory object that this class wraps up.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Exists">
 <summary>
 Call to check whether an application pool exists on the web server
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.Serialize(System.String)">
 <summary>
 This method will call <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.ADHelper.PersistObjectPropertiesToXML(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.DirectoryServices.DirectoryEntry)"/> internally. The main intent of this method is to obtain an XML representation of all the properties that can be used to audit the settings of a Virtual Directory.
 </summary>
 <param name="fileName">File name to which the settings should be persisted</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.ParentWebSite">
 <summary>
 Use this function to obtain the IISWebSite entry under which this virtual directory was created.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.CreateInternal(Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory,System.Boolean,System.Boolean,System.String)">
 <param name="applicationPoolName">This will create an application pool by this name if it does not exist. If it exists, it will assign the application pool to this virtual directory.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.URL">
 <summary>
 Use this property to obtain the ULR that can be used to access the directory through a browser. If any of the <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory.AccessSSLFlags"/> are set, the path will be returned as an HTTPS page. Otherwise, it will be returned as an HTTP path.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreatorIIS7.ApplicationPool">
 <summary>
 Specify the application pool with which this directory should be associated
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator">
 <summary>
 Use this class to create a virtual directory for the Infinity platform. Do not use it to create other virtual directories
 </summary>
 <remarks></remarks>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator._rootSubPath">
 <summary>
 Contains only the root folder of the web site, not the complete object path, such as /W3SVC/1/Root
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator._rootPath">
 <summary>
 contains the complete object path for AD, such as IIS://W3SVC/1/ROOT....
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.VirtualDirectoryPath">
 <summary>
 Readonly property which returns the complete virtual path to the directory. Returns nothing if directory creation failed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.ApplicationPool">
 <summary>
 Specify the application pool with which this directory should be associated
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.Realm">
 <summary>
 Specify this property when using Basic Authentication. This property is optional. If specified, the name of the realm appears in the loging screen sent to the client. It has no other meaning. The following article explains basic authentication and the meaning of this property
 http://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/f85f0f16-4fea-4852-980c-4982d53c9948.mspx?mfr=true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.DefaultLogonDomain">
 <summary>
 Specify this property when using Basic Authentication. It tells IIS against which domain to authenticate the user. If no thing is specified, the user will be authenticated against the local machine. The following article explains basic authentication and the meaning of this property
 http://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/f85f0f16-4fea-4852-980c-4982d53c9948.mspx?mfr=true
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.RunASPRegIIS">
 <summary>
 Set to true in order to run aspnet_regiis.exe -s on the virtual directory. This is only required if a web site does not have the correct version of ASP.Net enabled.
 </summary>
 <value></value>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.VirtualDirectoryObject">
 <summary>
 returns a virtualDirectory object after the CreateVirtualDirectory function has been called. You can use this object to make further changes to the virtual directory
 </summary>
 <returns>Nothing if the <see cref="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.CreateVirtualDirectory"/> has not been called yet or instance of <see cref="T:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectory"/> otherwise.</returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.MimeTypeExists(System.DirectoryServices.PropertyValueCollection,System.String,System.String)">
 <summary>
 Checks to see if a mime type exists in the mime type elements.
 </summary>
 <param name="mimeTypes">The collection of mime types to check</param>
 <param name="fileExtension">The file extention attribute value to look for.</param>
 <param name="mimeType">The mime type attribute to look for.</param>
 <returns>True if an element with a matching mime type and file extention is found, false otherwise.</returns>
 <remarks>
 This should be called before adding another mime type to the collection.  This version is for use with IIS6 or lower.
 The same functionality also exists in:
   $/Infinity/../Automation/TeamBuild/BuildTasks/CreateInitialVirtualDirectory.vb
 </remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.RegisterASPNet">
 <summary>
 This call will restart the W3SVC, so it should be made with caution.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryCreator.EnsureApplicationIsSpecificDotNetVersion(System.DirectoryServices.DirectoryEntry@)">
 <summary>
 Ensures that a website or vdir is configured to use Asp.Net version X for either 32 or 64-bit as specified.
 Changes must be committed after subroutine is called.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.#ctor">
 <summary>
 Use this constructor only to create template objects. You will not be able to save the object to the ActiveDirectory store
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.#ctor(System.String)">
 <summary>
 Use this constructor to access or create a website on localhost
 </summary>
<param name="webSiteName">Name of website</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.#ctor(System.String,System.String)">
<summary>
 Use this constructor to create or access an website on localhost or a remote machine
</summary>
<param name="webSiteName">Name of website</param>
<param name="computerName">Computer on which the website should be created or accessed. If you pass in an empty string, localhost is assumed.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.#ctor(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
<summary>
Use this constructor to create or access a website on localhost or a remote machine. It allows you to pass in username and password information to access a remote machine.
</summary>
<param name="webSiteName">Name of website</param>
<param name="executionContext"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"></see> Specify the host and optionally a user name and password in order to access the remote host.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.#ctor(System.Int32)">
 <summary>
 Use this constructor to access or create a website on localhost
 </summary>
<param name="webSiteID">ID of website</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.#ctor(System.Int32,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
<summary>
Use this constructor to create or access a website on localhost or a remote machine. It allows you to pass in username and password information to access a remote machine.
</summary>
<param name="webSiteID">ID of website</param>
<param name="executionContext"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"></see> Specify the host and optionally a user name and password in order to access the remote host.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.Name">
 <summary>
 Returns the name of the website
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebSite.NativeObject">
 <summary>
 Returns the underlying ActiveDirectory object that this class wraps up.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryUtil.GetVirtualDirectoryPath(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Use this function to get the path of a virtual directory
 </summary>
 <param name="webRoot">Pass in the web site in the form of /W3SVC/1/Root/</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.VirtualDirectoryUtil.LocalVirtualDirectoryPath">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.#ctor(System.String)">
 <summary>
 Specify the location of the URL. Both a UNC path or HTTP path is supported
 </summary>
 <param name="URL">If you specify a UNC path, it must be the fully qualified path, such as \\MyServer\c$\Inetpub\wwwroot\bbps\web.config. If you specify an HTTP Path, you may either specify http:\\MyServer\MyVirtualDirectory or http:\\MyServer\MyVirtualDirectory\web.config</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.#ctor(System.String,System.Int32)">
 <summary>
 Specify the location of the URL and serverId. Both a UNC path or HTTP path is supported
 </summary>
 <param name="URL">If you specify a UNC path, it must be the fully qualified path, such as \\MyServer\c$\Inetpub\wwwroot\bbps\web.config. If you specify an HTTP Path, you may either specify http:\\MyServer\MyVirtualDirectory or http:\\MyServer\MyVirtualDirectory\web.config</param>
<param name="serverId">Specifies a server site other than "Default Web Site"</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.AppKeyValue(System.String,System.Boolean)">
 <param name="throwErrorIfNotExist">It true, an error will be thrown if the setting does not exist yet. If false, an empty string will be returned if the setting does not exist yet and the SETTER will add the setting if it does not exist yet.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.AppKeyValue(System.String)">
 <summary>
 Use this property to access an application setting. An error will be thrown on the GET if the property does not exist. On the SET, the property will be created automatically if it does not exist.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.AddSelectedDatabase(System.String,System.String,System.Boolean)">
 <summary>
 Call this method to add a database to an Infinity web.config which requires a corresponding entry in the REDBLIST.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.RemoveSelectedDatabase(System.String)">
 <summary>
 Call this method to remove and entry from the REDBlist string and delete the associated connection string.
 </summary>
 <param name="selectedDatabaseName">Value as it appears in REDBList</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.Save">
 <summary>
 Saves changes to the original web.config. An internal dirty flag will be checked and the file will only be saved if it is dirty.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.Save(System.String)">
 <summary>
 Saves changes to the web.config to the file name specified.
 </summary>
 <param name="fileName">Specify a file name if you want to save the changes to a different file than the orignal web.config. If the value of this parameter points to the same path as the original web.config, the changes will only be saved if the file is dirty. If the path is different, the changes will be saved regardless of the dirty flag.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.Save(System.String,System.Boolean)">
 <summary>
 Saves changes to the web.config file.
 </summary>
 <param name="fileName">Specify a file name if you want to save the changes to a different file than the orignal web.config. If the value of this parameter points to the same path as the original web.config, the changes will only be saved if the file is dirty. If the path is different, the changes will be saved regardless of the dirty flag.</param>
 <param name="force">By default, it only saves the file if it is dirty or if the path specified is different from the original path that was used to open the web.config file. If you want to force a save, set this value to true. Otherwise, set it to false.</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.TryGetAppKeyValue(System.String,System.String@)">
 <summary>
 Use this method to query an application key that may not exist. It will return false if the key does not exist.
 </summary>
 <param name="appKey">Key to check</param>
 <param name="value">reference parameter that will hold the value of the key if it is found</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.TryGetConnectionStringValue(System.String,System.String@)">
 <summary>
 Use this method to query an application key that may not exist. It will return false if the key does not exist.
 </summary>
<param name="selectedDatabase">Name of the database for which to retrieve connection information</param>
 <param name="value">reference parameter that will hold the value of the key if it is found</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.RemoveIndividualConnectionStringElement(System.String)">
 <summary>
 Use this method to remove an entry from the connectionStrings sections of the web config
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.FindElement(System.String)">
 <summary>
 Use this method to locate elements inside web.config. This method will automatically handle the namespace prefix to any xpathQuery string unless the query string already contains it. 
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.RemoveHttpHandler(System.String)">
 <summary>
 Adds a remove name=nameParam xml element to the list of handlers under system.webserver/handlers.
 </summary>
 <param name="name">Name of the handler to add a remove tag.</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.RemoveHttpHandler(System.Xml.XmlElement,System.String)">
 <summary>
 Adds a remove name=nameParam xml element to the list of handlers under system.webserver/handlers and system.web/httpHandlers
 </summary>
 <param name="name">Name of the handler to add a remove tag.</param>
 <param name="systemWebServerElement">XmlElement representing the System.WebServer or System.Web element</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.EnableAssemblyShadowCopy">
 <summary>
 Enable shadow copying for assemblies.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.DisableAssemblyShadowCopy">
 <summary>
 Disable shadow copying for assemblies.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.EnsureReportExecutionTimeout">
 <summary>
 Ensures the report host page has a reasonable timeout value.
 </summary>
 <remarks>The location path used to be ReportDisplay.aspx.  If that node exists in the web.config, this function will modify it to have the new path.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.Dirty">
 <summary>
 Returns true if any settings in the file have changed since it was opened. Call this before saving if you only want to save the file and force a reset of the App if something has actually changed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.DatabasesAreManagedBySiteManager">
 <summary>
 Returns true if a SiteManagerDB entry exists and the databases for this site are managed by SiteManager and not through the REDBList entry in web.config
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.ProbingPath">
 <summary>
 Returns or sets the 'probing' element located under runtime/assemblybinding/probing which is used for customizations.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.RemoveConnectionStrings">
 <summary>
 Call this method to remove all connection string elements with connectionstrings. The root node will not be removed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.SourceDocument">
 <summary>
 Use this property to obtain a handle to the underlying document so you can perform searches on nodes which are not already wrapped up elsewhere. <seealso cref="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.NameSpaceManager"/> <seealso cref="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.NameSpacePrefix"/>j
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.NameSpacePrefix">
 <summary>
 Use this property when constructing XPath through <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.SourceDocument"/> to search for nodes which may not already be wrapped up. <seealso cref="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.NameSpaceManager"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.NameSpaceManager">
 <summary>
 Use this property when constructing XPath through <see cref="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.SourceDocument"/> to search for nodes which may not already be wrapped up. <seealso cref="P:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.NameSpacePrefix"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.CreateChildElement(System.Xml.XmlElement,System.String,Blackbaud.AppFx.Platform.Automation.IIS.WebConfigElementInsertionPoint,System.Int32,System.Int32,System.Int32)">
 <summary>
 Use this method to append a child to a parent node.
 </summary>
 <param name="parentElement"></param>
 <param name="childElementName"></param>
 <param name="numLinesBefore">Number of lines to add before node</param>
 <param name="numLinesAfter">Number of lines to add after node</param>
 <param name="numIndents">Number of tabs to add before node</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.EnsureScheduledProcessServiceAuthentication">
 <summary>
 Ensures the scheduled process service is configured for windows authentication.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.EnsureUploadMaxAllowedContentLength">
 <summary>
 Ensures that a <requestLimits maxAllowedContentLength="665600000" /> is added to web.config under location(Upload)/system.webServer/security/requestFiltering.
 If the node already exists, then this won't change the content length value.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.EnsureUploadCustomErrorsEnabled">
 <summary>
 Ensures that a <customErrors mode="RemoteOnly" defaultRedirect=""/> 
 is added to web.config under location(Upload)/system.web
 If the node already exists, then this won't change the content length value.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.EnsureSslHttpOnlyCookies">
 <summary>
 Ensures that a <httpCookies httpOnlyCookies="true" requireSSL="true" /> 
 is added to web.config under system.web
 If the node already exists, then this won't duplicate it or change the values
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebConfig.GetUploadLocationNode">
 <summary>
 Returns the [location path='Upload'] node from the document.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension">
 <summary>
 This class provides a wrapper to manipulate the entries which appear under Web Service Extensions in InetMgr. It provides a list and allows you to turn individual extensions on or off.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.ExtensionFields">
 <summary>
 This enum provides an index into the comma delimited field of the _extensionEntry. Do not change the order of these fields
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.#ctor(System.String,System.Int32)">
 <summary>
 Specify the index into the native array that is returned by accessing active directory
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.ApplicationName">
 <summary>
 Returns the description of an extension. This is what is displayed in InetMgr
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.ExtensionPath">
 <summary>
 ExtensionPath is the full path to the extension. If the last four characters of the physical path are ".dll" (case insensitive), then the extension is an ISAPI, otherwise it is a CGI. In the case of CGI script mappings, the physical path must contain the physical path from the mapping (i.e. "c:\windows\system32\cmd.exe %s %s").
 *.dll and *.exe are special cases, referring to 'All Unlisted ISAPIs' and 'All Unlisted CGIs', respectively. The Web server core enables or disables all ISAPIs or all CGIs depending on the setting, if these entries are present
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.ExtensionIsISAPI">
 <summary>
 Returns true if the path of the extension in an ISAPI filter which ends in *.dll
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.ExtensionIsCGI">
 <summary>
 Returns true if the filter path is an *.exe
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.CanBeDeleted">
 <summary>
  is true if the UI through InetMgr is allowed to delete the extension from the list or "false" if the UI is not allowed to delete it.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.GroupID">
 <summary>
 GroupID is a non-localizable string used to identify groups of extensions
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.IsAllowed">
 <summary>
 Returns true if the extension is permitted and false if it is prohibited. This is the only property that can be changed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.IndexIntoNativeArray">
 <summary>
 Value indicating the location where this entry was stored in the original array returned by calling .get("WebSvcExtRestrictionList")
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtension.ExtensionEntry">
 <summary>
 returns the entry for the filter entry after any changes have been applied to it
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtensionList.Save">
 <summary>
 Call this method to persist the object state to the IIS metabase. Will only persist changes if the object is dirty.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtensionList.Save(System.Boolean)">
 <summary>
 Call this method to persist the object state to the IIS metabase.
 </summary>
 <param name="force">Set to true if you want to persist the current state of the object to the IIS metabase even if the internal dirty flag is not set to true. Useful to reset object to default values after temporarily making some changes</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtensionList.AllowAspDotNet">
 <summary>
 Call this method to allow Asp.Net extensions for all versions. Save is called automatically at the end of this method.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtensionList.AllowAspDotNet(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Call this method to allow Asp.Net extensions for a specific version of the framework. Save is called automatically at the end of this method.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtensionList.ProhibitAspDotNet(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Call this method to prohibit Asp.Net extensions for a specific version of the framework. Save is called automatically at the end of this method.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.IIS.WebServiceExtensionList.ProhibitAspDotNet">
 <summary>
 Call this method to disallow Asp.Net extensions for all versions. Save is called automatically at the end of this method.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.EnvironmentInfo.OSIsVistaOrLater(System.String)">
 <summary>
 Use this function to check for the presence of Vista on a remote computer. If a connection to the remote computer fails, the function returns false.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.EnvironmentInfo.OSIsVistaOrLater(Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities)">
 <summary>
 This is used internally if you have already connected to a WMI instance, as establishing a connection can take a long time
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper">
 <summary>
 Use this class to pass in any of the end points specified in <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints"/> and derive the other endpoints from it. This class does not supply any encoding. Its main intent is to build the correct path to an InfintyPath. Run it throuth the <see cref="T:System.UriBuilder"/> class to get the correct encoding.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.Root">
 <summary>
 Returns the root of the virtual directory, such as http://MyServer/MyInfinityVirtualDir
 </summary>
 <remarks></remarks>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.StartBrowserHTML">
 <summary>
 Returns the StartBrowser.htm page, such as http://MyServer/MyInfinityVirtualDir/Browser/StartBrowser.htm
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.AppFxWebServiceWS">
 <summary>
 Returns the pointer to the aAppFxWebService.asmx page, such as http://MyServer/MyVirtualDir/appfxWebService.asmx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.AppFxWebServiceWSWithWISDL">
 <summary>
 Returns the pointer to the aAppFxWebService.asmx?wsdl page, such as http://MyServer/MyVirtualDir/appfxWebService.asmx?wsdl
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.WebConfig">
 <summary>
 Returns a pointer to the web.config file, such as such as http://MyServer/MyVirtualDir/web.config
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.BusinessProcessInvoke">
 <summary>
 Returns a pointer to the BusinessProcessInvoke.ashx, such as such as http://MyServer/MyVirtualDir/BusinessProcessInvoke.ashx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.BlackbaudBrowserApplication">
 <summary>
 Returns path to the Blackbaud.Appfx.Browser.application file, such as , such as such as http://MyServer/MyVirtualDir/Browser/Blackbaud.AppFx.Browser.application
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.DefaultHTM">
 <summary>
 Returns path to the Default.htm page off of the root, such as http://MyServer/MyVirtualDir/Default.htm
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.KPIDashBoard">
 <summary>
 Returns path to the KPIDashboard.ashx page off of the root, such as http://MyServer/MyVirtualDir/KpiDashboard.aspx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.KPIEndPoint">
 <summary>
 Returns path to the KPIEndPoint.ashx page off of the root, such as http://MyServer/MyVirtualDir/KpiEndpoint.ashx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.WebDashboardFolder">
 <summary>
 Returns the path to the WebDashBoard folder
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.WebDashboardTempFolder">
 <summary>
 Returns the path to the WebDashboard\db folder which is the folder that needs to be given additional 'write' rights for the application pool identity.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.BBLogoGif">
 <summary>
 Returns the path to the BBLogo.gif file located within the browser folder. Several tests in hosting browse to this file to make sure the virtual directory can be accessed.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.BBNCSvcMasterService">
 <summary>
 Returns path to the BBNCSvc/MasterService.asmx page, such as http://MyServer/MyVirtualDir/BBNCSvc/MasterService.asmx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.CustomFileDownload">
 <summary>
 Returns path to the Download/CustomFileDownload.ashx page, such as http://MyServer/MyVirtualDir/Download/CustomFileDownload.ashx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.ContentManagementService">
 <summary>
 Returns path to the Additional_Services/ContentManagement.asmx page, such as http://MyServer/MyVirtualDir/Additional_Services/ContentManagement.asmx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.WebShellScheduledProcessService">
 <summary>
 Returns path to the webui/WebShellScheduledProcessService.ashx page, such as http://MyServer/MyVirtualDir/webui/WebShellScheduledProcessService.ashx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.WebUiDefaultPage">
 <summary>
 Returns path to the Browser/Default.aspx page, such as http://MyServer/MyVirtualDir/Browser/Default.aspx
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints.HeartBeatManager">
 <summary>
 Returns path to the HeartBeatManager.ashx endpoint, such as http://MyServer/MyVirtualDir/HeartBeatManager.ashx
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.QueryStrings">
 <summary>
 The values of this enumerated type correspond to the actualy value of the query string that is to be constructed.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.QueryStrings.BasicOnly">
 <summary>
 This query string determines which options are visible at the login screen. There is some logic in the login screen that is based upon this flag.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.QueryStrings.DomainPrefix">
 <summary>
 As long as the Realm and the DefaultDomain are set, passing this value up is not critical. We do it in hosting anyway, just in case the virtual directoy is not set up correctly.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.QueryStrings.SiteInfoID">
 <summary>
 Expects the GUID for the SiteInfoID when the Site is managed by SiteManager
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.GetInfinityServiceEndPoint(System.String,Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints,System.Boolean)">
 <summary>
 You can pass in any standard Infinity entry points and derive the other entry points from the URL that is passed in. If none of the end points specified in <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.InfinityServerServerEndPoints"/> are part of <paramref name="anyInfinityServiceURL"/>, it is assumed that the root directory is passed in. Any endpoints will be appended to it.
 </summary>
 <param name="anyInfinityServiceURL">Any report service URL http://someHost/InfinityVirtualDir, http://someHost/InfinityVirtualDir/Browser/StartBrowser.htm or http://someHost/InfinityVirtualDir/web.config. </param>
 <param name="endPoint">Specify the end point that you would like to get back</param>
 <param name="appendSlash">If true, a "/" will be appended to the path except for those endpoints that represent a file</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.InfinityURLHelper.ObtainArgument(System.String,System.String,System.String[])">
 <summary>
 Will return the first argument if the paramArray is populated. If no arguments are passed in, it will return the default value if it is not set to nothing. 
 </summary>
 <param name="validationMessage">Message to be thrown as part of the argument exception if <paramref name="args"/> is nothing and <paramref name="defaultValue"/> is nothing. Pass in string empty if you also pass in a <paramref name="defaultValue"/> as the code to throw the exception what would use the value of this parameter will never execute.</param>
 <param name="defaultValue">Pass in nothing or empty string if there is no default value</param>
 <param name="args">argument list originally passed to the calling function.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.ReportServiceUrlHelper.GetReportServiceEndPoint(System.String,Blackbaud.AppFx.Platform.Automation.PathHelpers.ReportServiceUrlHelper.ReportServerEndPoints,System.Boolean)">
 <summary>
 You can pass in any standard ReportServer entry points and derive the other entry points from the URL that is passed in. Named instances are supported, but default names for virtual directories are assumed.
 </summary>
 <param name="anyReportServiceURL">Any report service URL http://someHost/reports, http://someHost, http://someHost/reportserver or http://someHost/reportServer/ReportService2005.asmx?wsdl. Named instances are supported. Deeper nesting is not supported. You may not pass in a sub-folder of http://reportserver/reports/myFolder for example. Otherwise it will return the incorrect value.</param>
 <param name="endPoint">Specify the end point that you would like to get back</param>
 <param name="appendSlash">If true, a "/" will be appended to the path except for the WISDL endpoint</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions">
 <summary>
 Used in <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper"></see> methods to specify which version of the DotNet Framework to reference.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetFilePathType">
 <summary>
 Used in <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper"></see> methods to specify framework file to retrieve.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetFilePathType.AspNetRegIIs">
 <summary>
 Refers to aspnet_regiis.exe
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetFilePathType.AspNetIsapi">
 <summary>
 Refers to aspnet_isapi.dll
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType">
 <summary>
 Used in <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper"></see> methods to specify which framework path to retrieve.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType.DotNetFrameworkRootPath">
 <summary>
 Returns the root path where all the .Net framework implementations are located. This typically evaluates to %SystemRoot%\Microsoft.Net\Framework
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType.DotNetCorePath">
 <summary>
 Returns the path where the core framework is located. For example, if you install 3.0, only 3.0 extensions are located in the v3.0 folder. The core files are still located in v2.0.50727
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType.DotNetExtensionPath">
 <summary>
 Returns the path where extensions to the framework are installed. For example, v3.0 and v3.5 do not install complete copies of all the framework files. They only add extensions to v3.0 and v3.5 and use the core files from v.2.0.50727
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper">
 <summary>
 Use this class to obtain information about the installed versions of .Net on a local or remote computer. There are different ways of obtaining this information. Mscoree.dll provides a native method called GetRequestedRunTimeInfo which only works
 on localhost, however. This class will look at the location of the .Net framework folders and find the installed versions that way so it can work both locally and remotely. The MSCoree.dll functionality is already wrapped up in <see cref="T:Microsoft.Build.Utilities.ToolLocationHelper"/> This class assumes
 that the user executing this code has administrative rights on the target machine.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.TranslateVersionToDotNetVersion(System.Version)">
 <summary>
 Translates a standard version object to a DotNetVersion enumerated type
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.TranslateVersionToPath(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Returns the folder name without the path where the version of the framework is supposed to be located. Return 'v*' if <paramref name="versionToLookFor"></paramref>=MostRecent. 
 </summary>
 <param name="versionToLookFor"></param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.Path">
 <summary>
 Returns the Path of the most current version of the DotNet framework that is installed on a computer. The path is always returned as a local path. If you need to access it remotely, call <see cref="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)"/> This property returns the <see cref="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType.DotNetExtensionPath"></see>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.Path(System.Boolean)">
 <summary>
 Returns the Path of the most current version of the DotNet framework that is installed on a computer. The path is always returned as a local path. If you need to access it remotely, call <see cref="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)"/>. This property returns the <see cref="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType.DotNetExtensionPath"></see>
 </summary>
 <param name="AppendBackSlash">Specify true to return the path with a backslash at the end, false to return the path without a backslash.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.Path(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Returns the Path corresponding to the version set in <paramref name="versionToLookFor"></paramref>.  The path is always returned as a local path. If you need to access it remotely, call <see cref="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)"/>. This property returns the <see cref="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType.DotNetExtensionPath"></see>
</summary>
<returns>Empty string if the version specified is not installed. Path the framework otherwise.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.Path(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType)">
 <summary>
 Returns the specified path for the most recent version of the framework. The path is always returned as a local path. If you need to access it remotely, call <see cref="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)"/>. 
</summary>
<returns>Empty string if the version specified is not installed. Path the framework otherwise.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.Path(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Return the specified path. The path is always returned as a local path. If you need to access it remotely, call <see cref="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)"/>. 
</summary>
 <param name="pathTypeToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType"></see></param>
 <param name="versionToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions"></see></param>
<returns>Empty string if the version specified is not installed. Path the framework otherwise.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.Path(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions,System.Boolean)">
 <summary>
 Return the specified path. The path is always returned as a local path. If you need to access it remotely, call <see cref="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)"/>. 
</summary>
 <param name="pathTypeToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathType"></see></param>
 <param name="versionToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions"></see></param>
 <param name="appendBackSlash">true if \ should be returned at end of path</param>
<returns>Empty string if the version specified is not installed. Path the framework otherwise.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.FrameworkIsInstalled(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Returns true if the version specified in <paramref name="versionToLookFor"/> is installed.
 </summary>
 <param name="versionToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions"></see></param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.FrameworkIsInstalled">
 <summary>
 returns true if any version of the .Net Framework is installed
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.MostRecentInstalledVersion">
 <summary>
 returns the most recent version of the framework that is installed on a computer
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.File(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetFilePathType,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions,System.Boolean)">
 <summary>
 returns the complete path the specified file.
 </summary>
 <param name="fileToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetFilePathType"></see></param>
 <param name="versionToLookFor"><see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions"></see></param>
 <param name="encloseInQuotes">Pass in true to enclose the value that is returned in quotes. If will only enclose the value in quotes if it contains spaces.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.VersionIsExtensionOf(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Some versions of the framework are simply extensions of earlier versions and do not encompass a complete copy of the framework. 1.0, 1.1 and 2.0 are independent versions. 3.0 and 3.5 are extensions of 2.0
 </summary>
 <param name="versionToCheck">Pass in the version of the framework that you want to check</param>
 <returns>Returns the version of the framework that <paramref name="versionToCheck"></paramref> is an extension of. If the version is not an extension of another version, the same value that is passed in is returned.</returns>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.VersionInfo(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Returns more detailed version information about the framework that is installed. Starting with 3.0, a version key is written to the registry with more detailed version information. For earlier frameworks, the version is reflected in the framework name itself.
 </summary>
 <param name="versionToCheck"></param>
 <returns>Nothing if <paramref name="versionToCheck"></paramref>is not installed. Valid <see cref="T:System.Version"/> object otherwise.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.ServicePackLevel(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Returns the service pack level for each framework from the registry. It the version is not found or no service pack is installed, it returns 0.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.DotNetRootPath">
 <summary>
 This value returns the root path where all the DotNet frameworks are located. It evaluates to %SystemRoot%\Micorosft.Net\Framework
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.FindVersion(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Returns the most recent of the DotNet framework installed on a machine. Returns nothing if it cannot find any version of the framework
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.AddVersionValueToDictionary(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions,System.String,System.Version,System.String,Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions)">
 <summary>
 Use this function to add the appropriate keys to the dictionary so we can cache the paths
 </summary>
 <param name="versionToAdd">See comment in <paramref name="translatedDotNetVersion"></paramref></param>
 <param name="versionPath"></param>
 <param name="versionInfo"></param>
 <param name="translatedDotNetVersion">The value for this parameter should be the same as the value for the <paramref name="versionToAdd"></paramref> parameter unless the value of versionToAdd is <see cref="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions.MostRecent"></see> when it should reflect the translation of 'MostRecent' to an actual version value.</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetPathHelper.PerformRegistryCheck(Blackbaud.AppFx.Platform.Automation.PathHelpers.DotNetVersions,System.Version@,System.String@,System.String@)">
 <summary>
 Use this function to validate that a certain version of the framework was installed successfully.
 </summary>
 <param name="foundVersion">Pass in the version object that was created in FindVersion. If the framework version supports setting version info in the registry, this object will be adjusted to include this information</param>
 <param name="installPath">Path were network was found by looping through framework root path. It will be compared to the network path that is set in the registry if the version of the framework supports it. Only 3.5 does</param>
<returns>true if it was installed successfully, false otherwise</returns>
<remarks>The registry keys used to determine whether .Net is installed are based on the following article: http://astebner.sts.winisp.net/Tools/detectFX.cpp.txt from http://blogs.msdn.com/astebner. Up to version 3.5 you can only check the registry to see if it is installed, not where. Version 3.5 has an install path setting as well</remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper">
 <summary>
 This structure is used as a return type by functions that obtain path informatin from remote machines
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.ValueExists(System.String)">
 <summary>
 Checks to see whether path exists in dictionary and returns empty string if it does not
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FixPath(System.String)">
 <summary>
 Appends a backslash to the path.
 </summary>
 <returns>Empty string if <paramref name="path"></paramref> is null or empty string. Value of path followed by backslash otherwise. If the value of path already contains a backslash, the same value that is passed in is returned.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FixPath(System.String,Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FixPathOption)">
 <summary>
 Can be used to append or remove a backslash from a path
 </summary>
 <returns>Emtpy string if <paramref name="path"></paramref>is empty string or nothing. Path with or without backslash otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FixPath(System.String,Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FixPathOption,System.String)">
 <summary>
 Can be used to append or remove a backslash from a path
 </summary>
 <param name="separatorCharacter">Specify \ for regular paths and / for web paths</param>
 <returns>Emtpy string if <paramref name="path"></paramref>is empty string or nothing. Path with or without backslash otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.GetDriveLetter(System.String)">
 <summary>
 Call this to return C when c:\.... is passed in.
 </summary>
 <param name="localPath"></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String)">
 <summary>
 Use this function to translate a local path to a UNC path. This is useful when obtaining path information about a service or a file on a remote machine. This information is usually returned as a local path in the context of the machine where this information was retrieved. If you need to access this file remotely by looking at file properties or to copy it, you need to translate this path to a UNC path first.
 </summary>
 <param name="computerName">Name of computer where file is located. If value is <c>.</c>, <c>nothing</c>, or <c>string.empty</c> localHost is assumed.</param>
 <param name="path">Path to be translated</param>
 <returns>Returns value of <paramref name="path"/>if host is current computer or translated path using the following format: <c>\\Host\AdminShare$\folder</c>. </returns>
 <exception cref="T:System.ArgumentException">Thrown if empty string is passed in for path.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateLocalPathToUNCPath(System.String,System.String,System.Boolean)">
 <summary>
 Use this function to translate a local path to a UNC path. This is useful when obtaining path information about a service or a file on a remote machine. This information is usually returned as a local path in the context of the machine where this information was retrieved. If you need to access this file remotely by looking at file properties or to copy it, you need to translate this path to a UNC path first.
 </summary>
 <param name="computerName">Name of computer where file is located. If value is <c>.</c>, <c>nothing</c>, or <c>string.empty</c> localHost is assumed.</param>
 <param name="path">Path to be translated. If the path starts with \\, the value that is passed in will be returned.</param>
 <param name="forceTranslation">If true, it will always return a valid UNC path. If false, it will only return a UNC path if <paramref name="computerName"/> is a remote machine.</param>
 <returns>Returns value of <paramref name="path"/>if host is current computer or translated path using the following format: <c>\\Host\AdminShare$\folder</c>. </returns>
 <exception cref="T:System.ArgumentException">Thrown if empty string is passed in for path.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.Combine(System.String,System.String)">
 <summary>
 Use this function to combine two paths or a drive letter and a path. This function will interpret drive letters, such as c: as the root folder of a drive c:\ and result in c:\SomeFileOrPath. The built-in .Net functions <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/> and My.Computer.FileSystem.CombinePath are non-deterministic when it comes to driver letters. The result of System.IO.Path.Combine("c:", "test.txt") will be "c:text.txt" This will be interpreted by the consuming application as "c:\Currentdirectory\Test.txt". My.Computer.FileSystem.CombinePath("c:", "test.txt") will be resolved to the current directory in the context of the application making the function call. If you use the result of the built-in .Net functions in the same application where the call was made, they are functionally equivalent. If you pass the result as an argument to an external application, the results may vary depending on what the current directory of the external process is.
 </summary>
 <returns>Combines the value of the two strings with a \. If second string is null or empty, it returns the value passed in through <paramref name="path1"></paramref></returns>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="path1"></paramref>is nothing or empty string.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.Combine(System.String,System.String,System.String)">
 <summary>
 Use this function to combine two paths or a drive letter and a path. This function will interpret drive letters, such as c: as the root folder of a drive c:\ and result in c:\SomeFileOrPath. The built-in .Net functions <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/> and My.Computer.FileSystem.CombinePath are non-deterministic when it comes to driver letters. The result of System.IO.Path.Combine("c:", "test.txt") will be "c:text.txt" This will be interpreted by the consuming application as "c:\Currentdirectory\Test.txt". My.Computer.FileSystem.CombinePath("c:", "test.txt") will be resolved to the current directory in the context of the application making the function call. If you use the result of the built-in .Net functions in the same application where the call was made, they are functionally equivalent. If you pass the result as an argument to an external application, the results may vary depending on what the current directory of the external process is.
 </summary>
 <returns>Combines the value of the two strings with a \. If second string is null or empty, it returns the value passed in through <paramref name="path1"></paramref></returns>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="path1"></paramref>is nothing or empty string.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.MSIInstallLocation(System.String,System.Boolean)">
 <summary>
 Use this function to obtain the install location for a product installed with Windows Installer. InstallLocation is not a required property in Windows Installer and not every product has it. Be sure to use this only for products that set the InstallLocation property.
 </summary>
 <param name="productCode">Use Orca.exe available at http://msdn2.microsoft.com/en-us/library/Aa370557.aspx to obtain the product code from the msi file of a product. The produce code is usually a GUID.</param>
 <returns>Install path of product if InstallLocation property exists for product. Empty string otherwise. If an empty string is returned, it does not mean that the product is not installed. It may simply mean that the InstallLocation property of the product is not set.</returns>
 <exception cref="T:System.ComponentModel.Win32Exception">Thrown if product is not installed or if call to MSIGetProductInfo returns error code.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.RemoveInvalidCharactersFromFileName(System.String)">
 <summary>
 Use this function to remove invalid characters from a filename.
 </summary>
 <param name="fileName">File name from which the invalid characters need to be removed</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.TranslateUNCPathToLocalPath(System.String)">
 <summary>
 Use this function to translate a a UNC path to a local path. This only works for UNC paths reference an admin share, such as \\MyMachine\c$\SomeFolder. It will not resolve a shared network folder to its underlying local folder at this point.
 </summary>
 <param name="path">Path to be translated</param>
 <exception cref="T:System.ArgumentException">Thrown if empty string is passed in for path.</exception>
 <exception cref="T:System.NotImplementedException">Thrown if a network path is passed in that is not an admin share.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.GetMachineNameFromAdminShare(System.String)">
 <summary>
 Use this function to extract the machine from a path like \\MyServer\c$
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.PutPathInQuotes(System.String)">
 <summary>
 Puts quotes around the path if the path contains spaces. If the path does not contain any spaces, it will not put quotes around it. If will check for leading or trailing spaces. It will also check to see if the path is already delimited by quotes to make sure we do not add double quotes.
 </summary>
 <param name="inputPath">Path the needs quotes.</param>
 <returns>Path in quotes if path contains spaces, inputPath otherwise. If inputPath is nothing, and empty string is returned.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.CharCount(System.String,System.Char)">
 <summary>
 Case sensitive function that counts the occurrence of characters in a string.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FindFolderinTree(System.String,System.String)">
 <summary>
 Use this function to locate a folder given a certain source path.
 </summary>
 <param name="sourcePath">The current location</param>
 <param name="folderToFind">Folder to find that is located somewhere in the source path</param>
 <remarks>For example, if you know that there is a folder called ClassicCMS on the C:\Code\Infinity\ and your current path is c:\Code\Infinity\SomeOtherFolder\SomeSubFolder, this code will walk up the folder tree and check for the presense of a sub folder called <paramref name="folderToFind"/></remarks>
 <returns>Complete path of <paramref name="folderToFind"/> or empty string if folder is not found.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathHelper.FindFileTree(System.String,System.String,System.Int32)">
 <summary>
 Use this function to locate a folder given a certain source path.
 </summary>
 <param name="sourcePath">The current location</param>
 <param name="fileToFind">Specify the name of the file, without a path, to find in the tree</param>
 <param name="nodesToSearch">You can limit how far up the tree it should search. If you specify -1, it will search all the way to the root of the drive. If you specify 2, it will only look two folders higher than the current folder</param>
 <remarks>For example, if you know that there is a folder called ClassicCMS on the C:\Code\Infinity\ and your current path is c:\Code\Infinity\SomeOtherFolder\SomeSubFolder, this code will walk up the folder tree and check for the presense of a file called <paramref name="fileToFind"/></remarks>
 <returns>Complete path of <paramref name="fileToFindoFind"/> or empty string if folder is not found.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.LocalPath">
 <summary>
 Returns the path in the context of the machine on which it is retrieved.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.UncPath">
 <summary>
 Returns the path as the caller would have to reference it in order to be able to access files on the remote machine.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.FileName">
 <summary>
 Simply returns the file portion of a path. If you have already called the Exists method and it know whether a path is a file or a folder
 it will return an empty string if the path represents a folder. If Exists has not been called yet, it will simply delegate the call to
 System.IO.Path.GetFileName
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.Extension">
 <summary>
 Returns the extension of the file preceeded by a ., such as .dll. In the event of a path, an empty string is returned.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.Extension(System.Boolean)">
 <summary>
 Returns the extension of the file preceeded by a ., such as .dll. In the event of a path, an empty string is returned.
 </summary>
 <param name="excludeSeparatorCharacter">Indicates whether the . should be excluded in the return value.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.Exists">
 <summary>
 Returns true if the file name or folder exists. False otherwise
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.Exists(System.Boolean)">
 <summary>
 Returns true if the file name or folder exists. False otherwise
 </summary>
 <param name="refresh">Once the existence of a path has been verified, the value is cached. If you need to refresh the cached value, pass in true</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.PathIsFolder">
 <summary>
 Returns true if the path represented by this object is a folder path, false if is a path to a file. If the path does not exist, it returns nothing.
 Calling this property will result in a check to see whether the file or folder exists, because we cannot determine whether a path is a file or a folder
 based on the presence of an extenion alone.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.FileVersion">
 <summary>
 Returns a FileVersionInfo object if the path is a file path and the file exists. Returns nothing if path is a directory
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.Tag">
 <summary>
 Use this property to assign a custom tag to this object
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation.ToStringOutputType">
 <summary>
 Use this property to govern the behavior of the ToString overload so this class can be used as a data source for controls more easily
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.SandCastlePathHelper">
 <summary>
 Use this class to obtain path and file information for SandCastle.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.SandCastlePathHelper.Path">
 <summary>
 Use this class to obtain path information relating to the Sandcastle API documentation framework.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper">
 <summary>
 Use this class to obtain path information about Visual Studio.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType.TFCommandLineUtility">
 <summary>
 Returns the path without the file name to the TFS command line utility
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType.SDKTools">
 <summary>
 Returns the path that is returned by the FrameworkSDKDir in VS2005 and the WindowsSDKDir in VS2008
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType.FxCop">
 <summary>
 Returns the FxCop directory which is located under X\Team Tools\Static Analysis Tools\FxCop
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.FileType.TFCommandLineUtility">
 <summary>
 Returns the path including the file name to the Tf.exe command line utility to interact with TFS
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.FileType.Mage">
 <summary>
 Returns the path including the file name to the Mage.exe utility used to edit manifests and to clear the application cache
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.FileType.DevEnv">
 <summary>
 Returns the file path to the visual studio executable that is used to launch the program
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.FileType.vsvars32">
 <summary>
 Returns the batch file that is used to set the environment variables
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.#ctor">
 <summary>
 Default constructor will instantiate a new instance of this class for Visual Studio 2005
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.Path">
 <summary>
 Returns the path to the Visual Studio IDE without a backslash at the end
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.Path(System.Boolean)">
 <summary>
 Returns the path to the Visual Studio IDE followed by an optional backslash
 </summary>
 <param name="AppendBackSlash">Set to true if you want the returned value to contain a backslash, set to false otherwise</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.Path(Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType,System.Boolean)">
 <summary>
 Returns a path type relating to visual studio followed by an optional backslash
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.Path(Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType)">
 <summary>
 Returns a path type relating to visual studio without a backslash at the end
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.File(Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.FileType)">
 <summary>
 Returns the fully qualified path of file. Use this when trying to obtain a reference to command line tools such as mage, tf, or others.
 </summary>
 <param name="fileType">Indicate the type of file for which you wish to obtain a path.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.IsInstalled">
 <summary>
 Returns true if Visual studio is installed false otherwise.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.VersionSubKeyName(Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.Version,Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType)">
 <summary>
 returns the sub key to locate the path for a given version of Visual Studio
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathSubKeyName(Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType)">
 <summary>
 returns the sub key to located the path type
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathValueName(Blackbaud.AppFx.Platform.Automation.PathHelpers.VisualStudioPathHelper.PathType)">
 <summary>
 returns the value to be accessed in the registry
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper">
 <summary>
 This class is a wrapper to the robocopy utility. It allows the utility to be run on both a local and a remote machine.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.DirectoriesToExclude">
 <summary>
 The value specified here maps to the XD parameter in robocoy. Specify multiple directories separate by spaces. Wild cards are allowed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.FilesToExclude">
 <summary>
 This property corresponds to the /XF file parameter in Robocopy. Specify files matching given names/paths/wildcards. Separate files with spaces.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.LogFileName">
 <summary>
 Use this value to specify the name,  not the complete path, of the log file. You may specify the path using the <see cref="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.LogFilePath"/> property. If no log file name is specified, the copy operation will not be logged.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.LogFilePath">
 <summary>
 Specify the location of the <see cref="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.LogFileName"/>. If a value is specified for the file, it will be written to the <see cref="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.TargetFolder"/> unless a value is specified here.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.JobFileName">
 <summary>
 Specify the value of the job file name, not the path, that will be used to store all the parameters. This wrapper will always create a job file. If no value is specified, a default value of RoboCopyJob[ThreadId]_[DateTime].rjc will be used.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.JobFilePath">
 <summary>
 Specify the path, not the file name, to which the job file specified under <see cref="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.JobFileName"/> should be written. If nothing is specified, it will be written to <see cref="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.TargetFolder"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.AppendToExistingLogFile">
 <summary>
 Set to true if you want values to be appended to a log file that already exists.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.GetDefaultFileNameBase(System.Boolean)">
 <param name="isJobFile">pass in false to get the default file name for the log file</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.JobFileInfo">
 <summary>
 Returns the resolved job file name
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.RobocopyWrapper.LogFileInfo">
 <summary>
 Returns the resolved job file name
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo">
 <summary>
 Use this class to obtain informaton about a drive on a local or remote machine. The properties of the class are modeled after <see cref="T:System.IO.DriveInfo"/>. When calling <see cref="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrives"/> on local host, the calls are mapped to System.Io.DriveInfo under the hood. On remote machines, the information is retrieved via WMI.
 </summary>
 <remarks>When obtaining drive information on remote machines, please note that in the current implementation only hard drives and CD-ROM drives are listed. Floppy drives and mapped network drives are not. The Win32_LogicalDisk class which would list these drives does not provide adequate information about free space on some versions of Windows. Thus, the Win32_Volume class had to be used which does not include floppy drives and network drives. For our implementation, we are mainly interested in hard drives assoicated with servers and for that the current implementation is adequate. On local machines this limitaton does not apply unless you set the forceWmi flag on the GetDrives method when querying drives on localhost.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.AvailableFreeSpace(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 This number may not always be accurate on remote machines if quotas are used. It will be accurate if quotas are used for drives on local host and for UNC paths.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.AvailableFreeSpaceFormatted(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Call this value to obtain a formatted values, such as 10.45 GB
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.TotalFreeSpaceFormatted(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Call this value to obtain a formatted values, such as 10.45 GB
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.TotalSizeFormatted(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Call this value to obtain a formatted values, such as 10.45 GB
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.Name">
 <summary>
 Returns the name of the drive, such as c: without the backslash
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.Path">
 <summary>
 Returns the path of the drive, such as c:\. This is similar to <see cref="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.Name"/> except for the backslash.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.DriveFormat">
 <summary>
 Returns the drive format, such as NTFS or FAT32
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.ServerName">
 <summary>
 Returns the name of the computer on which the drive is located.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrives(Blackbaud.AppFx.Platform.Automation.ServerDriveInfoFilter)">
 <summary>
 Returns information about all logical drives on local host. 
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrives(Blackbaud.AppFx.Platform.Automation.ServerDriveInfoFilter,System.String,System.Boolean)">
 <param name="forceWMI">Set to true if you want to use WMI to retrieve the information, even if <paramref name="serverName"/> maps to localhost. This parameter will be ignored when querying a remote server.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrives(Blackbaud.AppFx.Platform.Automation.ServerDriveInfoFilter,Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue)">
 <param name="wmiConnection">Pass in a valid WMI connection to a remote server</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrive(System.String,System.String,System.Boolean)">
 <summary>
 Obtain informaton about a specific drive. This is tantamount to instantiating a new instance of <see cref="T:System.IO.DriveInfo"/> for a drive located on localhost.
 </summary>
 <param name="serverName">Computer on which drive is located.</param>
 <param name="driveName">Name of the drive, such as c: or the path of the drive, such as c:\</param>
 <param name="forceWMI">Set to true if you want to use WMI to retrieve the information, even if <paramref name="serverName"/> maps to localhost. This parameter will be ignored when querying a remote server.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrive(System.String,System.String)">
 <param name="driveName">Specify a valid drive letter or drive path. The drive path cannot be a UNC drive.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ServerDriveInfo.GetDrive(System.String)">
 <summary>
 Use this to obtain information about a UNC path
 </summary>
 <param name="driveName">Pass in path such as \\MyServer\Share or c:\ for local drives</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ResourceUtility">
 <summary>
 This class exposes several utility functions to extract resources from an assembly.
 </summary>
 <remarks>This class has 100% unit test coverage.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractResourceStream(System.Reflection.Assembly,System.String)">
 <summary>
 Use this function to extract a resource to a stream. Pass in the assembly that contains the resource.
 </summary>
 <param name="resourceAssembly">Assembly that contains the resource</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
 <returns><see cref="T:System.IO.Stream"/> containing the resource.</returns>
 <remarks></remarks>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceAssembly"/> is nothing or if the resource cannot be found.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractResourceStream(System.String,System.Reflection.Assembly,System.String)">
 <summary>
 Use this function to extract a text resource to a file.
 </summary>
 <param name="targetFile">Name of the file to which resource should be persisted.</param>
 <param name="resourceAssembly">Assembly that contains the resource</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractResourceStream(System.String,System.String)">
 <summary>
 Use this function to extract a text resource to a file from the calling assembly.
 </summary>
 <param name="targetFile">Name of the file to which resource should be persisted.</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractResourceStream(System.String,System.Reflection.Assembly,System.String,System.Boolean)">
 <summary>
 Use this function to extract a text or a binary resource to a file.
 </summary>
 <param name="targetFile">Name of the file to which resource should be persisted.</param>
 <param name="resourceAssembly">Assembly that contains the resource</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
 <param name="resourceIsBinary">Indicate whether the resource is a binary resource or a text resource</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractResourceToStringVariable(System.Reflection.Assembly,System.String)">
 <summary>
 Use this function to extract a text resource to a string variable.
 </summary>
 <param name="resourceAssembly">Assembly that contains the resource</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
 <returns><see cref="T:System.String"/> variable containing the contents of the resource</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.PersistBytesToFile(System.Byte[],System.String)">
 <summary>
 Use this method to persist a byte array to a file
 </summary>
 <param name="bytes">byte array to be persisted</param>
 <param name="fileName">target file name. If the file exists, it will be overwritten</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractCompressedResourceStream(System.String,System.Reflection.Assembly,System.String)">
 <summary>
 Use this method to extract a resource that has been compressed up to the file specified in <paramref name="targetFile"/>
 </summary>
 <param name="targetFile">Name of the output file to which the file should be unzipped.</param>
 <param name="resourceAssembly">Assembly containing the resource</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.CompressResource(System.String,System.Reflection.Assembly,System.String)">
 <summary>
 Use this method to compress a resource and save the compressed output to a file. This is useful if a resource is large. You can then import the compressed file as a separate resource and delete the larger file. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ExtractCompressedResourceStream(System.String,System.Reflection.Assembly,System.String)"/>
 </summary>
 <param name="targetFile">Name of the output file to which the file should be unzipped.</param>
 <param name="resourceAssembly">Assembly containing the resource</param>
 <param name="resourceName">Name of the resource. You do not have to prefix the resource with the assembly name. Simply pass in the name of the resource file</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.CompressFile(System.String,System.String)">
 <summary>
 Use this method to create a zipped copy of the <paramref name="inputFile"/>. This does not create a zip archive. It merely compresses a single file. If the file already exists, it will be overwritten.
 </summary>
 <param name="inputFile">Name of the input file</param>
 <param name="targetFile">Name of the output file which will contain the compressed copy of the input file</param>
 <exception cref="T:System.ArgumentException">Thrown if inputFile is not specified or does not exist</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.DecompressFile(System.String,System.String)">
 <summary>
 Use this method to create a zipped copy of the <paramref name="inputFile"/>. This does not create a zip archive. It merely compresses a single file. If the file already exists, it will be overwritten.
 </summary>
 <param name="inputFile">Name of the input file</param>
 <param name="targetFile">Name of the output file which will contain the compressed copy of the input file</param>
 <exception cref="T:System.ArgumentException">Thrown if inputFile is not specified or does not exist</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ResourceUtility.ReadAllBytesFromStream(System.IO.Stream,System.Byte[])">
 <summary>
 Use this method to read all bytes from a stream into the buffer.
 </summary>
 <param name="stream">Input stream to be read</param>
 <param name="buffer">Buffer holding the bytes from the stream</param>
 <returns>Total number of bytes read</returns>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Security.Group">
 <summary>
 Use this class to access ActiveDirectory groups
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.ValidateClassName(System.DirectoryServices.DirectoryEntry)">
 <summary>
 used by contructor to validate that the correct object was passed in
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.OpenFromPath(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Opens group if group reflects valid active directory path
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.TryOpen(System.String,Blackbaud.AppFx.Platform.Automation.Security.Group@)">
 <summary>
 Tries to open the requested user record on localHost or a remote machine using the WinNT provider. It will trap for the <see cref="T:System.Runtime.InteropServices.COMException"/> that is thrown if an AD object does not exist. Any other exception will be rethrown.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.TryOpen(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,Blackbaud.AppFx.Platform.Automation.Security.Group@)">
 <summary>
 Tries to open the requested user record on localHost or a remote machine using the WinNT provider. It will trap for the <see cref="T:System.Runtime.InteropServices.COMException"/> that is thrown if an AD object does not exist. Any other exception will be rethrown.
 </summary>
 <param name="context">Specify credentials with with to open user record. For local users, specify the computer name where the user is located.</param>
 <returns>True if user record could be opened successfully, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.TryOpen(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.Security.Group@,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Call this function to try an open a domain user contained in <paramref name="parentObject"/>. Both WinNT and LDAP providers are supported.
 </summary>
 <param name="parentObject">ActiveDirectory parent object that contains the user</param>
 <param name="openedGroup">ByRef parameter that will return the opened group object of type <see cref="T:Blackbaud.AppFx.Platform.Automation.Security.Group"></see></param>
 <param name="context">Specify the credential required to open a new user record if the credentials under which the current process is running do not have rights to the ActiveDirectory store.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Open(System.String)">
 <summary>
 Use this function to open a user. If you specify the user name in plain text, it will open it on localhost using the WinNT provider. If you specify a path, it will open the object as specified in the path.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Open(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function to open a user. If you specify the user name in plain text, it will open it on localhost or a remote computer using the WinNT provider. If you specify a path, it will open the object as specified in the path.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Open(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Call this method to open a domain user record in the ActiveDirectory contained in the parentObject. Both WinNT and LDAP providers are supported.
 </summary>
 <param name="context">Specify the credential required to open a new user record if the credentials under which the current process is running do not have rights to the ActiveDirectory store.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Create(System.String)">
 <summary>
 Creates a new group. If the group already exists, it will return the existing group
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Create(System.String,System.String)">
 <summary>
 Creates a new group. If the group already exists, it will return the existing group
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Create(System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Creates a new group. If the group already exists, it will return the existing group
 </summary>
 <param name="context">If you want to create the group on a remote machine, specify the machine in the code execution context. To create a group with custom credentials, specify the custom credentials in the CodeExecutionContext</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Create(System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Creates a new user on the computer specified in the <see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/>. If the user already exists, the existing user will be returned.
 </summary>
 <param name="context"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Create(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Creates a new user as a child of the <paramref name="adsiParentObject"/>. If the user already exists, the existing user will be returned if the <paramref name="returnExisting"/> flag is set to true.
 </summary>
 <param name="parentObject">Specify the parent object that will contain the new user record.</param>
 <param name="context">Specify custom credentials required to create the new user.</param>
 <param name="returnExisting">If true, it will check to see whether the user exists first and return the existing user.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">Thrown if <paramref name="returnExisting"/> is false and user already exists.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.Create(System.DirectoryServices.DirectoryEntry,System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Creates a new user as a child of the <paramref name="adsiParentObject"/>. If the user already exists, the existing user will be returned if the <paramref name="returnExisting"/> flag is set to true.
 </summary>
 <param name="parentObject">Specify the parent object that will contain the new user record.</param>
 <param name="context">Specify custom credentials required to create the new user.</param>
 <param name="returnExisting">If true, it will check to see whether the user exists first and return the existing user.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">Thrown if <paramref name="returnExisting"/> is false and user already exists.</exception>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.Group.SidObject">
 <summary>
 Use this property to obtain a SecurityIdentifier object from the SID of this group
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.AddMember(System.String)">
 <summary>
 Call this method if you want to add a member to a group. The <paramref  name="memberPath"/> must point to an active directory object that is either a user or a group. No validation to this effect is performed inside this code.
 </summary>
 <param name="memberPath">The memberpath must be a path using the same provider as the group. For example, you cannot add an LDAP user to a WinNT group. You have to pass in the WinNT path of the user.</param>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.Group.ComputerName">
 <summary>
 Returns the name of the computer on which this user is located. It returns an empty string if the user is a domain user.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.Group.Users">
 <summary>
 This collection remains cached. It will be updated if you add a user through <see cref="M:Blackbaud.AppFx.Platform.Automation.ActiveDirectory.OrganizationalUnit.AddUser(System.String,System.String,System.String)"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.Group.SamAccountName">
 <summary>
 Returns the Pre-Windows 2000 group name. By default, this will be the first 20 characters of the group name
 This property is set when the group is created and should not be changed afterwards. This property is only supported by the LDAP provider.
 </summary>
 <returns>Value of samAccountName property for LDAP objects. String.empty for all other providers</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.FindMember(System.String)">
 <param name="userOrGroupName">This value will be compared to the SamAccountName and CN properties of users and groups to see if they match</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.FindMember(System.String,System.Boolean)">
 <summary>
 Call this function to find a member of a group. If the user or group is a member, the DirectoryEntry for the member is returned. If the user or group is not found in the members collection, nothing is returned. This will only return first class members. Nested members are not returned. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.Security.Group.AddMember(Blackbaud.AppFx.Platform.Automation.Security.Group)"/>
 </summary>
 <param name="userOrGroupName">Name of the user or group whose membership status should be determined. You may either pass in the name in DomainName\UserGroupName or UserGroupName format. Unless <paramref name="useAmbigousNameResolution"/> is true, the SamAccountName and CN properties of group and user objects will be queried to see if there is a match.</param>
 <param name="useAmbigousNameResolution">If true, the ambigous name resolution filter will be used. Set this true, if you are not sure what the actual user name may be. Set it to false, if you know what the actual user name is.</param>
<returns>Returns the ActiveDirectory object of the member or nothing if the member is not found.</returns>
 <remarks>If the provider of the parent object is WinNT, the userOrGroupName will be compared to the name property. If the provider is LDAP, ambigous name resolution will be used in the filter, and the member will be found if the distinguishedName, the name, or the samAccountName properties match <paramref name="userOrGroupName"/>. The search for WinNT members it not very efficient. Do not call this function just to check whether a user or group is already a member before calling <see cref="M:Blackbaud.AppFx.Platform.Automation.Security.Group.AddMember(Blackbaud.AppFx.Platform.Automation.Security.Group)"/>. Call this function only if you need to determine whether a user or group is a member of the current group.
 </remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.Group.IsMember(System.String)">
 <summary>
 Call this function to determine whether a user or a group is a first class member of this group. Nested membership checking is not supported. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.Security.Group.FindMember(System.String)"/>
 </summary>
 <param name="userOrGroupName">Name of the user or group whose membership status should be determined. You may either pass in the name in DomainName\UserGroupName or UserGroupName format.</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Security.RandomPasswordGenerator">
 <summary>
 Use this class to generate cryptographically random passwords
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.RandomPasswordGenerator.RandomSeed">
 <summary>
 Use this function to obtain an integer which is cryptographically random. In other words, it has a higher degree of randomness than the randomness provided by standard seed in the default constructor of <see cref="T:System.Random"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.RandomPasswordGenerator.RandomPassword">
 <summary>
 Generates a random password which is 8 characters long
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.RandomPasswordGenerator.RandomPassword(System.Int32)">
 <summary>
 Generates a random pasword with a sepcified length
 </summary>
 <param name="length">The minimum supported value is 4. The maximum supported value is 100.</param>
 <exception cref="T:System.ArgumentException">Thrown if length falls outside of supported values.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.RandomPasswordGenerator.RandomPassword(System.Int32,System.Int32,System.Int32)">
 <summary>
 Generates a random pasword with a sepcified length
 </summary>
 <param name="length">The minimum supported value is 4. The maximum supported value is 100.</param>
 <param name="numNumericCharacters">Indicate how many numeric characters should be in the password</param>
 <param name="numSpecialCharacters">Indicate how many special characters such as @ or ! should be in the password</param>
 <exception cref="T:System.ArgumentException">Thrown if length falls outside of supported values.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.SharedSecurity.CurrentUserIsAuthenticatedAgainstDomain">
 <summary>
 Call this function to determine whether the current user is a domain user
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.SharedSecurity.MaschinesAreOnSameDomain(System.String,System.String)">
 <summary>
 Call this function to determine if two machines are on the same domain. If any exceptions occur, this function will return false. This function does not honor trust relationships between domains. Please note that two machines may well be on the same name. If the caller executing this code cannot determine that based on security rights, this function will return false.
 </summary>E:\Code\Infinity\Dev\Platform\Blackbaud.AppFx.Platform.Automation\Security\Group.vb
 <param name="computerName1">Name of first computer</param>
 <param name="computerName2">Name of second computer</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.SharedSecurity.SQLServerAndWebServerAreOnSameDomain(System.String,System.String)">
 <summary>
 Call this function to determine whether the SQL Server and the Web Server are on the same domain. You have to be able to connect to the SQL Server for this call to succeede. If any exceptions are raised, the function will return false.
 </summary>
 <param name="sqlServerInstance">Name of the SQL Server instance, NOT the host machine of SQL Server</param>
 <param name="webServerComputerName">Name of the computer hosting the web server</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Security.UserNameParts">
 <summary>
 Use this structure to split out strings such as x\y into a domain and a user or group name part
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.UserNameParts.DomainName">
 <summary>
 returns the part preceding the \ which is either the local computer name or a domain name
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.UserNameParts.UserName">
 <summary>
 returns the user or the group name following the \ in the name
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Security.User">
 <summary>
 Use this class to access local computer users on localhost or remote machines or to access ActiveDirectory entries for users on a Domain. The WinNT provider is used for local users, the LDAP provider is used to access users in the ActiveDirectory store.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Security.User.UserFlags">
 <summary>
 These values correspond to the ADS_USER_FLAG in ADSI
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.Security.User.UserFlags.AccountIsLockedOut">
 <summary>
 AccountIsLockedOut is not used by ActiveDirectory in connection with the userAccountControl attribute
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.Security.User.UserFlags.UserCannotChangePassword">
 <summary>
 UserCannotChangePassword is not used by ActiveDirectory in connection with the userAccountControl attribute
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.Security.User.UserFlags.PasswordExpired">
 <summary>
 PasswordExpired is not used by ActiveDirectory in connection with the userAccountControl attribute
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.ValidateClassName(System.DirectoryServices.DirectoryEntry)">
 <summary>
 used by contructor to validate that the correct object was passed in
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.OpenUserFromPath(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Opens user if userName reflects a valid path. Otherwise returns nothing
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.TryOpen(System.String,Blackbaud.AppFx.Platform.Automation.Security.User@)">
 <summary>
 Tries to open the requested user record on localHost or a remote machine using the WinNT provider. It will trap for the <see cref="T:System.Runtime.InteropServices.COMException"/> that is thrown if an AD object does not exist. Any other exception will be rethrown.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.TryOpen(System.String,System.Boolean,Blackbaud.AppFx.Platform.Automation.Security.User@)">
 <summary>
 Tries to open the requested user record on localHost or a remote machine using the WinNT provider. It will trap for the <see cref="T:System.Runtime.InteropServices.COMException"/> that is thrown if an AD object does not exist. Any other exception will be rethrown.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
 <param name="userIsDomainUser">If true user names like x\y will be interpreted as domain users on domain x. If false, they will be interpreted as local users on machine x.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.TryOpen(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,Blackbaud.AppFx.Platform.Automation.Security.User@)">
 <summary>
 Tries to open the requested user record on localHost or a remote machine using the WinNT provider. It will trap for the <see cref="T:System.Runtime.InteropServices.COMException"/> that is thrown if an AD object does not exist. Any other exception will be rethrown.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user or a user on a remote machine, depending on the value of ComputerName in <paramref name="context"/>. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
 <param name="openedUser">ByRef parameter to hold the opened user record. This parameter will be set to nothing if open fails. It open succeeds, it will point to the user open record.</param>
 <param name="context">Specify credentials with with to open user record. For local users, specify the computer name where the user is located.</param>
 <returns>True if user record could be opened successfully, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.TryOpen(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.Security.User@,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Call this function to try an open a domain user contained in <paramref name="parentObject"/>. Both WinNT and LDAP providers are supported.
 </summary>
 <param name="parentObject">ActiveDirectory parent object that contains the user</param>
 <param name="openedUser">ByRef parameter that will return the opened user object of type <see cref="T:Blackbaud.AppFx.Platform.Automation.Security.User"></see></param>
 <param name="userName">Name of the user to be opened. Only a name is expected here, not an ActiveDirectory path.</param>
 <param name="context">Specify the credential required to open a new user record if the credentials under which the current process is running do not have rights to the ActiveDirectory store.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Open(System.String)">
 <summary>
 Use this function to open a user. If you specify the user name in plain text, it will open it on localhost using the WinNT provider. If you specify a path, it will open the object as specified in the path.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Open(System.String,System.Boolean)">
 <summary>
 Use this function to open a user. If you specify the user name in plain text, it will open it on localhost using the WinNT provider. If you specify a path, it will open the object as specified in the path.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
 <param name="userIsDomainUser">Set to true if user name is passed in in the following format SomeMachineDomain\UserName as this format is supposed to be interpreted as domain.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Open(System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function to open a user. If you specify the user name in plain text, it will open it on localhost or a remote computer using the WinNT provider. If you specify a path, it will open the object as specified in the path.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user or a user on a remote machine, depending on the value of ComputerName in <paramref name="context"/>. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Open(System.String,System.Boolean,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function to open a user. If you specify the user name in plain text, it will open it on localhost or a remote computer using the WinNT provider. If you specify a path, it will open the object as specified in the path.
 </summary>
 <param name="userName">'MyUser' will be interpreted as a local user or a user on a remote machine, depending on the value of ComputerName in <paramref name="context"/>. 'x\y' will be interpreted as domain user if userIsDomainUser=true. WinNT or LDAP paths will be interpreted literally. </param>
 <param name="userIsDomainUser">Set to true if user name is passed in in the following format SomeMachineDomain\UserName as this format is supposed to be interpreted as domain.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Open(System.DirectoryServices.DirectoryEntry,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Call this method to open a domain user record in the ActiveDirectory contained in the parentObject. Both WinNT and LDAP providers are supported.
 </summary>
 <param name="context">Specify the credential required to open a new user record if the credentials under which the current process is running do not have rights to the ActiveDirectory store.</param>
 <param name="userName">'MyUser' will be interpreted as a local user or a user on a remote machine, depending on the value of ComputerName in <paramref name="context"/>. 'x\y' will be interpreted as domain user. WinNT or LDAP paths will be interpreted literally. </param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Create(System.String,System.String)">
 <summary>
 Use this method to create a user on localhost using the WinNT provider. If the user already exists, the existing user will be returned.
 </summary>
 <param name="userName">Username for the new user</param>
 <param name="passWord">Password for new user</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Create(System.String,System.String,System.Boolean)">
 <summary>
 Use this method to create a user on localhost using the WinNT provider. 
 </summary>
 <param name="userName">Username for the new user</param>
 <param name="passWord">Password for new user</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Create(System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Use this method to create a user on localhost using the WinNT provider.
 </summary>
 <param name="userName">Username for the new user</param>
 <param name="passWord">Password for new user</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Create(System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Creates a new user on the computer specified in the <see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/>. If the user already exists, the existing user will be returned.
 </summary>
 <param name="userName">Name of the user to create.</param>
 <param name="passWord">Password to use for user. Leave blank for no password. If no password is specified, the call to create a user may fail if the group policy requires a password.</param>
 <param name="context"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/></param>
 <returns>Instance of <c>User</c> object</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Create(System.DirectoryServices.DirectoryEntry,System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Creates a new user as a child of the <paramref name="adsiParentObject"/>. If the user already exists, the existing user will be returned if the <paramref name="returnExisting"/> flag is set to true.
 </summary>
 <param name="parentObject">Specify the parent object that will contain the new user record.</param>
 <param name="userName">Name of the user to create.</param>
 <param name="passWord">Password to use for user. Leave blank for no password. If no password is specified, the call to create a user may fail if the group policy requires a password. If an existing user is returned, the password parameter will be ignored.</param>
 <param name="context">Specify custom credentials required to create the new user.</param>
 <param name="returnExisting">If true, it will check to see whether the user exists first and return the existing user.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">Thrown if <paramref name="returnExisting"/> is false and user already exists.</exception>
 <returns>Instance of <c>User</c> object</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Create(System.DirectoryServices.DirectoryEntry,System.String,System.String,System.String,Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.Boolean)">
 <summary>
 Creates a new user as a child of the <paramref name="adsiParentObject"/>. If the user already exists, the existing user will be returned if the <paramref name="returnExisting"/> flag is set to true.
 </summary>
 <param name="parentObject">Specify the parent object that will contain the new user record.</param>
 <param name="userName">Name of the user to create.</param>
 <param name="passWord">Password to use for user. Leave blank for no password. If no password is specified, the call to create a user may fail if the group policy requires a password. If an existing user is returned, the password parameter will be ignored.</param>
 <param name="description">Enter description for user.</param>
 <param name="context">Specify custom credentials required to create the new user.</param>
 <param name="returnExisting">If true, it will check to see whether the user exists first and return the existing user.</param>
 <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">Thrown if <paramref name="returnExisting"/> is false and user already exists.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Thrown if user name contains invalid characters or is too long</exception>
 <returns>Instance of <c>User</c> object</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Users">
 <summary>
 Use this function to return a list of all local users on localhost
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Users(System.String)">
 <summary>
 `Use this function to return a list of all local users specified in <paramref name="hostName"/>. The credentials under which the current process is running will be used to connect to the computer.
 </summary>
 <param name="hostName">Name of the computer whose local users should be returned</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.Users(Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 `Use this function to return a list of all local users specified in the computer name property of <paramref name="Context"/>
 </summary>
 <param name="Context">Use the context to specify the computer whose local users should be returned along with custom credentials.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.SetPasswordDuringAdd(System.DirectoryServices.DirectoryEntry,System.String,System.String)">
 <summary>
 This method will attempt to Invoke the SetPassword method. If the Invoke method fails, the newly added user will be removed again
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.SidObject">
 <summary>
 Use this property to obtain a SecurityIdentifier object from the SID of this user
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.FirstName">
 <summary>
 This property is only available for LDAP objects, not for WinNT objects.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you try to set this property on an WinNT object.</exception>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.LastName">
 <summary>
 This property is only available for LDAP objects, not for WinNT objects.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you try to set this property on an WinNT object.</exception>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.FullName">
 <summary>
 The Full Name property can only be set on WinNT objects, not on LDAP objects
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if you try to set this property on an LDAP object. Set the FirstName and LastName properties instead</exception>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.Flags">
 <summary>
 Returns the UserFlags fields for WinNT providers and the userAccountControl for LDAP providers
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.Flags(System.Boolean)">
 <summary>
 Returns the UserFlags fields for WinNT providers and the userAccountControl for LDAP providers
 </summary>
 <param name="returnComputed">If the provider is LDAP and this value is true, it will return the msDS-User-Account-Control-Computed flags value which contains additional bits that are not correctly reflected in the userAccountControl field. Computed flags cannot be set. This value will be ignored in the property setter.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.UserCannotChangePassword(System.Boolean)">
 <summary>
 This property is expensive to determine as it involves iterating over the Access Control Entries. It will be cached by this class.
 </summary>
 <param name="refresh">Set to true to re-evaluate the access control list to determine the value of this property</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.AccountIsLockedOut">
 <summary>
 
 </summary>
 <value>You may not set this value to true. If you do, an <see cref="T:System.InvalidOperationException"/> will be thrown, as accounts cannot be locked explicity. Use <see cref="P:Blackbaud.AppFx.Platform.Automation.Security.User.AccountIsDisabled"/> in order to lock out a user explicitly. Locking typically happens as a response to invalid login attempts.</value>
 <returns></returns>
 <remarks>Setting this value to false will automatically result in a CommitChanges and take effect immediately.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.Password">
 <summary>
 Use this method to reset the password which requires administrative privileges
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.ChangePassword(System.String,System.String)">
 <summary>
 Use this method to change the password with the user's original credentials.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.ComputerName">
 <summary>
 Returns the name of the computer on which this user is located. It returns an empty string if the user is a domain user.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.NumberOfDaysSincePasswordWasLastChanged">
 <summary>
 Returns the number of days that have elapsed since the password was last changed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.PasswordHasExpired">
 <summary>
 Returns true if the user's password has expired.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.NumberOfDaysUntilPasswordExpires">
 <summary>
 Returns the number of days left before a user's password expires. If the password policy or the setting on the user's account are set to never expire a password, -1 is returned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.SamAccountName">
 <summary>
 Returns the Pre-Windows 2000 group name. By default, this will be the first 20 characters of the group name
 This property is set when the group is created and should not be changed afterwards. This property is only supported by the LDAP provider.
 </summary>
 <returns>Value of samAccountName property for LDAP objects. String.empty for all other providers</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.PasswordLastChanged(System.Boolean)">
 <summary>
 Returns the date when the user's password was last changed. If the user must change the password on next logon, <see cref="F:System.DateTime.MinValue"/> is returned. This property has only been implemented on LDAP objects.
 </summary>
 <param name="refresh">This property is cached because it is expensive to retrieve. Select refresh to synch it up with virtual directory after you have made a change.</param>
 <remarks>This property is not cached and is expensive to retrieve. Do not retrieve if for large numbers of users. If you only want to determine whether a password has expired, look at <seealso cref="P:Blackbaud.AppFx.Platform.Automation.Security.User.PasswordHasExpired"/> instead.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.IsCurrentPassword(System.String)">
 <summary>
 Call this method to see if the password you think is associated with a user account is correct. This implementation works for local users, remote users, domain users, and users on a remote non-trusted domain.
 </summary>
 <param name="passWord">Assumed password</param>
 <value></value>
 <returns>True, if the password is correct, false otherwise</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.ValidateCurrentPassword(System.DirectoryServices.DirectoryEntry)">
 <summary>
 returns nothing if validation doesn't succeed. The validation may fail because the user doesn't have rights to access his own account
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.OldIsCurrentPasswordImplementation(System.String)">
 <summary>
 This is the original implementation which is less efficient and is not necessary if you validate a password for a user that is on the same
 domain as the user running this code. It is only used for cases where we have to validate a user that is on a non-trusted domain
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.PasswordExpirationDate">
 <summary>
 This property returns the date when the password for a user will expire. If the password is set to never expire, <see cref="F:System.DateTime.MaxValue"/> will be returned. This property has only been implemented for LDAP objects.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.ObtainLastLogonInfo">
 <summary>
 This property returns the date of the last login for a given user. The 'LastLogon' property is not replicated across domain controllers and will require that the user object be queries on all domain controllers in order to obtain an accurate value. This may take some time to retrieve.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.ObtainLastLogonInfo(System.Predicate{System.DirectoryServices.ActiveDirectory.DomainController},System.Boolean)">
 <summary>
 This property returns the date of the last login for a given user. The 'LastLogon' property is not replicated across domain controllers and will require that the user object be queries on all domain controllers in order to obtain an accurate value. This may take some time to retrieve.
 </summary>
 <param name="domainControllerFilter">There are cases where domain controllers are located at the other end of the country and should not be filtered in the query. You may pass in a predicate to filter those domain controllers out.</param>
 <param name="refresh">The return value of this function will be cached in the User object for the lifespan of the object. If you wish to refresh it or call this function again with a different filter, set this value to true</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Security.User.AccountPropertyName(System.Boolean)">
 <summary>
 The names for the properties governing some account security flags vary based on provider. This property returns the correct value for the WinNT and LDAP providers
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.PasswordExceptionRequiresUserRemoval(System.Exception)">
 <summary>
 This method checks to see what underlying com exception was raised when attempting to set the password on a user object. In most cases, we will want to delete the user object. 
 </summary>
 <param name="ex">Exception that was raised when the SetPassword method was invoked.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.UnlockAccount">
 <summary>
 the LDAP provider does not honor the userAccountFlags for the unlock status, so we have to set it through the WinNT provider. See http://support.microsoft.com/kb/250873 for information about why this had to be implemented this way.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Security.User.UserCanChangePasswordImplementation(System.Nullable{System.Boolean},System.DirectoryServices.DirectoryEntry)">
 <summary>
 Use this function to obtain/set the value of the 'User Cannot Change Password' flag.
 </summary>
 <param name="newUserMayChangePwdValue">Pass in nothing if you only want to determine what the current setting is</param>
 <param name="myEntry"></param>
 <returns>True, if the user is allowed to change the password, false otherwise. It always returns the value of the object in its current state before any changes are made and a new value specified in <paramref name="newUserMayChangePwdValue"/> is applied.</returns>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs">
 <summary>
 This class exposes the well known SIDS defined by Windows. http://support.microsoft.com/default.aspx?scid=kb;EN-US;Q243330. It provides translation functions between well known SIDs and their user friendly names for logging.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.#ctor">
 <summary>
 CA1053 - No public constructors on classes that only expose shared methods
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid">
 <summary>
 To the extent that there is overlap, the values correspond to <see cref="T:System.Security.Principal.WellKnownSidType"/>. No all values defined here are also defined in <see cref="T:System.Security.Principal.WellKnownSidType"/> and vice versa.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.NullAuthority">
 <summary>
 An identifier authority
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.WorldAuthority">
 <summary>
 An identifier authority. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.LocalAuthority">
 <summary>
 An identifier authority. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.AccountOperators">
 <summary>
A built-in group that exists only on domain controllers. By default, the group has no members. By default, Account Operators have permission to create, modify, and delete accounts for users, groups, and computers in all containers and organizational units of Active Directory except the Builtin container and the Domain Controllers OU. Account Operators do not have permission to modify the Administrators and Domain Admins groups, nor do they have permission to modify the accounts for members of those groups.  
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.PowerUsers">
 <summary>
 A built-in group. By default, the group has no members. Power users can create local users and groups; modify and delete accounts that they have created; and remove users from the Power Users, Users, and Guests groups. Power users also can install programs; create, manage, and delete local printers; and create and delete file shares.  
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.DomainAdmins">
 <summary>
 S-1-5-domain-512: A global group whose members are authorized to administer the domain. By default, the Domain Admins group is a member of the Administrators group on all computers that have joined a domain, including the domain controllers. Domain Admins is the default owner of any object that is created by any member of the group. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.RemoteDesktopUsers">
 <summary>
 An alias. Members in this group are granted the right to logon remotely.  
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.Anonymous">
 <summary>
A group that includes all users that have logged on anonymously. Membership is controlled by the operating system.  
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.Nobody">
 <summary>
 No security principal. 
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.Everyone">
 <summary>
 A group that includes all users, even anonymous users and guests. Membership is controlled by the operating system.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.PreWindows2000CompatibleAccess">
 <summary>
An alias added by Windows 2000. A backward compatibility group which allows read access on all users and groups in the domain.   
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.PrincipalSelf">
 <summary>
 A placeholder in an inheritable ACE on an account object or group object in Active Directory. When the ACE is inherited, the system replaces this SID with the SID for the security principal who holds the account.  The Name is NT Authority\Self
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid.AuthenticatedUsers">
 <summary>
 A group that includes all users whose identities were authenticated when they logged on. Membership is controlled by the operating system. 
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.GetName(System.String)">
 <summary>
 Use this to return a friendly name for the string representation of a pre-defined SID. This is used by logging code if the executing code cannot resolve the SID to a friendly name. If an empty string is returned and the SID is well known, make sure the SID is defined in <see cref="T:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid"/>
 </summary>
 <param name="sid">Sid in Security Descriptor Definition Language format. S-1-2</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.IsWellKnownSid(System.String)">
 <summary>
 Returns true if this is a well-known SID. <seealso cref="M:System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)"/>. This only works for those accounts that are defined in <see cref="T:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid"/>
 </summary>
 <param name="sid">Sid in Security Descriptor Definition Language format. S-1-2</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.Sid(Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.WellKnownNTSid)">
 <summary>
 Call this function to obtain the SID for a well known account. Returns the Sid in Security Descriptor Definition Language format, such as S-1-2
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WellKnownWindowsSIDs.GetSidFromName(System.String)">
 <summary>
 ''' <param name="sid">Sid in Security Descriptor Definition Language format. S-1-2</param>Returns the string representation of a SID (S-X-X) for a well-known name, such as Everyone, or Null Authority
 </summary>
 <param name="accountName">User friendly name for the account as defined in http://support.microsoft.com/default.aspx?scid=kb;EN-US;Q243330</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.ServerAccessibilityCheck">
 <summary>
 Use this class to see whether resources at a server are accessible
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.AccessTypes">
 <summary>
 This type is used in <see cref="M:Blackbaud.AppFx.Platform.Automation.ServerAccessibilityCheck.AccessAllowed(Blackbaud.AppFx.Platform.Automation.AccessTypes)"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.FileGroup.FileGroupSize(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Returns the combined size of all data files
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevels">
 <summary>
 This enumerated type lists the compatibility levels supported by SQL Server 2000 through 2008
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevels.HighestAvailable">
 <summary>
 Specify most recent to set the compatibility level to the highest level that is available on a given server. Specify this value if you want to upgrade your database to the highest level supported by a given SQL Server
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel">
 <summary>
 This class wraps up retrieving and setting the compatibility level of a database.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.HighestSupportedLevel">
 <summary>
 Call this method to obtain the highest supported compatibility level on a SQL Server. The code checks the compatibility level of the master database in order to obtain that number
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.SetCompatibilityLevel(Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevels)">
 <summary>
 Call this method to set the compatibility level of the database in the current connection. As setting this value can result in errors if multiple users are connected
 the call checks the current level first and only updates it, if the current level does not correspond to the desired level
 If you attempt to change the compatibility level on any of the system databases, an argument execption will be thrown.
 </summary>
 <exception cref="T:System.ArgumentException">Thrown if the database specified in <paramref name="databaseName"/> is determined to be a system database by <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseIsSysDb"/></exception>. 
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.SetCompatibilityLevel(System.Int32)">
 <summary>
 Call this method to set the compatibility level of the database in the current connection. As setting this value can result in errors if multiple users are connected
 the call checks the current level first and only updates it, if the current level does not correspond to the desired level
 If you attempt to change the compatibility level on any of the system databases, an argument execption will be thrown.
 </summary>
 <exception cref="T:System.ArgumentException">Thrown if the database specified in <paramref name="databaseName"/> is determined to be a system database by <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseIsSysDb"/></exception>. 
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.SetCompatibilityLevel(System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevels)">
 <summary>
 Call this method to set the compatibility level of the specified database. As setting this value can result in errors if multiple users are connected
 the call checks the current level first and only updates it, if the current level does not correspond to the desired level
 If you attempt to change the compatibility level on any of the system databases, an argument execption will be thrown.
 </summary>
 <exception cref="T:System.ArgumentException">Thrown if the database specified in <paramref name="databaseName"/> is determined to be a system database by <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseIsSysDb"/></exception>. 
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.SetCompatibilityLevel(System.String,System.Int32)">
 <summary>
 Call this method to set the compatibility level of the specified database. As setting this value can result in errors if multiple users are connected
 the call checks the current level first and only updates it, if the current level does not correspond to the desired level
 If you attempt to change the compatibility level on any of the system databases, an argument execption will be thrown.
 </summary>
 <exception cref="T:System.ArgumentException">Thrown if the database specified in <paramref name="databaseName"/> is determined to be a system database by <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseIsSysDb"/></exception>. 
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.GetCompatibilityLevel">
 <summary>
 Call this function to obtain the compatibility level of the database to which you are currently connected.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.GetCompatibilityLevel(System.String)">
 <summary>
 Call this function to obtain the compatibility level of the specified database. Returns 0 if the compatibility level cannot be determined because the database does not exist.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.CompatibilityLevel.SetCompatLevelImplementation(System.String,System.Int32,System.Int32,System.Boolean)">
 <param name="oldlevel">The old level is only passed in for so we can log out the old and the new value before it is changed</param>
 <param name="makeDBSingleUser">This should be false. If SQL exception is thrown, this method will make a recursive call to itself with this parameter set to true in order to obtain exclusive access to the database</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionFieldsToIgnore">
 <summary>
 This enumerated type can be used to ignore certain fields when comparing connection strings.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionFieldsToIgnore.IgnoreAll">
 <summary>
 If set, all fields specified in the enum will be ignored when comparing connection strings
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionFieldsToIgnore.IgnoreNone">
 <summary>
 Default behavior. All fields will be included in comparison
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionFieldsToIgnore.IgnoreIntegratedSecurity">
 <summary>
 Integrated Security field will be excluded from comparison.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionStringCompare">
 <summary>
 Use this class to compare connection strings. It does a functional comparison, not a plain string comparison. For example, (local) and localhost or 127.0.0.1 would pass the comparison while they would fail if you did a straight string comparison.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionStringCompare.AreEqual(System.String,System.String)">
 <summary>
 Use this class to compare whether connectionStrings are functionally equivalent. For example, Data Source=localhost and Data Source=MyMachine will be treated as the same if MyMachine is the same as localhost>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionStringCompare.AreEqual(System.String,System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.ConnectionFieldsToIgnore)">
 <summary>
 Use this class to compare whether connectionStrings are functionally equivalent. For example, Data Source=localhost and Data Source=MyMachine will be treated as the same if MyMachine is the same as localhost>
 </summary>
 <param name="fieldsToIgnore">If the flag for a field is set, it will not be included in the comparison. This is useful to compare connection strings but leave off security settings. In report server, for example, security is specified as a separate property, not necessarily as part of the original connection string.</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.LogShippingRelation">
 <summary>
 Use this type to indicate whether a database participates in a log shipping relationship with another database. <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DatabaseParticipatesInLogShipping"/>
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.LogShippingRelation.None">
 <summary>
 Indicates that the database does not participate in a log shipping relationship with another database
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.LogShippingRelation.Primary">
 <summary>
 Indicates that the database is the primary database from which log backups are taken and shipped
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.LogShippingRelation.Secondary">
 <summary>
 Indicates that the database is the secondary database to which log backups taken from a primary database are applied on a preset schedule
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.MirroringRelation">
 <summary>
 Use this type to indicate whether a database participates in a mirroring relationship with another database. <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DatabaseParticipatesInMirroring"/>
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.MirroringRelation.None">
 <summary>
 Indicates that the database does not participate in a mirroring relationship with another database. It will also return None if the database is offline.
</summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.MirroringRelation.Primary">
 <summary>
 Indicates that the database is the primary database in a mirroring relationship.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.MirroringRelation.Mirrored">
 <summary>
 Indicates that the database is the mirror of a primary database.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation">
 <summary>
 This Class returns information about the database.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DataFileSize(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Returns the combined size of all data files
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.LogFileSize(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Returns the combined size of all log files
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.TotalSize(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 returns the combined size of all data and log files
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DatabaseParticipatesInLogShipping">
 <summary>
 Returns true if the database participates in a log shipping relationship either as the active or passive database.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DatabaseParticipatesInMirroring">
 <summary>
 Indicates whether the database is part of a mirroring relationship with another database. Please note that if a database is off-line or inaccessible, the mirroring relationship returned will always be <see cref="F:Blackbaud.AppFx.Platform.Automation.SQLServer.MirroringRelation.None"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DatabaseHasUncommittedTransactions">
 <summary>
 Returns true if the current database has uncommitted transactions.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.DatabaseHasUncommittedTransactions(System.String)">
 <summary>
 Can be used to determine whether any database on the current SQL Server has uncomitted transactions
 </summary>
 <param name="databaseToCheck">Name of the database to check. If nothing or empty string is passed in, the current database will be checked.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.ConvertValueToUnit(System.Double,Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Use this function to convert a value specified in KiloBytes to a differt unit of measure.
 </summary>
 <param name="inputValueInKb">Input value in Kilobytes</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.ConvertValueToUnit(System.Int64,Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Use this function to convert a value specified in bytes to a differt unit of measure.
 </summary>
 <param name="inputValueInbytes">Input value in bytes</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.ConvertSizeUnitToString(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 returns the abbreviation commonly used for the size unit specified, such as GB for DbSizeUnit.GigaBytes
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.DatabaseInformation.GetFileGroups">
 <summary>
 Call this function to return a list of file groups for a database
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.Login">
 <summary>
 This class wraps up SQL Server Logins
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.Login.Sid">
 <summary>
 Returns the SID that is returned by sys.server_principals view for the current login
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.Login.IsValid">
 <summary>
 Returns true if <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.Login.Name"/> is not a member of list returned by sp_validateLogins collection. This only applies to WindowsUsers and WindowsGroups. This propery will return true for all other types.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.Login.Delete">
 <summary>
 Returns true if the login was removed and false otherwise. This will remove the current login from any roles or databases it may belong to.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.Login.Delete(System.Boolean)">
 <summary>
 Returns true if the login was removed and false otherwise. This will remove the current login from any roles or databases it may belong to.
 </summary>
 <param name="deep">If true, every database/role on the server will be checked. If the login is a user in that database or a member of a role, it will be removed as a user/member respectively</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.LoginFilter">
 <summary>
 Use this enumerated type to filter which items should be returned in the <see cref="T:Blackbaud.AppFx.Platform.Automation.SQLServer.LoginCollection"/>
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.LoginFilter.All">
 <summary>
 Use this flag to return all server logins regardless of type
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.LoginFilter.WinNTUsersOnly">
 <summary>
 Use this flag to return only logins that are either Windows Users or Windows Groups
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.LoginFilter.InvalidOnly">
 <summary>
 Use this flag to return only logins that are either Windows Users or Windows Groups that have a login record on SQL Server but to not exist as local users or as Activedirectory users any more
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty.BackupCompressionDefault">
 <summary>
 Set to 1 to enable compressed backups, 0 to disable it
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.Value">
 <summary>
 Returns the value that is configured for a server. This may not necessarily be the value that is currently in use: <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.ValueInUse"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.ValueAndValueInUseAreIdentical"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.ValueInUse">
 <summary>
 Returns the value for a property that is currently in use by the server. This may not necessarily be the value that will be in use after a server restart: <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.Value"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.ValueAndValueInUseAreIdentical"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.ValueAndValueInUseAreIdentical">
 <summary>
 Returns true if <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.Value"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.ValueInUse"/> are identical which means that the value that is currently used by the server will be in effect after a restart of the server as well.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.IsDynamcic">
 <summary>
 Dynamic options can be reconfigured without restarting the SQL Server by issuing a RECONFIGURE statement. This will be done automatically by this class where appropriate. Non-Dynamic options require a restart.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.ConfigurationProperty.IsAdvanced">
 <summary>
 Returns true if the property is only visible when running sp_configure if the 'Show Advanced Options' property is set. This only applies when viewing the property through sp_configure. This collection will list out both advanced and standard properties regardless of the 'Show Advanced Options' on the server.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties">
 <summary>
 This class exposes properties that can be set through the sp_configure stored procedure and are stored in the sys.configurations table
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties.PropertyInfo(Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty)">
 <summary>
 Returns all fields relating to a property from the sys.configurations view. If a property is not found because it is not supported on the current version of the server, it returns nothing: <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties.PropertyIsSupportedByCurrentVersion(Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty)"/>. Property values are cached for the life of this class.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties.PropertyInfo(Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty,System.Boolean)">
 <summary>
 Returns all fields relating to a property from the sys.configurations view. If a property is not found because it is not supported on the current version of the server, it returns nothing: <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties.PropertyIsSupportedByCurrentVersion(Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty)"/>
 </summary>
 <param name="refresh">If true, the values will be refreshed by issuing another query against sys.configurations. Otherwise, the cached values will be returned.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties.PropertyIsSupportedByCurrentVersion(Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty)">
 <summary>
 Returns true if the property is found in the sys.configurations view, false otherwise. This value is not cached internally and a SQL statement will be issued every time you call this function.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperties.TranslateConfigurationProperty(Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty)">
 <summary>
 Use this method to obtain the string representation, as required by sp_configure, of property defined in <see cref="T:Blackbaud.AppFx.Platform.Automation.SQLServer.ServerConfigurationProperty"/>
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo">
 <summary>
 Use this class to obtain information about SQL Server properties in XML format. This is useful for logging settings out during a test run or verifying the configuration on a client machine. The class inherits from <see cref="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.TableRecordXML(System.Boolean,System.Boolean,System.Boolean)">
 <param name="useDynamicViews">Calcuates the row count using the dm_db_partition_stats view which is much faster than executing a count(*)</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.DatabaseList(System.String,System.Boolean)">
 <summary>
 Use this function to return a list of databases with their owner in XML format
 </summary>
 <param name="owner">name of owner as returned by suser_sname(owner_sid)</param>
 <param name="excludeOwner">set to true if you want to exlude databases owned by a certain owner</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.ClientName">
 <summary>
 Returns the value of the InstallationName field from the InstallationInfo table of an Infinity database
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.IsInfinityDB">
 <summary>
 Returns the value of the bb_IsBlackbaudDB extended property.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.DatabaseServerProperty(System.String)">
 <summary>
 Returns a string containing the value of the server property requested
 </summary>
 <param name="propertyName">The name of the server property</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.NumberOfDatabasesOwnedBy(System.String,System.Boolean)">
 <summary>
 Returns the number of databases that do not have 'SA' as database owner
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInfo.AddTables(System.Xml.XmlWriter,System.Boolean,System.Boolean)">
 <param name="useDynamicViews">uses Dynamic Management Views to obtain information which is much faster and seems reliable.</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode">
 <summary>
 Use this enumerated type in <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ChangeDatabaseMode(Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode)"/> method to specify whether a database should be single or multi user and whether it should be read-only or read-write.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.SingleUser">
 <summary>
 Puts the database in Single User mode but does not change any other setting. This setting will obtain an exclusive lock on the database. Other users will be kicked off and pending transactions will be roled back.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.MultiUser">
 <summary>
 Puts the database in Multi-User mode but does not change any other settings
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.ReadOnly">
 <summary>
 Puts the database in read-only mode but does not change any other setting
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.ReadWrite">
 <summary>
 Puts the database in read-write mode but does not change any other setting
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.SingleUserReadOnly">
 <summary>
 Puts the database in Single User mode and makes it read only
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.MultiUserReadOnly">
 <summary>
 Puts the database in Multi User mode and makes it read only
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.SingleUserReadWrite">
 <summary>
 Puts the database in Single User mode and makes it read-write
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode.MultiUserReadWrite">
 <summary>
 Puts the database in Multi-User mode and makes it read-write
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType">
 <summary>
 This enum corresponds to the Type column values for the sys.sysobjects table. 
 </summary>
 <remarks></remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes">
 <summary>
 This enumerated type lists some of the numeric error codes returned by <see cref="P:System.Data.SqlClient.SqlException.Number"/>.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.DuplicateValue">
 <summary>
 Raised in response to a key constraint violation
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.ClrDisabledUserCodeCannotBeExecuted">
 <summary>
 Raised in response to an attemt to execute a CLR method when 'clr enabled' is set to 0.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.DatabaseStateCannotBeChangedWhileInUse">
 <summary>
 Raised when you are trying to change the state of the database, such as restoring a snapshot, while the database is being used.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.DataConversionError">
 <summary>
 Returned if one data type cannot be converted to another
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.InvalidCompatibilityLevel">
 <summary>
 Returned by sp_dbcmptlevel if the compabitility level parameter is outside the valid range
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.DefaultSchemaClauseCannotBeUsedwithGroups">
 <summary>
 Returned when you try to add a group as a user with a default schema clause.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.SQLServer.SqlMessageCodes.ServiceBrokerAlreadyExist">
 <summary>
 The Service Broker in database DBNAME cannot be enabled because there is already an enabled Service Broker with the same ID.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance">
 <summary>
 This class contains generic utility functions relating to an instance of SQL Server. If no SQLServer is specified in the contructure, it will connect to the default instance. A database connection is typically required for any of these functions.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CreateFolderResult.FolderNameOnSQLServerHost">
 <summary>
 Returns the name of the folder as it will be required as a parameter to SQL Server functions such as restore database which operate on the host machine of SQL Server only.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CreateFolderResult.FolderNameUNC">
 <summary>
 Return the UNC version of the folder that was created on the host machine of SQL Server.
 </summary>
 <returns>\\SQLServerHost\AdminShare$\FolderName if host of SQL Server is different than computer where this code executes, FolderNameOnSQLServerHost otherwise.</returns>
 <remarks>Always use value when copying files to a SQL Server machine as it will ensure that the code will work both on a local and a remote SQL Server host. Never pass this value to a SQL Server function that requires a path, as SQL Server always requires a local path.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerServiceProperties.MainVersion">
 <summary>
 This is the MainFileVersion number returned by the exe that the SQL Server Service points. It should correspond to the main versions of SQL Server. Some of the early releases of SQL Server 2008 returned 2007 for the FileMainVersion. This is not reflected here. It will always return 2008 when it is Server 2008. <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerServiceProperties.VersionInfo"/> in order obtain the exact file version property.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerServiceProperties.ConnectionString">
 <summary>
 returns a default connection string to this instance. It will connect to the master database by default
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerServiceProperties.ConnectionString(System.String)">
 <summary>
 Use to obtain the connection string to a database on this instance. Integrated security will be assumed.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerServiceProperties.VersionInfo">
 <summary>
 Returns the FileVersionInfo for the exe that the service points to
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.#ctor">
 <summary>
 If no connection information is specified, the default instance on localhost will be used. It multiple instances of SQL Server are installed, it will pick the most recent one.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.#ctor(System.Data.SqlClient.SqlConnection)">
 <summary>
 Supply a valid SQLConnection object. This connection will not be closed when the SQLServerInstance class is disposed. It is up to the caller to free up the resources used by this connection. The class will check whether the connection has been opened and open it the first time it needs it if required.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.FixUpDBName(System.String)">
 <summary>
 This function puts square brackets around the name of a database. It is safe to call this function with a DBNameIn parameter that may already be enclosed in <c>[]</c>. It can be used for any string that needs to be delimited with [].
 </summary>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="DBNameIn"/> is nothing or empty string.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.InstalledInstances(Blackbaud.AppFx.Platform.Automation.CodeExecutionContext)">
 <summary>
 Use this function to get a list of SQL Server which are installed on a given host. This call does not use the SQLServer assemblies installed as part of a SQL Server install and has no external dependencies.
 </summary>
 <param name="context"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultInstance">
 <summary>
 Returns the name of the default SQL Server instance on localhost. It assumes a preference for the most recent version if more than one version of SQL Server is installed.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultInstance(Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerType)">
 <summary>
 Returns the name of the default SQL Server instance on localhost.
 </summary>
 <param name="preferredType">Specify which version of SQL Server you would like to access if multiple versions are installed. If the preferred type is not installed, it will return the next instance that it finds. Be sure to check the return value to validate that type of your preference was returned.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultInstance(System.String)">
 <summary>
 Returns the name of the default SQL Server instance on localhost. It assumes a preference for the most recent version if more than one version of SQL Server is installed.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultInstance(System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerType)">
 <param name="preferredType">Specify which version of SQL Server you would like to access if multiple versions are installed. If the preferred type is not installed, it will return the next instance that it finds. Be sure to check the return value to validate that type of your preference was returned.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultInstance(Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerType)">
 <summary>
 Returns information about the default instance of SQL Server on a given host. 
 </summary>
 <param name="preferredType">Specify which instance you would like to reference if multiple instances are installed. If the preferred Type is not found, it will return the first type that it does find. It is up to the caller to check to see if the installed version is sufficient.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SQLServerList">
 <summary>
 Use this method to obtaina list of SQL Servers on the local network.
 </summary>
 <remarks>Call comboBox1.Items.AddRange(SqlServerList.Servers()) to populate a combo box with a list of SQL Servers</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SysColumnTypeLetter(Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType)">
 <summary>
 Use this function to obtain the letter for the type of an object in the sys.syscolumns table
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultDataPath">
 <summary>
 This property returns the default path used by SQL Server to store data files. This value is stored in the registry on the SQL Server host at HKLM\Software\Microsoft\MSSQLServer\MSSQLServer\DefaultData. If not value is set HKLM\Software\Microsoft\MSSQLServer\MSSQLServer\SQLDataRoot\Data is returned. The code uses xp_instance_regread to look up the value for this property.
 This value can be changed in SQL Server Management Studio by visiting the 'Database Settings' section of the properties dialog.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultDataPathUNC">
 <summary>
 This property returns the DefaultDataPath in UNC format. The regular data path is always returned as a local path in the context of the host machine of SQL Server. The UNC path uses the format \\server\volumne\directory. You can use this path if you have to copy a file to or from a remote SQL Server. Never use this path as an input to a SQL Command, as SQL Server always requires local file paths.
 </summary>
 <remarks>Using the UNC path requires administrator privileges on the SQL Server host, as it maps the local drive to an admin share, such as c$ or e$.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultLogPathUNC">
 <summary>
 This property returns the DefaultLogPath in UNC format. The regular log path is always returned as a local path in the context of the host machine of SQL Server. The UNC path uses the format \\server\volumne\directory. You can use this path if you have to copy a file to or from a remote SQL Server. Never use this path as an input to a SQL Command, as SQL Server always requires local file paths.
 </summary>
 <remarks>Using the UNC path requires administrator privileges on the SQL Server host, as it maps the local drive to an admin share, such as c$ or e$.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.HostMachine">
 <summary>
 Returns the name of the SQL Server Host by querying the SeverProperty('ComputerNamePhysicalNetBios'). If SQL Server is a failover cluster, this call
 will return the physical host, not the virtual server name of the cluster. 
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.HostMachine(System.Boolean)">
 <summary>
 Returns the name of the SQL Server Host by querying the SeverProperty('ComputerNamePhysicalNetBios'). If SQL Server is a failover cluster, this call
 will return the physical host unless you set the value of parameter <paramref name="returnVirtualServerForCluster"/> to true in which case it will query the ServerProperty('MachineName') instead. On a cluster, MachineName will return the name of the virtual server instead of the name of the physical host.
 </summary>
 <param name="returnVirtualServerForCluster">If SQL Server is part of a cluster, set this value to true to obtain the virtual server name. Set it to false, to return the name of the physical machine. If SQL Server is not part of a cluster, it does not matter what you set this value to.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultLogPath">
 <summary>
 This property returns the default path used by SQL Server to store log files. This value is stored in the registry on the SQL Server host at HKLM\Software\Microsoft\MSSQLServer\MSSQLServer\DefaultLog. If not value is set, the DefaultDataPath will be used.
 This value can be changed in SQL Server Management Studio by visiting the 'Database Settings' section of the properties dialog.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultSSISPackagePath">
 <summary>
 This property returns the default path used by SQL Server to store ssis package files.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DefaultSSISPackagePathUNC">
 <summary>
 This property returns the DefaultSSISPackagePath in UNC format.
 </summary>
 <remarks>Using the UNC path requires administrator privileges on the SQL Server host, as it maps the local drive to an admin share, such as c$ or e$.</remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.WindowsTempPath">
 <summary>
 Use this property to obtain the Windows temp path on the host machine of SQL Server. This code uses WMI to connect to the host machine in order to retrieve the environment variable.
 </summary>
 <exception cref="T:System.Management.ManagementException">Thrown if WMI connection to host machine of SQL Server cannot be established.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DBExists(System.String)">
 <summary>
 Use this function to check if a database exists on a given SQL Server instance. In order to check whether a snapshot exists, call <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotExists(System.String)"/> This call will return false for snapshots.
 </summary>
 <param name="DBName">Logical name of the database to existance of which should be verified</param>
 <returns>Returns 0 if the database does not exist or the DBID value from the sysdatabases table otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DeleteDB(System.String)">
 <summary>
 Use this method to drop a database from SQL Server. All existing connections will be closed and the database files will be deleted.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseCreationDate(System.String)">
 <summary>
 Use this property to obtain the creation date of a database from the sys.databases table. The value of this property is not cached and will be looked up every time you call this method.
 </summary>
 <param name="dbName">Name of the database as you see it in SQL Server Explorer</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseCreationDate">
 <summary>
 Use this property to obtain the creation date of the database of the current connection string
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseInformation">
 <summary>
 Use this method to obtain size information about the current database
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseInformation(System.Boolean)">
 <summary>
 Use this method to obtain size information about the current database
 </summary>
<param name="refresh">Set to true if you want to refresh the size information for a database after performing an operation on the database</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection">
 <summary>
 Return the SQLConnection object which can be used to spawn SQLCommand objects. This is a global connection which will remain open until the current instance of this class is disposed. It contains logic that will attempt to re-open this connection if it is closed accidentally by an outside caller who then proceeds to reference properties of this class which require continued database access."
 </summary>
 <exception cref="T:System.Exception">Thrown if the GlobalConnection was closed accidentally and cannot be re-opened because the ConnectionString property is not set.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CreateFolder(System.String)">
 <summary>
 Will create a folder on the host machine of the SQL Server instance. This code will check to see if it is executed on the host machine of the SQL Server or if the directory needs to be created remotely. Always pass in the folder name as a local folder in terms of the SQL Server host machine.
 </summary>
 <returns><see cref="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CreateFolderResult"/></returns>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="folderName"/> is nothing or an empty string or if a UNC path using the \\Host\Folder format. Paths must be specified in the context of the SQL Server host and cannot be network paths.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.RunningProcesses(System.Int32)">
 <summary>
 Returns generic list of type string filled with SPIDs currently running on the server.
 </summary>
 <param name="dbId">DBID of the database</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.InstanceName">
 <summary>
 Returns the instance name of the current SQL Server.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ProcessID">
 <summary>
 Returns the instance name of the current SQL Server.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.NumberOfProcessors">
 <summary>
 Returns the number of physical processors on the current SQL Server.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.NumberOfLogicalProcessors">
 <summary>
 Returns the number of logical processors of a SQL server
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.NewConnection">
 <summary>
 Creates a new connection to the SQL Server and opens it. The caller is responsible for closing this connection down
 </summary>
 <returns>SqlConnection with State set to Open</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.HostIsLocal">
 <summary>
 Returns true if the computer on which SQL Server is hosted is the same as the computer on which this code executes.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.PrimaryDatabaseFileName">
 <summary>
 Gets the database file name associated with PRIMARY filegroup
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ConnectionString">
 <summary>
 Use this property to obtain the current connection string. If you set the property and the new values differs from the old value, any open connections will be closed. 
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.TableExists(System.String)">
 <summary>
 Use this property to determine whether a table exits in current database.
 </summary>
 <param name="tableName">Do not pass in a schema as part of a name, such as [DBO].[TABLENAME] The query will be performed on the name field of the sys.objects table and this function will return true if table by that name is found in any schema.</param>
<exception cref="T:System.ArgumentException">Throw if tableName is empty string or nothing</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.TableRecordCount(System.String)">
 <summary>
 This method uses an optimized table record count instead of doing a select count(*) from table.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExtendedProperty(System.String,System.String)">
 <summary>
 Use this property to access extended properties of a database. If the property does not exist yet, it will be added by the Setter. If it already exists, its value will be updated.
 <para><seealso cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseProperty(System.String)"/></para>
 </summary>
 <param name="propertyName">Name of extended property</param>
 <param name="defaultValue">If the property does not exist, the value supplied here will be returned.</param>
 <returns>Value of property as a string or nothing if property does not exist.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExtendedProperty(System.String)">
 <summary>
 Use this property to access extended properties of a database. If the property does not exist yet, it will be added by the Setter. If it already exists, its value will be updated.
 <para><seealso cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseProperty(System.String)"/></para>
 <para><seealso cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.RemoveExtendedProperty(System.String)"/></para>
 </summary>
 <param name="propertyName">Name of extended property</param>
 <returns>Value of property as a string or nothing if property does not exist.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.RemoveExtendedProperty(System.String)">
 <summary>
 Use this method to remove an extended database property completely, instead of simply setting it to an empty value. <para><seealso cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExtendedProperty(System.String)"/></para>
 </summary>
 <param name="propertyName">Name of the property to be removed.</param>
 <remarks>This method will not throw an error if the property does not exist yet. It will write a trace statement indicating that the property did not exist and return false. Any other error that may be encountered will be re-thrown.</remarks>
 <returns>True if the property was deleted successfully. False, if the property did not exist and could not be deleted.</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseProperty(System.String)">
 <summary>
 Use this property to access properties available through the sp_dbOptions stored procedure. Pass in one of the strings that is displayed when running sp_dbOption without parameters. Do not use this method to access extended properties. 
 <para><seealso cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExtendedProperty(System.String)"/></para>
 <para><seealso cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ConfigurationProperties"/></para>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.IsClustered">
 <summary>
 returns true if SQL Server is part of a cluster <seealso cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.HostMachine"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.EnableCLR">
 <summary>
 Call this method to enable CLR on a SQL Server. It will only execute the code if the CLR is not enabled. It does not matter what database <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ConnectionString"/> points to. A new connection to Master on that server will be established to change the property.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.EnableServiceBroker">
 <summary>
 Call this mehtod to enable service broker on a the database. If will only execute if service broker is not enabled for the particlar database. This method will do nothing if the current database is the MASTER database.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DeleteDatabaseObject(System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType)">
 <summary>
 Use this method to delete a stored procedure. The code checks whether the stored procedure exists and is safe to call without performing this check up front. No error is raised if the stored procedure does not exist. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseObjectExists(System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType)"/> The deletion of dependent objects is not supported at this point.
 <seealso cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DeleteUser(System.String)"/>
 </summary>
 <param name="objectName">Name of the stored procedure. Pass in the fully qualified name, such as [dbo].[StoredProcedureName]. You may also pass in 'objectName' without any qualifiers as long as the object can be found that way.</param>
 <exception cref="T:System.NotImplementedException">Thrown if you pass in an object type whose deletion is not implemented. Only the deletion of a sub-set of object types is supported. Any errors that result from the deletion of the object will bubble up as the original exception.</exception>
 <remarks>If you drop a function, you can pass in any of the function types for the <paramref name="objectType"/> parameter.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseObjectExists(System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType)">
 <summary>
 Call this function to verify whether an object exists. This is done by querying the sys.sysobjects table. To check whether an Index exists, call <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.IndexExists(System.String,System.String)"/>
 </summary>
 <param name="objectName">Name of the object. Both fully qualified names such as [dbo].[ObjectName] and simple names are supported.</param>
 <param name="objectType">Type of the object whose existence you wish to verify.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.IndexExists(System.String,System.String)">
 <summary>
 Call this function to verify whether an object exists. This is done by querying the sys.sysobjects table. To check for other database objects, call <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseObjectExists(System.String,Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType)"/>
 </summary>
 <param name="parentTable">Name of the parent table. Both fully qualified names such as [dbo].[ObjectName] and simple names are supported.</param>
 <param name="indexName">Name of the index whose existence you wish to verify.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQL(System.String)">
 <summary>
 Use this method to execute a non-query SQL statement against the current connection.  The SQL Statement will be executed on the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/> The CommandTimeOut value is 0.
 </summary>
 <param name="sqlStatement">Valid SQL statement</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQL(System.String,System.Boolean)">
 <summary>
 Use this method to execute a non-query SQL statement against the current connection. The CommandTimeOut value is 0.
 </summary>
 <param name="sqlStatement">Valid SQL statement</param>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQL(System.String,System.Boolean,System.Int32)">
 <summary>
 Use this method to execute a non-query SQL statement against the current connection. The SQL statement will be logged with a Trace.WriteLine
 </summary>
 <param name="sqlStatement">Valid SQL statement</param>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
 <param name="commandTimeOut">Specify the timeout value for a command in seconds. 0 is no timeout</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQL(System.String,System.Boolean,System.Int32,System.Boolean)">
 <summary>
 Use this method to execute a non-query SQL statement against the current connection
 </summary>
 <param name="sqlStatement">Valid SQL statement</param>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
 <param name="commandTimeOut">Specify the timeout value for a command in seconds. 0 is no timeout</param>
 <param name="logSQL">Specify true to generate a <see cref="M:System.Diagnostics.Trace.WriteLine(System.Object)"> entry with the complete SQL statement.</see></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteScalarSqlStatement(System.String)">
 <summary>
 Use this function to execute a SQL Statement that returns a scalar value.  The SQL Statement will be executed on the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/>"
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar"/> method</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteScalarSqlStatement(System.String,System.Boolean,System.Int32)">
 <summary>
 Use this function to execute a SQL Statement that returns a SQL statement that returns scalar value.  The SQL Statement will be executed on the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/>"
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar"/> method</returns>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteScalarSqlStatement(System.String,System.Boolean,System.Int32,System.Boolean)">
 <summary>
 Use this function to execute a SQL Statement that returns a SQL statement that returns scalar value.  The SQL Statement will be executed on the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/>"
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar"/> method</returns>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteScalarSqlStatement(System.String,System.Boolean)">
 <summary>
 Use this function to execute a SQL Statement that returns a SQL statement that returns scalar value.  The SQL Statement will be executed on the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/> with a CommandTimeout of 30.
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar"/> method</returns>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQLReader(System.String)">
 <summary>
 Use this function to execute a SQL Statement that returns a list of records. The SQL Statement will be executed on the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/>"
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/> method</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQLReader(System.String,System.Boolean)">
 <summary>
 Use this function to execute a SQL Statement that returns a list of records. 
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/> method</returns>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ExecuteSQLReader(System.String,System.Boolean,System.Boolean)">
 <summary>
 Use this function to execute a SQL Statement that returns a list of records. 
 </summary>
 <param name="sqlStatement">SQL statement that returns a single value</param>
 <returns>Result of the <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/> method</returns>
 <param name="useNewConnection">Set to true if you want to open a new connection to the server to execute the SQL Statement. Set to false if you want to use <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GlobalConnection"/></param>
 <param name="logSQLStatement">If true, a Trade.WriteLine will be issues with the content of the SQL statement</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ColumnExistsInTable(System.String,System.String)">
 <summary>
 Use this function to determine whether a column exists in a table.
 </summary>
 <param name="tableName">Name of the table without any schema prefixes</param>
 <param name="columnName">Name of the column</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ValidateMasterKeyEncryptionPassword(System.String)">
 <summary>
 Use this function to verify that the password is correct for the master key of a database. It will try to open the master key with this password. If the password is incorrect, it will fail.
 </summary>
 <param name="password">Password for master key of database. Length of password is limited to 100 characters.</param>
 <returns>True if master key can be opened with specified password, false if an error is encountered trying to open the master key with the specified password. </returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ChangeDatabaseOwner(System.String)">
 <summary>
 Use this method to change the owner of the current database to a new value. This method will call the sp_changedbowner stored procedure. To retrieve the owner of the current database, call <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseOwner"/>
 </summary>
 <param name="newOwner">Owner of the new database</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.UserExists(System.String)">
 <summary>
 Use this function to determine whether a user exists in the database for the current connection string . The lookup will perform an exact match
 </summary>
 <param name="userName">Name of the user as it appears under Security/Users in SQL Server Management Studio. This value corresponds to the Name field in the sys.database_principals view.</param>
 <returns>true if the user exists, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.LoginExists(System.String)">
 <summary>
 Use this function to determine whether a login exists for the current user on the server
 </summary>
 <param name="loginName">Name of the user as it appears under Security/Users in SQL Server Management Studio. This value corresponds to the Name field in the sys.server_principals view.</param>
 <returns>true if the user exists, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DeleteUser(System.String)">
 <summary>
 Use this method to delete a database user. If the user exists and is deleted, the return value is true. If the user does not exist, the return value is false.
 </summary>
 <param name="userName">Name of the user as it appears under Security/Users in SQL Server Management Studio. This value corresponds to the Name field in the sys.database_principals view.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DeleteLogin(System.String)">
 <summary>
 Use this method to delete a database user. If the user exists and is deleted, the return value is true. If the user does not exist, the return value is false.
 </summary>
 <param name="loginName">Name of the user as it appears under Security/Users in SQL Server Management Studio. This value corresponds to the Name field in the sys.server_principals view.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CreateLogin(System.String)">
 <summary>
 Use this method to create a login for the database server.
 </summary>
 <param name="loginName">The login account name</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CreateDataBaseUser(System.String)">
 <summary>
 Call this function to create a user for the current database. A login will be added for the user if a login does not exist yet.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseOwner">
 <summary>
 Use this property to retrieve the name of the owner of a database. To change the owner of a database, call <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ChangeDatabaseOwner(System.String)"/>"
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.CanConnect">
 <summary>
 Call this funciton to determine whether a connection to the SQL Server can be established. It will use the connection string specified in the constructor.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerType">
 <summary>
 This property will only return SqlServerType.SQLServer2008, SqlServerType.SQLServer2005, or SqlServerType.SQLServer2000. It will never return SQLExpress or Any. The <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerType"/> is also used to identify the type of SQL Server based on the service in <see cref="T:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SqlServerServiceProperties"/> where the two other values are used.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.Logins">
 <summary>
 Returns a collection of all logins on a server. This collection is not cached and will be fetched every time.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.Logins(Blackbaud.AppFx.Platform.Automation.SQLServer.LoginFilter)">
 <summary>
 Returns a collection of all logins on a server. This collection is not cached and will be fetched every time.
 </summary>
 <param name="filter">Indicate which types of logins you want to return</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ChangeDatabaseMode(Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode)">
 <summary>
 Call this method to change the mode of current database to single user or multi user or to make a database read only or read write
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ChangeDatabaseMode(Blackbaud.AppFx.Platform.Automation.SQLServer.UserMode,System.String)">
 <summary>
 Call this method to change the mode of specified database to single user or multi user or to make a database read only or read write
 </summary>
 <param name="databaseToChange">Specify the database to change. [] will be added around the name as needed.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.HostOperatingSystem">
 <summary>
 Call this function to obtain information about the operating system of the computer hosting the current instance of SQL Server. This value is cached. If the existing connection is changed and reset during the life of the current instance, the information will be refreshed.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseIsSysDb">
 <summary>
 Instance method corresponding to the shared <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseIsSysDb"/> function.
 </summary>
 <returns>True, if <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseName"/> is a system database, false otherwise</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.ConfigurationProperties">
 <summary>
 Exposes all Server level configuration properties that can be configured through sp_configured and viewed through sp_configure or the sys.configurations catalog view.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.AddUserToRole(System.String,System.String)">
 <summary>
 Adds a database user role membership
 </summary>
 <param name="userName">The user name to add to the role</param>
 <param name="roleName">The role to assign the user to</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GrantConnectToLogin(System.String)">
 <summary>
 This method will grant connect and TCP rights to a user account.
 </summary>
 <param name="loginName">The Windows login account to grant connect rights to</param>
 <remarks>Solution found here
 http://dbamohsin.wordpress.com/2011/09/06/token-based-server-access-validation-failed-with-an-infrastructure-error/
 </remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.FormatObjectNameForQuery(System.String)">
 <summary>
 Removes schema information and brackets from an object name so it can be used when querying against the name field in the sysobjects table.
 </summary>
 <param name="objectName">Fully qualified object name such as [dbo].[MyObjectName]</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.GetQueryStringForSysObject(Blackbaud.AppFx.Platform.Automation.SQLServer.SqlObjectType)">
 <summary>
 Returns the object type query string to be passed to queries against the type field in the sys.sysobjects table for certain object types
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.VersionSpecificRootDirectory">
 <summary>
 The root path where this SQL Server is installed.
 Read from HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\{sql version number} VerSpecificRootDir
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SetDatabaseOffline">
 <summary>
 sets the current database offline
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.SetDatabaseOffline(System.String)">
 <summary>
 sets the current database offline
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DetachDatabase">
 <summary>
 Use this method to detach the database to which this instance is currently connected.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.#ctor(System.Data.SqlClient.SqlConnection)">
 <summary>
 Supply a valid SQLConnection object. This connection will not be closed when the SQLServerInstance class is disposed. It is up to the caller to free up the resources used by this connection. The class will check whether the connection has been opened and open it the first time it needs it if required.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.EnableDatabaseMail">
 <summary>
 Enable database mail.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.AddMailRole(System.String)">
 <summary>
 Add a mail user account to the msdb DatabaseMailUserRole role
 </summary>
 <param name="databaseMailUser">The account name to assign permissions to</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.DropMailRole(System.String)">
 <summary>
 Remove a mail user account to the msdb DatabaseMailUserRole role
 </summary>
 <param name="databaseMailUser"></param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.EnabledMSDBServiceBroker">
 <summary>
 Enable service broker on MSDB if it isn't enabled already
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.CreateDatabaseMailMaintenanceJobImplementation">
 <summary>
 Create the database mail maintenance job if it doesn't already exist
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.AddAccount(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Add a system mail account and return the account identifier
 </summary>
 <param name="accountName">The name of the account to add</param>
 <param name="smtpServer">The smtp server</param>
 <param name="fromEmailAddress">The email address where the mail will come from</param>
 <param name="displayName">The display name for the email</param>
 <param name="useDefaultCredentials">Specify if the DB mail should run under the SQL Server user</param>
 <param name="userName">The user name to use when sending mail (if not using default credentials)</param>
 <param name="password">The user name password to use when sending mail (if not using default credentials)</param>
 <param name="description">The account description</param>
 <returns>Integer ID of the system mail account</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.AddProfile(System.String)">
 <summary>
 Add a system mail profile and return the profile identifier
 </summary>
 <param name="profileName">The profile name to add</param>
 <returns>IKnteger ID of the system mail profile</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.AddAccountProfile(System.Int32,System.Int32)">
 <summary>
 Associate an account with a profile
 </summary>
 <param name="profileId">The profile identifier</param>
 <param name="accountId">The account identifier</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.AddPrincipalProfile(System.Int32,System.Int32)">
 <summary>
 Associates a database principal to a profile (marking it as a their default)
 </summary>
 <param name="profileId">The profile identifier</param>
 <param name="principalId">The account identifier</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.DeletePrincipalProfile(System.Int32)">
 <summary>
 Delete all the principals entries related to a profile
 </summary>
 <param name="profileID">The profile identifier</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.DeleteAccount(System.Int32)">
 <summary>
 Delete a system mail account
 </summary>
 <param name="accountId">The account identifier</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.DeleteProfile(System.Int32)">
 <summary>
 Delete a system mail profile
 </summary>
 <param name="profileId">The profile identifier</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.GetEmailInformation(System.Int32,System.String@,System.String@)">
 <summary>
 Get information about a system mail account
 </summary>
 <param name="accountId">The account identifier</param>
 <param name="displayName">The display name to get</param>
 <param name="replyAddress">The reply emnail address to get</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.UpdateAccount(System.Int32,System.String,System.String)">
 <summary>
 Update a system mail account
 </summary>
 <param name="accountId">The account identifier</param>
 <param name="displayName">The display name</param>
 <param name="replyAddress">The reply email address</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.GetAccountID(System.String)">
 <summary>
 Returns the ID of the account if it exists. If the account does not exist, it returns 0
 </summary>
 <param name="accountName">The name of the account to look for</param>
 <returns>Integer ID of the account or -1 if none found</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.GetProfileID(System.String)">
 <summary>
 Returns the ID of the account if it exists. If the account does not exist, it returns 0
 </summary>
 <param name="profileName">The name of the profile to look for</param>
 <returns>Integer ID of the account or -1 if none found</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.GetPrincipalID(System.String)">
 <summary>
 Returns the ID of the msdb database principal. If the principal does not exist, it returns 0
 </summary>
 <param name="principalName">The name of the prinicpal to look for</param>
 <returns>Integer ID of the principal or -1 if none found</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.ProfileContainsAccount(System.Int32,System.Int32)">
 <summary>
 Yes/No if a given profile has a account associated with it
 </summary>
 <param name="profileId">The profile identifier</param>
 <param name="accountId">The account identifier</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.ProfileContainsPrincipal(System.Int32,System.Int32)">
 <summary>
 Yes/No if a given profile has a prinicipal associated with it
 </summary>
 <param name="profileId">The profile identifier</param>
 <param name="principalId">The principal identifer</param>
 <returns>Yes/No if they are associated</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.DeleteMailItemsForProfile(System.Int32,System.Boolean)">
 <summary>
 Delete all the mail items for a given profile
 </summary>
 <param name="profileId">The profile identifier</param>
 <param name="sentOnly">Yes/No remove sent only mail items</param>
 <returns>The number of records deleted</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.ConfigureDatabaseMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Configures database mail for a given user, account and profile
 </summary>
 <param name="accountName">The system mail account name</param>
 <param name="profileName">THe system mail profile name</param>
 <param name="databaseMailUser">The user account who will be assigned the database mail role</param>
 <param name="smtpServer">The SMTP server to send mail from</param>
 <param name="fromEmailAddress">The from email address</param>
 <param name="displayName">The email subject display name</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerMail.RemoveDBMail(System.String,System.Int32,System.Int32)">
 <summary>
 Call this function to remove DBMail from the Infinity database and remove all associated profiles and accounts from MSDB. SQLMAIL will not be disabled. Only the artifacts associated with a given client will be removed.
 </summary>
 <param name="databaseMailUser">The database mail user to remove</param>
 <param name="accountId">The account identifier</param>
 <param name="profileId">The profile identifier</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CreateSnapshot">
 <summary>
 Creates a snapshot of SQL Server database. Check the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotName"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotRootFolder"/> the name/location of the snapshot.
 </summary>
 <returns>A collection of files created as part of the snapshot</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CreateSnapshot(System.String)">
 <summary>
 Creates a snapshot of SQL Server database. Check the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotName"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotRootFolder"/> the name/location of the snapshot.
 </summary>
 <param name="snapShotName">Name of the SQL Server snapshot</param>
 <returns>A collection of files created as part of the snapshot</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CreateSnapshot(System.String,System.Boolean)">
 <summary>
 Creates a snapshot of SQL Server database. Check the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotName"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotRootFolder"/> the name/location of the snapshot.
 </summary>
 <param name="snapShotName">Name of the SQL Server snapshot</param>
 <param name="overwriteExistingFiles">Indicates whether or not existing shapshot files on disk should be deleted before creating a new snapshot. Default is False</param>
 <returns>A collection of files created as part of the snapshot</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CreateSnapshot(System.String,System.String)">
 <summary>
 Creates a snapshot of SQL Server database. Check the <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotName"/> and <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotRootFolder"/> the name/location of the snapshot.
 </summary>
 <param name="snapShotName">Name of the SQL Server snapshot. If this value is nothing or string.empty, the name will be derived from the underlying database and a time stamp.</param>
<param name="snapshotRootFolder">If this value is string.empty or nothing, a folder name will be derived based on the location of the underlying database files. If a root folder is passed in, a subfolder with the snapshot name will be created within the root folder and all snapshot files will be placed in this sub-folder. If you want to make sure that all snapshot files are created in the same location, pass in a folder name. Otherwise, the snapshot files will be distributed the same way the source files are and may end up spanning multiple disks or LUNs.</param>
 <returns>A collection of <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation"/> objects containing information about all the files generated as part of the snapshot.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.RestoreSnapshot">
 <summary>
 This will restore the most recent snapshot of a database. If more than one snapshots exist, all but the most recent ones will be deleted, as SQL Server does not allow to restore from a snapshot if there are multiple snapshots. No error will be raised if no snapshot is found. Check <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotCollection"/>.Count or check to see if <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.MostRecentSnapshot"/> returns a value.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.RestoreSnapshot(System.String)">
 <summary>
 Restores from a saved SQL Server snapshot. If multiple snapshots exists, all snapshots except for the snapshot to be restored will be deleted. Otherwise, the snapshot cannot be restored.
 </summary>
 <param name="snapshotName">Name of SQL Server snapshot that needs to be restored</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.RestoreSnapshot(System.String,System.String,System.Boolean)">
 <summary>
 Restores from a saved SQL Server snapshot. 
 </summary>
 <param name="snapshotName">Name of SQL Server snapshot that needs to be restored</param>
 <param name="sourceDatabaseName">Specify the name of the database that is the underlying source for the snapshots</param>
 <param name="failIfMultipleSnapshotsExist">In order to restore a snapshot, it is necessary to delete all other snapshots except for the snapshot to be restored. If the value of this property is set to false, an error will be raised if more than one snapshot exists. Otherwise, all other snapshots will be deleted.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.DeleteSnapshot">
 <summary>
Call this method to delete the most recent snapshot associated with the database in <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseName"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.DeleteSnapshot(System.String)">
 <summary>
Call this method to delete the most recent snapshot associated with the database in <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseName"/>
 </summary>
 <param name="snapShotName">Name of the snapshot that needs to be deleted</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.DeleteSnapshot(System.String,System.String)">
 <summary>
 Drop the specified SQLServer snapshot
 </summary>
 <param name="snapShotName">Name of the snapshot that needs to be deleted</param>
<param name="sourceDatabaseName">Specify the name of the source database underlying the snapshot.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.DeleteAllSnapshots">
 <summary>
 Drops all the SQLServer snapshots
 </summary>
 Get a list of all snapshots for the given database from the table sys.databases
 and drops them
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.DeleteAllSnapshots(System.String)">
 <summary>
 Use this method to delete a snapshot that is associated with a database other than the database you are currently connected to.
 </summary>
 <param name="sourceDatabaseName">Name of the source database underlying the snapshots</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotExists(System.String,System.Int32)">
 <summary>
 Function gets a list of all snapshots for the given database from the table sys.databases and verifies that the specified snapshot exists in that collection
 </summary>
 <param name="sourceDatabaseID">Obtain the ID by calling <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DBExists(System.String)"/>This is only necessary if the snapshot is associated with a database other than what is returned by <see cref="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerInstance.DatabaseName"/></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotExists(System.String)">
 <summary>
 Function gets a list of all snapshots for the given database from the table sys.databases and verifies that the specified snapshot exists in that collection
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotRootFolder">
 <summary>
 Returns the folder that contains the SQL Server snapshot. This is returned as a local folder in the context of the SQL Server host, not as a UNC path if the SQL Server host is remote. Please note that snapshot files may be distributed over several folders. The return value of <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CreateSnapshot"/> provides a read only collection of <see cref="T:Blackbaud.AppFx.Platform.Automation.PathHelpers.PathInfomation"/> objects for each file that is created as part of the snapshot.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotName">
 <summary>
 Returns the name of the most recently created snapshot. If <see cref="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CreateSnapshot"/> was called with a parameter for Snapshot name, it will return the value passed in. Otherwise, it will return an auto-generated name that is based on the database name followed by a time stamp.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotName(System.Boolean)">
 <summary>
 Call this from CreateSnapShot in order to get a default name. This property should remain private. There is no point for outside callers to set the Refresh flag.
 </summary>
 <param name="refresh">true in order to refresh the name, false to return the existing variable if it is already set.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.SnapshotCollection(System.String)">
 <summary>
Returns a list of all snapshots saved for the given database
 </summary>
 <param name="databaseName">Name of the database</param>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.MostRecentSnapshot">
 <summary>
 Returns the name of the most recent snapshot for a database
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.InstanceSupportsSnapshots">
 <summary>
 Call this property to determine whether snapshots are supported on the current instance of SQL Server. Snapshots require the Enterprise or Developer edition and are only supported in version 2005 or higher.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerSnapshot.CalculateSizeOnDiskInKbOfSnapshot(System.String)">
 <summary>
 Calculates the SizeOnDisk size of a snapshot. The Size property of a snapshot always matches the overall size of the database. It does not measure how much space the snapshot actually takes up on disk.
 </summary>
 <param name="snapshotName">If nothing or string.empty, the most recent snapshot will be used.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.AutoConfigureTempDB">
 <summary>
 Auto configures Temp DB with a minimum size of 10 MB.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.AutoConfigureTempDB(System.Int32)">
 <param name="recommendedTempDBSize">Specify a value in MB that should be used for the tempDB. If the current connection string points to a non system database, the code will take the size of the current database and divide it by the recommended size value and the number of processors and use it as the size. If the connection string points to a system database, the value that is passed in through this parameter will be used.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.AutoConfigureTempDB(System.String)">
 <param name="tempDBLocation">specify an empty string to put the location of the temp database in the location of the current temp database.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.AutoConfigureTempDB(System.Int32,System.String)">
 <param name="recommendedTempDBSize">Specify a value in MB that should be used for the tempDB. If the current connection string points to a non system database, the code will take the size of the current database and divide it by the recommended size value and the number of processors and use it as the size. If the connection string points to a system database, the value that is passed in through this parameter will be used.</param>
 <param name="tempDBLocation">specify an empty string to put the location of the temp database in the location of the current temp database.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.AutoConfigureTempDB(System.Int32,System.String,System.Int32)">
 <param name="recommendedTempDBSize">Specify a value in MB that should be used for the tempDB. If the current connection string points to a non system database, the code will take the size of the current database and divide it by the recommended size value and the number of processors and use it as the size. If the connection string points to a system database, the value that is passed in through this parameter will be used.</param>
 <param name="tempDBLocation">specify an empty string to put the location of the temp database in the location of the current temp database.</param>
 <param name="growthInMb">Specify 0 to use the default growth of 10%. Otherwise, specify value in Mb.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.RecommendedTempDBSize">
 <summary>
 Indicates the recommended size in MB
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.TempDBLocation">
 <summary>
 returns the location of the current temp DB if nothing is specified
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.SQLServer.SQLServerTempDB.ComputeSQLServerDBSize">
 <summary>
 returns size of database in MB
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.SetDatabaseConnection(System.String,System.String,Blackbaud.AppFx.Platform.Automation.ReportServer.AuthenticationType,System.String,System.String)">
 <summary>
 Sets the report server database connection to a particular report server database.
 </summary>
 <param name="serverName">The name of the SQL Server instance that is used to host the report server database.</param>
 <param name="databaseName">The name of the report server database.</param>
 <param name="authentication">The authentication type used (Windows = require a windows username and password, SQLServer = requires a SQL username and password, WindowsService = requires no username and password)</param>
 <param name="userName">The Windows or SQL account name used to connect to the report server database.</param>
 <param name="password">The Windows or SQL password used to connect to the report server database.</param>
 <remarks>http://msdn.microsoft.com/en-us/library/ms155102.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.SetManagerVirtualDirectory(System.String)">
 <summary>
 Set the virtual directory for the report manager URL.
 </summary>
 <param name="virtualDirectoryName">The name of the virtual directory.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.SetWebServiceVirtualDirectory(System.String)">
 <summary>
 Set the virtual directory for the report web service URL.
 </summary>
 <param name="virtualDirectoryName">The name of the virtual directory.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.RemoveManagerURL(System.Int32,System.Boolean)">
 <summary>
 Remove the report manager URL binding.
 </summary>
 <param name="secure">Indicates if the URL is secure or not.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.RemoveWebServiceURL(System.Int32,System.Boolean)">
 <summary>
 Remove the report web service URL binding.
 </summary>
 <param name="secure">Indicates if the URL is secure or not.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.ReserveManagerURL(System.Int32,System.Boolean)">
 <summary>
 Reserve the report manager URL binding.
 </summary>
 <param name="secure">Indicates if the URL is secure or not.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.ReserveWebServiceURL(System.Int32,System.Boolean)">
 <summary>
 Reserve the report web service URL binding.
 </summary>
 <param name="secure">Indicates if the URL is secure or not.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.BackupEncryptionKey(System.String)">
 <summary>
 Backs up the encryption key for the specified report server instance. The encryption key is stored encrypted with a password.
 </summary>
 <returns>An array containing the encrypted encryption key.</returns>
 <remarks>http://msdn.microsoft.com/en-us/library/ms155048.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.RestoreEncryptionKey(System.Byte[],System.String)">
 <summary>
 Reapplies the specified encryption key to the report server database.
 </summary>
 <param name="encryptionKey">An array containing the encrypted encryption key.</param>
 <remarks>http://msdn.microsoft.com/en-us/library/ms153589.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.DeleteEncryptionKey">
 <summary>
 Deletes the encryption keys from the report server database.
 </summary>
 <remarks>http://msdn.microsoft.com/en-us/library/ms155392.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.ReencryptSecureInformation">
 <summary>
 Generates a new encryption key and re-encrypts all secure information in the catalog using this new key.
 </summary>
 <remarks>http://msdn.microsoft.com/en-us/library/ms154693.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.DeleteEncryptedInformation">
 <summary>
 Deletes the encrypted information from the report server database.
 </summary>
 <remarks>http://msdn.microsoft.com/en-us/library/ms155026.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.StartService">
 <summary>
 Start the reporting services service
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.StopService">
 <summary>
 Stop the reporting services service
 </summary>    
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.RestartServiceState">
 <summary>
 Reset the service state to initialize the report server
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.GenerateDatabaseCreationScript(System.String)">
 <summary>
 Generates a SQL Script that can be used to create a report server database.
 </summary>
 <param name="databaseName">A string containing the name of the report server database to create.</param>
 <returns> A string containing the generated SQL script.</returns>
 <remarks>http://msdn.microsoft.com/en-us/library/ms152823.aspx</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ReportServer.GenerateDatabaseRightsScript(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Generates a SQL Script that can be used to grant a user rights to the report server database and other databases required for a report server to run. The caller is expected to connect to the SQL Server database server and execute the script.
 </summary>
 <param name="userName">The user name or Windows security identifier (SID) of the user to which the script will grant rights.</param>
 <param name="databaseName">The database name to which the script will grant access to the user.</param>
 <param name="isRemote">A Boolean value to indicating whether the database is remote from the report server.</param>
 <param name="isWindowsUsername">A Boolean value indicating whether the specified user name is a Windows user or a SQL Server user.</param>
 <returns>A string containing the generated SQL Server script.</returns>
 <remarks>http://msdn.microsoft.com/en-us/library/ms155370.aspx</remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.TerminalServices">
 <summary>
 This class wraps up functionality required to establish a terminal services session to a remote computer
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.#ctor(System.String)">
 <summary>
 A profile for this computer will be created in <see cref="P:Blackbaud.AppFx.Platform.Automation.TerminalServices.ProfilePath"/>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.#ctor(System.String,System.String)">
 <summary>
 A profile for this computer will be created in <see cref="P:Blackbaud.AppFx.Platform.Automation.TerminalServices.ProfilePath"/>.
 </summary>
 <param name="userName">The name of the user will be written to the profile.</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.TerminalServices.TerminalServicesPath">
 <summary>
 Returns the path where the Terminal Services Program is located.
 </summary>
 <exception cref="T:System.IO.IOException">Thrown if it cannot locate mstsc.exe in <see cref="F:System.Environment.SpecialFolder.System"/></exception>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.TerminalServices.ProfilePath">
 <summary>
 Returns the path where Terminal Services Profiles are stored. This maps to <see cref="F:System.Environment.SpecialFolder.LocalApplicationData"/>\TSProfiles
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.Start">
 <summary>
 Call this method to launch a Terminal Services Session for the computer specified in the constructor.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.Start(System.Boolean)">
 <summary>
 Call this method to launch a Terminal Services Session for the computer specified in the constructor.
 </summary>
<param name="connectToConsole">If true, the /console flag will be passed to the mstsc.exe when the session is started.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.EditConnectionFile">
 <summary>
 Call this method to bring up the standard Terminal Services GUI to edit the profile. If the profile for the computer does not exist yet, it will be created.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.DeleteProfile">
 <summary>
 Call this method to delete <see cref="P:Blackbaud.AppFx.Platform.Automation.TerminalServices.ProfileName"/> for the computer. If the profile does not exist yet, no exception will be thrown.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.TerminalServices.DeleteProfile(System.Boolean,System.String)">
 <summary>
 Call this method to delete <see cref="P:Blackbaud.AppFx.Platform.Automation.TerminalServices.ProfileName"/> for the computer. If the profile does not exist yet, a message box will be shown if <paramref name="prompt"/> is true. 
 </summary>
 <param name="prompt">If true, a message box will be shown before the profile is deleted and after the profile was successfully deleted. If the profile does not exist, a message box will be shown indicating that the profile does not exist. If false, the profile will be deleted without prompts. If the profile does not exist, the call is simply ignored. No exception will be thrown.</param>
 <param name="title">Specify a title to be shown in the message box. If prompt is false, this value is ignored. If prompt is true and an empty string or nothing is passed in for this value, the Application Name will be shown.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateStringParameter(System.String,System.String)">
 <summary>
 Validates that len(ParameterValue) evaluates to > 0. If not, an ArgumentException is thrown.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateEmail(System.String)">
 <summary>
 Validates the string passed in via the <paramref name="emailStringToValidate"/> to make sure it is a valid email address. It will handle about 99% of the email addresses. 
 <param name="emailStringToValidate">Email address to be validated.</param>
 <remarks>The regular expression was obtained from the following link: http://www.regular-expressions.info/email.html </remarks>
 <exception cref="T:System.ArgumentException">thrown if <paramref name="emailStringToValidate"/> fails to validate or is empty.</exception>
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateMinMax(System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Use this method to validate whether a property is within a given range.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateFileName(System.String,System.String)">
 <summary>
 Use this method to validate that the file name that is passed in actually exists.
 </summary>
 <param name="parameterName">Name of the parameter to be validated</param>
 <param name="fileName">File to check for</param>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName"/> is an empty string or nothing</exception>
 <exception cref="T:System.IO.FileNotFoundException">Thrown if <paramref name="fileName"/> does not exist.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateDirectory(System.String,System.String)">
 <summary>
 Use this method to validate that the directory that is passed in actually exists.
 </summary>
 <param name="parameterName">Name of the parameter to be validated</param>
 <param name="directoryName">Directory to check for</param>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="directoryName"/> is an empty string or nothing</exception>
 <exception cref="T:System.IO.FileNotFoundException">Thrown if <paramref name="directoryName"/> does not exist.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateGuid(System.String,System.String)">
 <summary>
 Use this method to validate that a parameter value that was passed as a string represents a valid GUID.
 </summary>
 <param name="parameterName">Name of the parameter to be validated</param>
 <param name="guidAsString">Guid to be validated in string format.</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateGuid(System.String,System.Guid)">
 <summary>
 Use this method to validate that GUID contains a value and is not guid.empty
 </summary>
 <param name="parameterName">Name of the parameter to be validated</param>
 <param name="guidValue">Guid to be validated</param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateUri(System.String,System.String)">
 <summary>
 Validates that an instance of <see cref="T:System.Uri"/> can be created from the string
 </summary>
 <param name="parameterName">Name of the parameter to be validated</param>
 <param name="parameterValue">parameter value to be validated</param>''' <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.StringIsValidUri(System.String)">
 <summary>
 Call this function if you want to test whether a string can be converted into a <see cref="T:System.Uri"/>
 </summary>
 <param name="value">String to be validated</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.StringIsValidIPAddress(System.String)">
 <summary>
 Use this function to determine if a string is a valid IP address. This function uses a regular expression to validate that a string follows the IP address format. It does not validate whether the IP address is pingable or actually exists. It does validate the numbers to make sure none of them exceed 255.
 </summary>
 <param name="inputString">String to verify</param>
 <returns>True if string conforms to the IP address format, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.StringIsGuid(System.String)">
 <summary>
 Call this function to validate whether a string can be converted into an object of type <see cref="T:System.Guid"/>
 </summary>
 <param name="value">string to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.StringIsValidEmail(System.String)">
 <summary>
 Call this function to validate whether a string is a valid email address 
 </summary>
 <param name="value">string to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.StringIsValidInteger(System.String)">
 <summary>
 Call this function to validate whether a string can be converted to an integer
 </summary>
 <param name="value">string to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateMinMax(System.String,System.String,System.Int32,System.Int32)">
 <summary>
 Use this method to validate whether a property is within a given range.
 </summary>
 <param name="allowedMaxLength">Maxium length for string</param>
 <param name="requiredMinLength">Minimum Length for string. If requiredMinLength=0, the validation will not fail if the string is nothing or empty</param>
 <exception cref="T:System.ArgumentOutOfRangeException"></exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.ValidationMethods.ValidateActiveDirectoryUserOrGroupName(System.String,System.String)">
 <summary>
 Use this method to validate that the value does not ctonain any illegal characters that are not allowed in user or group names
 </summary>
 <param name="parameterName">Name of parameter</param>
 <param name="parameterValue">Value of parameter</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Thrown if parameterValue contains illegal characters</exception>
 <exception cref="T:System.ArgumentException">Throw in parameterValue is nothing or empty string.</exception>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable._isSystemVariable">
 <summary>
 Indicates whether the variable was found at the user or the system level. This value will always return true if _checkSystemVariables is true
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.#ctor">
 <summary>
 This class can only be created with a parameterized friend constructor
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.User">
 <summary>
 Returns the name of the user to which the system variable applies. Returns 'System' if the variable is a system variable.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.IsSystemVariable">
 <summary>
 Returns true if the variable was found at the system level and false if the variable was found at the user level.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.UserIsCurrentUser">
 <summary>
 Returns true if the user name passed in corresponds to the credentials of the user executing the code. You can also look up variables for users different than the user running the code
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.Name">
 <summary>
 Returns the name of the environment variable
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.Value">
 <summary>
 Returns the value of the environment variable. Path values will automatically be expanded.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable.FixUpUserAndVariableProperites">
 <summary>
 This is a utility function which will return the correct environment variable name and set a few flags to indicate whether
 this is a local or remo user. 
 </summary>
 <returns>Variable Name. For at least one variable, the name may be changed.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.IPAddress.ToString(System.Boolean)">
 <summary>
 Returns a formatted string with IPAddress;SubNetMask. If XML is specified, it will put the return value in XML format
 </summary>
 <param name="returnAsXml">If true, the return value will be put into XML format.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.MicrosoftDNS.RemoveHostEntries(System.String)">
 <summary>
 Removes all DNS records for the given host
 </summary>
 <param name="hostname">The FQDN of the host to remove</param>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryReturnValues.WrongKeyType">
 <summary>
 returned when trying to call GetDWord and the key is a string, for example
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryReturnValues.KeyNotFound">
 <summary>
 returned when the supplied key cannot be found
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.GetStringValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String)">
 <summary>
 Returns a value from the registry. Values enclosed in % will be expanded automatically.
 </summary>
 <param name="hive"></param>
 <param name="subKey"></param>
 <param name="valueName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.GetStringValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String,System.String)">
 <summary>
 Returns a value from the registry. Values enclosed in % will be expanded automatically.
 </summary>
 <param name="hive"></param>
 <param name="subKey"></param>
 <param name="valueName"></param>
 <param name="defaultValue">Specify the default value to return if no value is found in the registry.</param>
 <returns></returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.GetDWordValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String)">
 <summary>
 Use this function to retrieve a registry value of REG_DWORD. A default value of 0 is assumed.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.GetDWordValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String,System.Int32)">
 <summary>
 Use this function to retrieve a registry value of REG_DWORD. You may pass in a default value to return if the key does not exist.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.GetMultiStringValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String)">
 <summary>
 Use this function to retrieve a registry value of REG_MULTI_SZ. If the key doesn't exist Nothing will be returned.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.SetStringValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String,System.String)">
 <summary>
 Use this to set a REG_SZ registry key
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.SetDWordValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String,System.Int32)">
 <summary>
 Use this to set a REG_DWORD registry key
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.SetMultiStringValue(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String,System.String[])">
 <summary>
 Use this to set a REG_MULTI_SZ registry key
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.ExpandSystemEnvironmentVariable(System.String)">
 <summary>
 Call this method to expand an environment variable defined as REG_EXPAND_SZ in the registry at the system level.
 </summary>
 <param name="variableName">Name of the environment variable</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.ExpandUserEnvironmentVariable(System.String,System.String)">
 <summary>
 Call this method to expand an environment variable defined as REG_EXPAND_SZ at the user level. Use <see cref="T:Blackbaud.AppFx.Platform.Automation.EnvironmentVariable"/> instead of calling this class directly to make sure the things like %UserProfile% are handled properly.
 </summary>
 <param name="variableName">Name of environment variable</param>
 <param name="user">Name of user</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.ExpandUserProfile(Blackbaud.AppFx.Platform.Automation.Security.User)">
 <summary>
 This function will correctly expand any environment strings whose value contains %UserProfile% if the user executing the code is not the current user
 </summary>
 <param name="userToCheck">pass in the the user object <see cref="T:Blackbaud.AppFx.Platform.Automation.Security.User"/> for which the %UserProfile% string should be expanded.</param>
 <returns></returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.ExpandEnvironmentString(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String)">
 <summary>
 Call this function to expand an environment string. This will not handle %UserProfile% correctly.
 </summary>
 <param name="Hive"></param>
 <param name="subKey"></param>
 <param name="valueName">name of the value as it appears in regEdit</param>
 <returns><see cref="T:System.String"/></returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.ExpandEnvironmentString(Blackbaud.AppFx.Platform.Automation.WMI.Registry.WMIRegistryHive,System.String,System.String,System.String)">
 <summary>
 Call this function to expand an environment string. This will not handle %UserProfile% correctly.
 </summary>
 <param name="Hive"></param>
 <param name="subKey"></param>
 <param name="valueName">name of the value as it appears in regEdit</param>
 <param name="valueInRegistry">if you have already retrieved the value from the registry, pass it in. Otherwise, the class will have to look it up.</param>
 <returns><see cref="T:System.String"/></returns>
 <remarks></remarks>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException">Thrown if the value of the registry key on a remote machine contains %UserProfile% as well as another %value% that needs to be expanded.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.OpenRegistry(System.String)">
 <summary>
 This call does not use WMI. It uses the native .Net functionality to access the registry. Call this to return the CurrentUser hive in the registry. It is up to the caller to dispose of the RegistryKey value returned.
 </summary>
 <param name="computerName">Pass in nothing, an empty string for local host.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Registry.OpenRegistry(System.String,Microsoft.Win32.RegistryHive)">
 <summary>
 This call does not use WMI. It uses the native .Net functionality to access the registry. Call this to return the hive specified in <paramref name="hive"/>. It is up to the caller to dispose of the RegistryKey value returned.
 </summary>
 <param name="computerName">Pass in nothing, an empty string for local host</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32NetWorkAdapterConfiguration">
 <summary>
 Use this class to obtain information about network adapters that are bound to TCP/IP.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32NetWorkAdapterConfiguration.KeepAliveTimeInMilliseconds">
 <summary>
 The KeepAliveTime property indicates how often the TCP attempts to verify that an idle connection is still intact by sending a Keep Alive Packet. A remote system that is reachable will acknowledge the keep alive transmission. Keep Alive packets are not sent by default. This feature may be enabled in a connection by an application. Default: 7,200,000 (two hours).
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32NetWorkAdapterConfiguration.KeepAliveInterval">
 <summary>
 Interval separating Keep Alive Retransmissions until a response is received. After a response is received, the delay until the next Keep Alive Transmission is again controlled by the value of KeepAliveTime. The connection will be aborted after the number of retransmissions specified by TcpMaxDataRetransmissions have gone unanswered. Default: 1000, Valid Range: 1 - 0xFFFFFFFF
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32NetWorkAdapterConfiguration.Audit(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter)">
 <summary>
 Use this method to create an XML output file that contains network adapter and IP address information as long as any bindings of the IP to a web site.
 </summary>
 <param name="myWriter">XML writer to which the output should be written</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32NetWorkAdapterConfiguration.Audit(Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter,System.Boolean,System.String[])">
 <summary>
 Use this method to create an XML output file that contains network adapter and IP address information 
 </summary>
 <param name="myWriter">XML writer to which the output should be written</param>
 <param name="includeIISIpMappings">Set to true in order to include the web site Id to which an IP address may be bound</param>
 <param name="blankAttributeFieldsToAdd">Supply a string array of blank attribute fields that can be added to the output. This is useful if you want to add mapping fields and then use the output as input for another task. By adding the fields here, you can edit and persist changes to the XML file in a program such as Excel and then supply the changed XML file as input to another automated process.</param>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues">
 <summary>
 The OSType values correspond to the flags listed for OSType in the Win32_OperatingSystem documentation. Only relevant OS types are included in this type.
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.WinXP">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is Windows XP
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win2000">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is Windows 2000
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win2003">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is Windows Server 2003
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.WinVista">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is Windows Vista
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.WinNT35">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is NT 3.5
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.WinNT40">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is NT 4.0
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win2008">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS Windows Server 2008 (Longhorn)
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win7">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS = Windows 7
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win2008R2">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS = Window Server 2008 R2
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win2012">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS = Window Server 2012
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win8">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS = Windows 8
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win2012R2">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS = Window Server 2012 R2
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.Win8Dot1">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS = Windows 8.1
 </summary>
</member>
<member name="F:Blackbaud.AppFx.Platform.Automation.WMI.OSTypeValues.UnknownNewerVersion">
 <summary>
 Extension of Win32_OperatingSystem OSType value returned when OS is newer than any in the list
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem">
 <summary>
 This class wrapps up the Win32_Operatingsystem WMI class. It is accessible through an instance of WMIUtilities. Check the Platform SDK for complete documentation of the underlying WMI class: http://msdn2.microsoft.com/en-us/library/aa394239.aspx
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem.Platform">
 <summary>
 returns a System.PlatformID value that is also exposed by <see cref="T:System.OperatingSystem"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem.OSType">
 <summary>
 This property enhances the native WMI OSType property in that it provides more OSTypes. You can use this property to determine all major versions of Windows.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem.Version">
 <summary>
 Returns the version number of the operating system, such as 4.0
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem.BuildNumber">
 <summary>
 Build number of an operating system. It can be used for more precise version information than product release version numbers.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem.GenericWinOSProperty(System.String)">
 <summary>
 Use this property to access any properties of the Win32_OperatingSystemClass that are not explicitly declared in this wrapper.
 </summary>
 <param name="propertyName">Name of property as defined in the Win32_OperatingSytemClass documentation </param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32OperatingSystem.CSDVersion">
 <summary>
 The CSDVersion property contains a null-terminated string, that indicates the latest Service Pack installed on the computer system. If no Service Pack is installed, the string is NULL. For computer systems running Windows 95, this property contains a null-terminated string that provides arbitrary additional information about the operating system. Example: Service Pack 3.
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile">
 <summary>
 This class wrapps up the Win32_PageFileSetting and Win32_PageFileUsage WMI class. It is accessible through an instance of WMIUtilities. Check the Platform SDK for complete documentation of the underlying WMI class: http://msdn2.microsoft.com/en-us/library/aa394239.aspx
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.InitialSizeInMb">
 <summary>
 This value will return 0 for dynamic page files.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.MaximumSizeInMb">
 <summary>
 This value will return 0 for dynamic, system-managed page files.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.Location">
 <summary>
 Returns the file name and path of the page file
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.AllocatedBaseSizeInMb">
 <summary>
 Actual amount of disk space allocated for use with this page file. This value corresponds to the range established in Win32_PageFileSetting under the InitialSize and MaximumSize properties, set at system startup.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.CurrentUsageInMb">
 <summary>
 Amount of disk space currently used by the page file.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.PeakUsageInMb">
 <summary>
 Highest Usage of Page File in Mb
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.SetSystemManaged">
 <summary>
 Change the page file to be system managed if it isn't already
 </summary>
 <returns>Yes/No if the system needs to reboot or not after making this change</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.SetCustomManaged(System.Int32,System.Int32)">
 <summary>
 Change the page file to be a custom managed if it isn't already
 </summary>
 <returns>Yes/No if the system needs to reboot or not after making this change</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.SetMaximumSize(System.Int32)">
 <summary>
 Set the maximum size of the page file by a certain amount
 </summary>
 <param name="maximumSize">The amount of MBs</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.SetInitialSize(System.Int32)">
 <summary>
 Set the initial size of the page file by a certain amount
 </summary>
 <param name="initialSize">The amount of MBs</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.IncreaseMaximumSize(System.Int32)">
 <summary>
 Increase the maximum size of the page file by a certain amount
 </summary>
 <param name="incrementAmount">The amount of MBs that you want to increase by (decrease if negative)</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.IncreaseInitialSize(System.Int32)">
 <summary>
 Increase the initial size of the page file by a certain amount
 </summary>
 <param name="incrementAmount">The amount of MBs that you want to increase by (decrease if negative)</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.IsSystemManagedPageFiles(Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue)">
 <summary>
 Check if the system is set to manage all pages files across all drives
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32PageFile.SetSystemManagedPageFiles(Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Set the system setting for managing all pages files across all drives
 </summary>
 <param name="systemManaged">Yes/No to set it the system to manage all page files</param>
 <param name="initalSize">If setting <paramref name="systemManaged">systemManaged</paramref> to no, then you can specify the initial size page file size, default is 0 which means the individual page file is system managed</param>
 <param name="maximumSize">If setting <paramref name="systemManaged">systemManaged</paramref> to no, then you can specify the maximum size page file size, default is 0 which means the individual page file is system managed</param>
 <returns>Yes/No if the system needs to reboot or not</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Process.CreationDate">
 <summary>
 Use this property to obtain the date/time the process started executing
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Process.ReadTransferCount(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Amount of data read.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Process.WorkingSetSize(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Amount of memory in bytes that a process needs to execute efficiently—for an operating system that uses page-based memory management. If the system does not have enough memory (less than the working set size), thrashing occurs. If the size of the working set is not known, use NULL or 0 (zero). If working set data is provided, you can monitor the information to understand the changing memory requirements of a process
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Process.WriteTransferCount(Blackbaud.AppFx.Platform.Automation.SQLServer.DbSizeUnit)">
 <summary>
 Amount of data written.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Process.WriteOperationCount">
 <summary>
 Amount of data written.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJob.Create(Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue,System.String,System.DateTime,System.UInt32@)">
 <summary>
 Create a Windows scheduled job task to run a single command a certain time
 </summary>
 <param name="wmiConnection">The WMI connection provided by WMIUtilities</param>
 <param name="command">The full command path with parameters that you want to run</param>
 <param name="startTime">The start DateTime when you want to run this command <example>DateTime.Now.AddMinutes(1)</example></param>
 <param name="jobId">The ID given to the created scheduled job</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJobReturnValue">Win32ScheduledJobReturnValue</see> result</returns>
 <remarks>When selecting the start time, don't use DateTime.Now if you want to fire it immediatly. Instead use a minute later or else the job likely won't get fired ever.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJob.Create(Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue,System.String,System.DateTime,System.UInt32[],System.DayOfWeek[],System.UInt32@)">
 <summary>
 Create a Windows scheduled job task to run a single command a certain time with a given schedule
 </summary>
 <param name="wmiConnection">The WMI connection provided by WMIUtilities</param>
 <param name="command">The full command path with parameters that you want to run</param>
 <param name="startTime">The start DateTime when you want to run this command <example>DateTime.Now.AddMinutes(1)</example></param>
 <param name="daysOfMonth">An array of numeric values that represent the days of the month <example>{1, 15}</example></param>
 <param name="daysOfWeek">An array of System.DayOfWeek that represent the days of the week to run this command</param>
 <param name="jobId">The ID given to the created scheduled job</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJobReturnValue">Win32ScheduledJobReturnValue</see> result</returns>
 <remarks>When selecting the start time, don't use DateTime.Now if you want to fire it immediatly. Instead use a minute later or else the job likely won't get fired ever.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJob.Create(Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue,System.String,System.DateTime,System.UInt32[],System.DayOfWeek[],System.Boolean,System.UInt32@)">
 <summary>
 Create a Windows scheduled job task to run a single command a certain time with a given schedule
 </summary>
 <param name="wmiConnection">The WMI connection provided by WMIUtilities</param>
 <param name="command">The full command path with parameters that you want to run</param>
 <param name="startTime">The start DateTime when you want to run this command <example>DateTime.Now.AddMinutes(1)</example></param>
 <param name="daysOfMonth">An array of numeric values that represent the days of the month <example>{1, 15}</example></param>
 <param name="daysOfWeek">An array of System.DayOfWeek that represent the days of the week to run this command</param>
 <param name="jobId">The ID given to the created scheduled job</param>
 <param name="interactWithDesktop">A yes/no value that allows the process to interact with the desktop or not</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJobReturnValue">Win32ScheduledJobReturnValue</see> result</returns>
 <remarks>When selecting the start time, don't use DateTime.Now if you want to fire it immediatly. Instead use a minute later or else the job likely won't get fired ever.</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJob.Delete(Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue,System.UInt32)">
 <summary>
 Delete a Windows scheduled job task given the job Id
 </summary>
 <param name="wmiConnection">The WMI connection provided by WMIUtilities</param>
 <param name="jobId">The job Id to delete</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ScheduledJobReturnValue">Win32ScheduledJobReturnValue</see> result</returns>
 <remarks></remarks>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service">
 <summary>
 Use this class to get information or call methods for windows services
 </summary>
 <remarks></remarks>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.PathName">
 <summary>
 Fully-qualified path to the service binary file that implements the service
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.ComputerName">
 <summary>
 Returns the name of the computer on which the service runs
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.PathInfo(System.Boolean)">
 <summary>
 Returns the path information both in local and UNC form
 </summary>
 <param name="returnPathOnly">Set to true to return the path without the file name. Set to false to return path and file name</param>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.StartName">
 <summary>
 Get the account name the service is running under
 </summary>
 <returns>Account name string</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.StartBuiltInServiceAccount">
 <summary>
 Get the built in account name if the service is running under a builtin accontt i.e. LocalSystem or Network Service
 </summary>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceBuiltinAccount">Win32ServiceBuiltinAccount</see> enum or Nothing if it is running under a domain account</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.ChangeAccount(Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceBuiltinAccount)">
 <summary>
 Change the user account to run the service under
 </summary>
 <param name="account">The built in system account to run as</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceReturnCode">Win32ServiceReturnCode</see> value</returns>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.ChangePathName(System.String,System.Boolean)">
 <summary>
 Change the path to which a service points
 </summary>
 <param name="newPath">Fully-qualified path to the service binary file that implements the service</param>
 <param name="restart">You must set this parameter to true if you want the service to run from the different path. Otherwise, it will not take effect until the service is restarted. If the service is currently in a stopped state, this parameter will be ignored.</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceReturnCode">Win32ServiceReturnCode</see> value</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.ChangeAccount(System.String,System.String)">
 <summary>
 Change the user account to run the service under
 </summary>
 <param name="accountName">The local or domain account to run as</param>
 <param name="password">The account password</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceReturnCode">Win32ServiceReturnCode</see> value</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.StartService(System.Boolean)">
 <summary>
 Start the service if it isn't already
 </summary>
 <param name="waitTillStarted">Yes/No if the command should wait for the process to start before exiting</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceReturnCode">Win32ServiceReturnCode</see> value</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.StopService(System.Boolean)">
 <summary>
 Stop the service if it isn't already
 </summary>
 <param name="waitTillStopped">Yes/No if the command should wait till the process stop before exiting</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceReturnCode">Win32ServiceReturnCode</see> value</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service.ChangeStartMode(Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceStartMode)">
 <summary>
 Change the service's start mode when Windows starts.
 </summary>
 <param name="startMode">The <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceStartMode">Win32ServiceStartMode</see> value representing the service start mode to change to.</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32ServiceReturnCode">Win32ServiceReturnCode</see> value</returns>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue">
 <summary>This structure is returned by <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI"/>. There are many instances where automated processes that run tasks on remote machine decide to continue, even if they cannot connect to the remote machine. Thus the call to <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI"/> returns an instance of this type and leaves it up to the caller whether they want to raise an exception or have logic in their code that allows them to continue if a WMI connection cannot be established. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue.RaiseConnectionException"/></summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue.ErrorMessage">
 <summary>
 Contains the text of the error that was encountered while trying to connect to the WMI Server. <seealso cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue.RaiseConnectionException"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue.WMIServer">
 <summary>
 Contains the name of the WMI Server you are currently connected to. If the WMI server is localhost, it always returns a period '.' which is how WMI specifies localhost.
 </summary>
 <returns>Name of WMI Server you are connected to or period if the WMI Server is localhost</returns>
 <remarks>If you want need to obtain the name of the computer you are connected to, use <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.NetBiosName"/> or <see cref="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ComputerName"/> </remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue.RaiseConnectionException">
 <summary>
 Use this call to raise the an exception if a call to <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI"/> failed. The original call never fails but returns a value of <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue"/>. It is up to the caller to decide whether this condition should result in an exception or whether the caller can continue if a WMI connection fails.
 </summary>
 <exception cref="T:System.Management.ManagementException">Will be thrown if the value of <paramref name="returnValue"/>.ConnectionSuccesful is false.</exception>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.ProcessInformation">
 <summary>
 Returns the exit code of the process launched by <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.StartProcess(System.String,System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.String,System.UInt32)"/>. This class contains information contained in System.Web.ProcessInfo class but I did not want to create an additional dependency here.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.ProcessInformation.ExitCode">
 <summary>
Returns the ExitCode of process if the <c>waitForExit</c> parameter in <c>StartProcess</c> is set to true, <c>0</c> otherwise. 
If the process times out <see cref="F:System.Management.ManagementStatus.Timedout"/> is returned. If the timeout value specified was 0, this value means that the process terminated but WMI did not receive the termination event. Thus, we do not know whether the process completed successfully or not. The timeout occured because we did not receive an event for 60 seconds and checked to see if the process was still running and that check returned false.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.ProcessInformation.ProcessID">
 <summary>
 Returns the ID of the process launched by <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.StartProcess(System.String,System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.String,System.UInt32)"/>
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities">
 <summary>
 Use this class for all WMI work. It wraps up establishing a connection to a namespace on a local or remote WMI server and contains several utility functions to execute WMI object queries, obtain system information, etc.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI(System.String)">
 <summary>
 Connects to WMI default namespace on the computer specified in the <paramref name="computerName"/> value using impersonated credentials.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI(Blackbaud.AppFx.Platform.Automation.CodeExecutionContext,System.String)">
 <summary>
 ConnectToWMI serves as the entry point to all WMI calls. It wraps up binding to a namespace on a WMI server. The <see cref="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue.Instance"/> object is used to execute all subsequent WMI calls aginst against the specified scope."
 </summary>
 <param name="context"><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/></param>
 <returns >Returns a structure of type <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue"/></returns>
 <remarks>The code tries to connect to the namespace on the specified WMI server and traps any exceptions that may be thrown. Check the <c>ConnectionSuccessFul</c> of the <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.WMIReturnValue"/> to verify that you were able to bind to the WMI namespace on the specified server. <para>A lot of WMI queries are issued when logging system information. In many cases, we want to calling code to be able to continue, even if obtaining system information fails. This approach makes it more convenient for the caller to check whether binding to the WMI namspace succeeded without having to wrap each WMI call in a <c>try/batch</c> block.</para></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.StringIsValidIPAddress(System.String)">
 <summary>
 Use this function to determine if a string is a valid IP address. This function uses a regular expression to validate that a string follows the IP address format. It does not validate whether the IP address is pingable or actually exists. It does validate the numbers to make sure none of them exceed 255.
 </summary>
 <param name="inputString">String to verify</param>
 <returns>True if string conforms to the IP address format, false otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.RemoveNetWorkSlashesFromComputerName(System.String)">
 <summary>
 Removes any spaces before and after computerName as well as preceeding \\.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.MachineIsLocal(System.String)">
 <summary>
 Call this function to determine whether you are dealing with the machine that this code is executing on or a remote machine. This function handles the default format used in WMI to indicate the local machine '.', as well as localhost and other ways off referring to the local machine besides referencing it by its name.
 </summary>
 <param name="computerName">string value containing name of computer, IP address, localHost, etc. Passing in nothing or an empty string for this parameter is treated the same as passing in the name of the local computer.</param>
 <returns><c>True</c> if machine is localhost, <c>false</c> otherwise.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ValidateComputerName(System.String)">
 <summary>
 Use this function to obtain the name of the computer on which the code executes.
 </summary>
 <param name="computerName">Name of computer. Empty string, <c>.</c>, localhost will be translated to the name of the local computer</param>
 <returns>Name of computer on which code executes. If <paramref name="computerName"/> points to a remote machine, it will return the value that was passed in.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.FormatPath(System.String)">
 <summary>
 Use this function to escape the <c>\</c> character in a file path before passing the string to a WMI query.
 </summary>
 <param name="path">Valid path or UNC path</param>
 <returns>Input string with all <c>\</c> escaped as <c>\\</c>.</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ParseCompleteHostName(System.String,System.String@,System.String@)">
 <summary>
 Use this function to parse a string such as MyComputer.MyDomain.com into its component parts
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ReverseIPLookUp(System.String)">
 <summary>
 This function uses WMI to obtain the computer name, not ActiveDirectory. This can be useful when the ActiveDirectory tree is corrupt and returns incorrect host name for IP addresses.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.NetBiosName(System.String)">
 <summary>
 This function returns the NetBios name of a computer or IP Address. It is the same as the NetBios name returned by the WMIInstance class
 </summary>
 <param name="NameOrIPAddress"></param>
 <returns></returns>
 <remarks>This function will try to obtain the information through ActiveDirectory and the System.Net namespace if a WMI connection cannot be established</remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ExecuteObjectQuery(System.String)">
 <summary>Use this method to execute a WMI query against the WMI server identified by the <paramref name="Scope"/> parameter.</summary>
 <param name="QueryString">WMI query to be executed</param>
 <returns><c>System.Management.ManagementObjectCollection</c></returns>
 <exception cref="T:System.ArgumentException">Thrown if checking the count of the returned query results in an exception. The original exception is returned as the inner exception. The query string is also returned as part of the error message. Including the query string as part of the exception message facilitates tracking down problems resulting from ill-formed queries.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ObtainBasicSystemInfoXML(System.Xml.XmlWriter,System.String,Blackbaud.AppFx.Platform.Automation.WMI.SystemInformationFilters)">
 <summary>
 Use this method to return an XML representation of basic system information consisting of the WIN32_COMPUTERSYSTEM and WIN32_PROCESSOR WMI classes. This method is intended to be used by logging code which needs to persist basic system information to the log. It is not intended to be used to determine programmatically which type of processor is being used and then take some action based on this value in code. There are more efficient ways to accomplish that.
 </summary>
 <param name="myXMLWriter">Use</param>
 <param name="RootNodeName"></param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.StartProcess(System.String,System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.String,System.UInt32)">
 <summary>
 RunProcess allows you to launch a process on localhost or on a remote machine.
</summary>
 <param name="commandLine">Specify the full path to the program to be executed, along with any command line parameters. If the path to the exe contains a space, surround it with double quotes.</param>
 <param name="timeoutInSeconds">Will return control to the caller after the specified amount of seconds, even if the process has not terminated yet. If <paramref name="waitForExit"></paramref> is true, this value will be ignored. A value of 0 indicates no timeout.</param>
 <param name="currentDirectory">Specify the working directory where you want the process to start. If the parameter is nothing or an empty string it will be explored.</param>
 <param name="windowStyle">Specify the window style of the process. Note that remote processes cannot be run interactively. You will only see the process in Task Manager. It will not be able to interact with the desktop.</param>
 <param name="title">Specify a title for the window of the new console process only. It is ignored for everything else.</param>
 <returns> <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.ProcessInformation"/></returns>
 <exception cref="T:System.ArgumentException">Thrown if the <c>scope</c> parameter is nothing, the <c>commandLine</c> paramater is nothing or an empty string, or the return value of Win32_Process.Create is 9 (Path not found) or 21 (Invalid Parameter).</exception>
 <exception cref="T:System.Security.SecurityException">Thrown if the return value of the Win32_Process.Create WMI call is 2 (Access Denied) or 3 (Insufficient Privileges). Do not confuse this with a System.UnAuthorizedAccessException which may be thrown if the connection to the WMI name space fails because of security restrictions. This exception is only thrown if you have been able to gain access to the WMI name space but were denied access to the exe you are trying to execute.</exception> 
 <exception cref="T:System.Management.ManagementException">Thrown if the return value of the Win32_Process.Create WMI call is 8 (Unknown Failure). If an error code is returned that is not specified in the WMI documentation, an assert is raised. The exception will only be thrown if the ProcessID is 0.</exception>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.WMI.EarlyProcessTerminationException">Thrown if <param name="waitForExit"/> is <c>true</c> and the process is no longer running when WMI tries to Win32_ProcessStopTrace.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.AssignRightsToFolder(Blackbaud.AppFx.Platform.Automation.Security.User,System.String,System.Security.AccessControl.FileSystemRights)">
 <summary>
Use this method to assign rights for a user to a folder. This can be used locally and remotely.
 </summary>
 <remarks>If the user is a local user on a computer, the rights will be assigned to the folder on the computer where the user exists. You can use this code to assign rights for a user on a remote machine as well. Simply open up the user on the remote machine and pass the user as a parameter to this method.</remarks>
 <exception cref="T:System.IO.IOException">Thrown if the folder does not exist.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.AssignRightsToFolder(Blackbaud.AppFx.Platform.Automation.Security.Group,System.String,System.Security.AccessControl.FileSystemRights)">
 <summary>
Use this method to assign rights for a group to a folder. This can be used locally and remotely.
 </summary>
 <remarks>If the group is a local group on a computer, the rights will be assigned to the folder on the computer where the group exists. You can use this code to assign rights for a group on a remote machine as well. Simply open up the group on the remote machine and pass the group as a parameter to this method.</remarks>
 <exception cref="T:System.IO.IOException">Thrown if the folder does not exist.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.AssignRightsToFolder(System.Security.Principal.IdentityReference,System.String,System.Security.AccessControl.FileSystemRights)">
 <summary>
 Use this method to assign rights to an <see cref="T:System.Security.Principal.IdentityReference"/> on a local or remote machine. In order to set a path on a remote machine, you can either pass in a WMI context with a remote server or pass in a UNC path, such as \\RemoveServer\C$\SomeFolder with a local WMI context.
 </summary>
 <param name="securityIdentity">Instance of <see cref="T:System.Security.Principal.NTAccount"/> or <see cref="T:System.Security.Principal.SecurityIdentifier"/>. When assigning rights on a remote folder, the IdentifyReference has to be resolvable on the remote computer. It either has to be a domain account or an account on the remote computer.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.EnvironmentVariable(System.String)">
 <summary>
 Returns the value of an environment variable on localHost or a remote machine. If the variable is not found, it returns an empty string.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.EnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
 <summary>
 Returns the value of an environment variable on localHost or a remote machine. If the variable is not found, it will be created. The variable will only be persisted once you set the value property.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.Domain">
 <summary>
 Use this function to obtain the domain name of the WMIServer that you connected to when calling <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI"/>
 </summary>
 <returns>Domain name of computer</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.PartOfDomain">
 <summary>
 Return yes/no if the machine is part of a domain
 </summary>
 <value>Yes/No value if the computer is on a domain</value>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.NetBiosName">
 <summary>
 Returns the computer name in NetBios format. Check the following hyperlink for additional information on name format: http://www.rlmueller.net/NameTranslateFAQ.htm#What%20is%20NameTranslate
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.LDAPPath">
 <summary>
 Returns the LDAP path that can be used to access the computer through the ActiveDirectory LDAP provider
 </summary>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException">Thrown if computer is not found in ActiveDirectory search. Any other exception is re-raised with additional context information as a System.Exception. The original exception is found in the innerException property of the system.exception.</exception>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.LDAPRootPath">
 <summary>
 Returns the LDAP root path where the computer is located.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ComputerName">
 <summary>
 Use this function to obtain the name of a computer. This will also work if you passed in an IP address to <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ConnectToWMI"/>
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.ExecutionContext">
 <summary>
 returns the current code execution object
 </summary>
 <returns><see cref="T:Blackbaud.AppFx.Platform.Automation.CodeExecutionContext"/></returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.TotalPhysicalMemory">
 <summary>
 Get the total physical memory on the server in megabytes (MB)
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.GetService(System.String)">
 <summary>
 Get a specific Windows Service based off the service name
 </summary>
 <param name="serviceName">The service name (not the display name)</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service">Win32Service</see> object</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.GetService(System.UInt32)">
 <summary>
 Get a specific Windows Service based off the process ID
 </summary>
 <param name="processId">The process ID</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service">Win32Service</see> object</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.GetScheduledJob(System.UInt32)">
 <summary>
 Get the specific Windows Scheduled Task based off the job identifier
 </summary>
 <param name="jobId">The job Id for the scheduled task</param>
 <returns>A <see cref="T:Blackbaud.AppFx.Platform.Automation.WMI.Win32Service">Win32ScheduledJob</see> object</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.HandleStandardWMIErrors(System.UInt32,System.String)">
 <summary>
 This is the shared error handler called by multiple WMI functions. The return code is defined as an integer because it could in theory we a value that is not contained
 </summary>
 <param name="returnCode"></param>
 <param name="context"></param>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.WaitForProcessToExit(System.UInt32,System.Int32,System.Boolean)">
 <summary>
 Call this function to block the current thread until the process has existed.
 </summary>
 <param name="ProcessID"></param>
 <param name="timeOutInSeconds">Specify 0 to wait until the process terminates.</param>
 <param name="raiseProcessNotRunningError">This value should be true for the initial call and false for recursive calls</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.GetSafeExitCode(System.Management.ManagementBaseObject)">
 <summary>
 Call this function to obtain the ExitCode property which is only supported on Windows Server 2003 and higher. The exit code also needs to be converted from uint32 format to a regular integer which is what the process returns in the first place
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.FixUpProcessName(System.String)">
 <summary>
 Makes sure the process name is in the correct format for WMI. If it does not contain .exe, it will be added
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.WMI.EarlyProcessTerminationException">
 <summary>
 This exception is thrown by <see cref="M:Blackbaud.AppFx.Platform.Automation.WMI.WMIUtilities.StartProcess(System.String,System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.String,System.UInt32)"/> if the WaitForExit flag is set to true and WMI event that is supposed to track the fact that the process exited cannot be hooked up before the process has terminated. If a process is run remotely and only completes a very short task, it is possible that the event cannot be hooked up before the process has finished. It is up to the caller to act on or ignore this exception based on what the expected process run time is. The class is derived from <see cref="T:System.Management.ManagementException"/>
 </summary>s
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Xml.CompareXML">
 <summary>
 Use this class to compare two XML documents or strings and list the differences. It is geared towards a semantic comparison and ignores position. For example, it cares whether element X exists in the document at a given level, but not about the order
 It was written to help detect differences in files such as Web.Config files after the load test that may have an appKey setting of a certain type, but not necessarily at the same place than the file we are comparing it to. In terms of semantics, the two files
 are the same for our purposes, even though a text comparison would show differences
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter">
 <summary>
 This class inherits from <see cref="T:System.Xml.XmlWriter"/> and wraps up the creation of an XMLWriter instance which outputs to a <c>Text.StringBuilder</c>.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.#ctor">
 <summary>
 Constructor creates a default <see cref="T:System.Xml.XmlWriterSettings"/> object with <c>Indent=true</c> and <c>IndentChars="    "</c>.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.#ctor(System.Xml.XmlWriterSettings)">
 <summary>
 This constructor allows you to pass in a custom <see cref="T:System.Xml.XmlWriterSettings"/> object to specify how the XML should be formatted.
 </summary>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.#ctor(System.Boolean)">
 <summary>
 This constructor allows you to pass in a custom <see cref="T:System.Xml.XmlWriterSettings"/> object to specify how the XML should be formatted.
 </summary>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.Writer">
 <returns>Returns that native <c>XML.XMLWriter</c> object</returns>
</member>
<member name="P:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.XMLString">
 <summary>
 Accessing this property will force a flush of the XMLWriter to the interal <c>Text.StringBuilder</c> object and return its the <c>ToString</c> value. This property will return an empty string if the writer writes directly to a file and the string builder object is not used.
 </summary>
 <returns>XML string</returns>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.Save(System.String)">
 <param name="fileName">This parameter will be ignored if the constructor that takes a file name as an argument is used.</param>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.CustomXMLWriter.Save">
 <summary>
 Use this method to save the output. If the constructor with a file name is used, the output will be written to that file name. If the default constructor is used, the output will be written to CustomXmlWriterOutput_yyyy_MM_dd.xml
 </summary>
</member>
<member name="T:Blackbaud.AppFx.Platform.Automation.Xml.Serializer`1">
 <summary>
 This shared class wraps up some utility functions to serialize and deserialize objects from and to XML and validate the deserialization against a schema
 </summary>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.Serializer`1.Deserialize(System.String)">
 <summary>
 Use this function to deserialize on object of type T and validate the XML against a schema before deserialization.
 </summary>
 <param name="xmlStringOrXmlFile">XML to be deserialized. This can be in the form of an XML string or a file containing the XML</param>
 <returns>Deserialized instance of type T.</returns>
 <exception cref="T:System.ArgumentException">Thrown if file name is passed in to <paramref name="xml"/> and file does not exist.</exception>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException">Thrown if XML fails schema validation.</exception>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.Serializer`1.Deserialize(System.String,System.String)">
 <summary>
 Use this function to deserialize on object of type T and validate the XML against a schema before deserialization.
 </summary>
 <param name="xmlStringOrXmlFile">XML to be deserialized. This can be in the form of an XML string or a file containing the XML</param>
 <param name="schemaResourceName">Name of the schema resource. It is not necessary to specify a fully qualified name, including the name of the assembly. If the value of this parameter is an empty string, no validation will be performed.</param>
 <returns>Deserialized instance of type T.</returns>
 <exception cref="T:System.ArgumentException">Thrown if file name is passed in to <paramref name="xml"/> and file does not exist.</exception>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException">Thrown if XML fails schema validation.</exception>
 <remarks></remarks>
</member>
<member name="M:Blackbaud.AppFx.Platform.Automation.Xml.Serializer`1.Deserialize(System.String,System.String,System.Reflection.Assembly)">
 <summary>
 Use this function to deserialize on object of type T and validate the XML against a schema before deserialization.
 </summary>
 <param name="xmlStringOrXmlFile">XML to be deserialized. This can be in the form of an XML string or a file containing the XML</param>
 <param name="schemaResourceName">Name of the schema resource. It is not necessary to specify a fully qualified name, including the name of the assembly. If the value of this parameter is an empty string, no validation will be performed.</param>
 <param name="schemaResourceAssembly">Assembly containing the schema resource. If nothing is passed in <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/> is assumed. If <paramref name="schemaResourceName"/> is an empty string, this value will be ignored.</param>
 <returns>Deserialized instance of type T.</returns>
 <exception cref="T:System.ArgumentException">Thrown if file name is passed in to <paramref name="xml"/> and file does not exist.</exception>
 <exception cref="T:System.ArgumentException">Thrown if <paramref name="schemaResourceName"/> is non-empty string and the resource cannot be extracted or found.</exception>
 <exception cref="T:Blackbaud.AppFx.Platform.Automation.AutomationException">Thrown if XML fails schema validation or any other unexpected exception occurs.</exception>
 <remarks></remarks>
</member>
</members>
</doc>
